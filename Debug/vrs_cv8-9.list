
vrs_cv8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080060a0  080060a0  000160a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006444  08006444  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006444  08006444  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006444  08006444  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800644c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001d4  08006620  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006620  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c99  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018ac  00000000  00000000  00027e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000830  00000000  00000000  00029750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  00029f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000046ba  00000000  00000000  0002a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c1b  00000000  00000000  0002ed92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077f71  00000000  00000000  000349ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac91e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fcc  00000000  00000000  000ac99c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006084 	.word	0x08006084

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006084 	.word	0x08006084

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	fab3 f383 	clz	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	605a      	str	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b089      	sub	sp, #36	; 0x24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c80:	bf00      	nop
 8000c82:	3724      	adds	r7, #36	; 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa93 f3a3 	rbit	r3, r3
 8000ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	613b      	str	r3, [r7, #16]
  return(result);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	210f      	movs	r1, #15
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b088      	sub	sp, #32
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000dc6:	e048      	b.n	8000e5a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fede 	bl	8000ba8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d003      	beq.n	8000dfc <LL_GPIO_Init+0x5e>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d106      	bne.n	8000e0a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	461a      	mov	r2, r3
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff14 	bl	8000c32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff3a 	bl	8000c8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d119      	bne.n	8000e54 <LL_GPIO_Init+0xb6>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d807      	bhi.n	8000e46 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff51 	bl	8000ce6 <LL_GPIO_SetAFPin_0_7>
 8000e44:	e006      	b.n	8000e54 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff76 	bl	8000d40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1af      	bne.n	8000dc8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <LL_GPIO_Init+0xda>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d107      	bne.n	8000e88 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff febd 	bl	8000c02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_RCC_HSI_IsReady+0x20>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LL_RCC_LSE_IsReady+0x20>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2301      	moveq	r3, #1
 8000eca:	2300      	movne	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <LL_RCC_GetSysClkSource+0x18>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <LL_RCC_GetAHBPrescaler+0x18>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <LL_RCC_GetAPB1Prescaler+0x18>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <LL_RCC_GetUSARTClockSource+0x28>)
 8000f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f58:	2103      	movs	r1, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	401a      	ands	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	4313      	orrs	r3, r2
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000

08000f78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <LL_RCC_PLL_GetMainSource+0x18>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <LL_RCC_PLL_GetPrediv+0x18>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	f003 030f 	and.w	r3, r3, #15
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000fd4:	f000 f860 	bl	8001098 <RCC_GetSystemClockFreq>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f87a 	bl	80010dc <RCC_GetHCLKClockFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f888 	bl	8001108 <RCC_GetPCLK1ClockFreq>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f894 	bl	8001130 <RCC_GetPCLK2ClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60da      	str	r2, [r3, #12]
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12a      	bne.n	8001080 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff8e 	bl	8000f4c <LL_RCC_GetUSARTClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b02      	cmp	r3, #2
 8001034:	d00f      	beq.n	8001056 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001036:	2b03      	cmp	r3, #3
 8001038:	d005      	beq.n	8001046 <LL_RCC_GetUSARTClockFreq+0x2e>
 800103a:	2b01      	cmp	r3, #1
 800103c:	d114      	bne.n	8001068 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800103e:	f000 f82b 	bl	8001098 <RCC_GetSystemClockFreq>
 8001042:	60f8      	str	r0, [r7, #12]
        break;
 8001044:	e021      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001046:	f7ff ff25 	bl	8000e94 <LL_RCC_HSI_IsReady>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001052:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001054:	e016      	b.n	8001084 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001056:	f7ff ff2f 	bl	8000eb8 <LL_RCC_LSE_IsReady>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001064:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001066:	e00f      	b.n	8001088 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001068:	f000 f816 	bl	8001098 <RCC_GetSystemClockFreq>
 800106c:	4603      	mov	r3, r0
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f834 	bl	80010dc <RCC_GetHCLKClockFreq>
 8001074:	4603      	mov	r3, r0
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f846 	bl	8001108 <RCC_GetPCLK1ClockFreq>
 800107c:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800107e:	e004      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001080:	bf00      	nop
 8001082:	e002      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001084:	bf00      	nop
 8001086:	e000      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001088:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	007a1200 	.word	0x007a1200

08001098 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80010a2:	f7ff ff1b 	bl	8000edc <LL_RCC_GetSysClkSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d006      	beq.n	80010ba <RCC_GetSystemClockFreq+0x22>
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d007      	beq.n	80010c0 <RCC_GetSystemClockFreq+0x28>
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <RCC_GetSystemClockFreq+0x40>)
 80010b6:	607b      	str	r3, [r7, #4]
      break;
 80010b8:	e009      	b.n	80010ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <RCC_GetSystemClockFreq+0x40>)
 80010bc:	607b      	str	r3, [r7, #4]
      break;
 80010be:	e006      	b.n	80010ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80010c0:	f000 f84a 	bl	8001158 <RCC_PLL_GetFreqDomain_SYS>
 80010c4:	6078      	str	r0, [r7, #4]
      break;
 80010c6:	e002      	b.n	80010ce <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <RCC_GetSystemClockFreq+0x40>)
 80010ca:	607b      	str	r3, [r7, #4]
      break;
 80010cc:	bf00      	nop
  }

  return frequency;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	007a1200 	.word	0x007a1200

080010dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80010e4:	f7ff ff08 	bl	8000ef8 <LL_RCC_GetAHBPrescaler>
 80010e8:	4603      	mov	r3, r0
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <RCC_GetHCLKClockFreq+0x28>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	40d3      	lsrs	r3, r2
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08006138 	.word	0x08006138

08001108 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001110:	f7ff ff00 	bl	8000f14 <LL_RCC_GetAPB1Prescaler>
 8001114:	4603      	mov	r3, r0
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <RCC_GetPCLK1ClockFreq+0x24>)
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	461a      	mov	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	40d3      	lsrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08006148 	.word	0x08006148

08001130 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001138:	f7ff fefa 	bl	8000f30 <LL_RCC_GetAPB2Prescaler>
 800113c:	4603      	mov	r3, r0
 800113e:	0adb      	lsrs	r3, r3, #11
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <RCC_GetPCLK2ClockFreq+0x24>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	40d3      	lsrs	r3, r2
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	08006148 	.word	0x08006148

08001158 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001166:	f7ff ff07 	bl	8000f78 <LL_RCC_PLL_GetMainSource>
 800116a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d003      	beq.n	8001180 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001178:	e005      	b.n	8001186 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800117c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800117e:	e005      	b.n	800118c <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001182:	60fb      	str	r3, [r7, #12]
      break;
 8001184:	e002      	b.n	800118c <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001188:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800118a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800118c:	f7ff ff10 	bl	8000fb0 <LL_RCC_PLL_GetPrediv>
 8001190:	4603      	mov	r3, r0
 8001192:	3301      	adds	r3, #1
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	fbb2 f4f3 	udiv	r4, r2, r3
 800119a:	f7ff fefb 	bl	8000f94 <LL_RCC_PLL_GetMultiplicator>
 800119e:	4603      	mov	r3, r0
 80011a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	fa92 f2a2 	rbit	r2, r2
 80011b0:	603a      	str	r2, [r7, #0]
  return(result);
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	fab2 f282 	clz	r2, r2
 80011b8:	40d3      	lsrs	r3, r2
 80011ba:	3302      	adds	r3, #2
 80011bc:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	003d0900 	.word	0x003d0900
 80011cc:	007a1200 	.word	0x007a1200

080011d0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	615a      	str	r2, [r3, #20]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <LL_TIM_Init+0xd4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <LL_TIM_Init+0x2c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130e:	d003      	beq.n	8001318 <LL_TIM_Init+0x2c>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <LL_TIM_Init+0xd8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d106      	bne.n	8001326 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <LL_TIM_Init+0xd4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <LL_TIM_Init+0x6a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001334:	d00f      	beq.n	8001356 <LL_TIM_Init+0x6a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <LL_TIM_Init+0xd8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00b      	beq.n	8001356 <LL_TIM_Init+0x6a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <LL_TIM_Init+0xdc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <LL_TIM_Init+0x6a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <LL_TIM_Init+0xe0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d003      	beq.n	8001356 <LL_TIM_Init+0x6a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <LL_TIM_Init+0xe4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d106      	bne.n	8001364 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff3b 	bl	80011ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff27 	bl	80011d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LL_TIM_Init+0xd4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00b      	beq.n	80013a2 <LL_TIM_Init+0xb6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <LL_TIM_Init+0xdc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <LL_TIM_Init+0xb6>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LL_TIM_Init+0xe0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d003      	beq.n	80013a2 <LL_TIM_Init+0xb6>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <LL_TIM_Init+0xe4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d105      	bne.n	80013ae <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7c1b      	ldrb	r3, [r3, #16]
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff2d 	bl	8001208 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff8c 	bl	80012cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40012c00 	.word	0x40012c00
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40014000 	.word	0x40014000
 80013cc:	40014400 	.word	0x40014400
 80013d0:	40014800 	.word	0x40014800

080013d4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ea:	d01f      	beq.n	800142c <LL_TIM_OC_Init+0x58>
 80013ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f0:	d804      	bhi.n	80013fc <LL_TIM_OC_Init+0x28>
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d00c      	beq.n	8001410 <LL_TIM_OC_Init+0x3c>
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d011      	beq.n	800141e <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80013fa:	e033      	b.n	8001464 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d022      	beq.n	8001448 <LL_TIM_OC_Init+0x74>
 8001402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001406:	d026      	beq.n	8001456 <LL_TIM_OC_Init+0x82>
 8001408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800140c:	d015      	beq.n	800143a <LL_TIM_OC_Init+0x66>
      break;
 800140e:	e029      	b.n	8001464 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f82c 	bl	8001470 <OC1Config>
 8001418:	4603      	mov	r3, r0
 800141a:	75fb      	strb	r3, [r7, #23]
      break;
 800141c:	e022      	b.n	8001464 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f8a5 	bl	8001570 <OC2Config>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
      break;
 800142a:	e01b      	b.n	8001464 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 f922 	bl	8001678 <OC3Config>
 8001434:	4603      	mov	r3, r0
 8001436:	75fb      	strb	r3, [r7, #23]
      break;
 8001438:	e014      	b.n	8001464 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f99f 	bl	8001780 <OC4Config>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
      break;
 8001446:	e00d      	b.n	8001464 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fa04 	bl	8001858 <OC5Config>
 8001450:	4603      	mov	r3, r0
 8001452:	75fb      	strb	r3, [r7, #23]
      break;
 8001454:	e006      	b.n	8001464 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 fa5f 	bl	800191c <OC6Config>
 800145e:	4603      	mov	r3, r0
 8001460:	75fb      	strb	r3, [r7, #23]
      break;
 8001462:	bf00      	nop
  }

  return result;
 8001464:	7dfb      	ldrb	r3, [r7, #23]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	f023 0201 	bic.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f023 0202 	bic.w	r2, r3, #2
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f023 0201 	bic.w	r2, r3, #1
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <OC1Config+0xf0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00b      	beq.n	80014fa <OC1Config+0x8a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <OC1Config+0xf4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <OC1Config+0x8a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <OC1Config+0xf8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d003      	beq.n	80014fa <OC1Config+0x8a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <OC1Config+0xfc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d11e      	bne.n	8001538 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f023 0208 	bic.w	r2, r3, #8
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f023 0204 	bic.w	r2, r3, #4
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4313      	orrs	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fe6a 	bl	8001224 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40014000 	.word	0x40014000
 8001568:	40014400 	.word	0x40014400
 800156c:	40014800 	.word	0x40014800

08001570 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	f023 0210 	bic.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	0212      	lsls	r2, r2, #8
 80015bc:	4313      	orrs	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f023 0220 	bic.w	r2, r3, #32
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f023 0210 	bic.w	r2, r3, #16
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <OC2Config+0xf8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00b      	beq.n	8001600 <OC2Config+0x90>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a20      	ldr	r2, [pc, #128]	; (800166c <OC2Config+0xfc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d007      	beq.n	8001600 <OC2Config+0x90>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <OC2Config+0x100>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d003      	beq.n	8001600 <OC2Config+0x90>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <OC2Config+0x104>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d11f      	bne.n	8001640 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	019b      	lsls	r3, r3, #6
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	019b      	lsls	r3, r3, #6
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fdf4 	bl	8001240 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40014000 	.word	0x40014000
 8001670:	40014400 	.word	0x40014400
 8001674:	40014800 	.word	0x40014800

08001678 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <OC3Config+0xf8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00b      	beq.n	8001706 <OC3Config+0x8e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a20      	ldr	r2, [pc, #128]	; (8001774 <OC3Config+0xfc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <OC3Config+0x8e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <OC3Config+0x100>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d003      	beq.n	8001706 <OC3Config+0x8e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1e      	ldr	r2, [pc, #120]	; (800177c <OC3Config+0x104>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11f      	bne.n	8001746 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	029b      	lsls	r3, r3, #10
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fd7f 	bl	800125c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40012c00 	.word	0x40012c00
 8001774:	40014000 	.word	0x40014000
 8001778:	40014400 	.word	0x40014400
 800177c:	40014800 	.word	0x40014800

08001780 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ba:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	0212      	lsls	r2, r2, #8
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	031b      	lsls	r3, r3, #12
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	031b      	lsls	r3, r3, #12
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <OC4Config+0xc8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00b      	beq.n	8001810 <OC4Config+0x90>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <OC4Config+0xcc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d007      	beq.n	8001810 <OC4Config+0x90>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <OC4Config+0xd0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d003      	beq.n	8001810 <OC4Config+0x90>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <OC4Config+0xd4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d107      	bne.n	8001820 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fd20 	bl	8001278 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40014000 	.word	0x40014000
 8001850:	40014400 	.word	0x40014400
 8001854:	40014800 	.word	0x40014800

08001858 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <OC5Config+0xb4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00b      	beq.n	80018d4 <OC5Config+0x7c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <OC5Config+0xb8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <OC5Config+0x7c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <OC5Config+0xbc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d003      	beq.n	80018d4 <OC5Config+0x7c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <OC5Config+0xc0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d109      	bne.n	80018e8 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4619      	mov	r1, r3
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fccd 	bl	8001294 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40014000 	.word	0x40014000
 8001914:	40014400 	.word	0x40014400
 8001918:	40014800 	.word	0x40014800

0800191c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	0212      	lsls	r2, r2, #8
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	051b      	lsls	r3, r3, #20
 8001966:	4313      	orrs	r3, r2
 8001968:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	4313      	orrs	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <OC6Config+0xb4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00b      	beq.n	800199a <OC6Config+0x7e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <OC6Config+0xb8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d007      	beq.n	800199a <OC6Config+0x7e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <OC6Config+0xbc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d003      	beq.n	800199a <OC6Config+0x7e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a11      	ldr	r2, [pc, #68]	; (80019dc <OC6Config+0xc0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d109      	bne.n	80019ae <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fc78 	bl	80012b0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40014000 	.word	0x40014000
 80019d8:	40014400 	.word	0x40014400
 80019dc:	40014800 	.word	0x40014800

080019e0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001a52:	b4b0      	push	{r4, r5, r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001a60:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001a62:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6a:	d114      	bne.n	8001a96 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	005a      	lsls	r2, r3, #1
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	441a      	add	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001a80:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001a84:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a86:	086b      	lsrs	r3, r5, #1
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001a94:	e00a      	b.n	8001aac <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	085a      	lsrs	r2, r3, #1
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bcb0      	pop	{r4, r5, r7}
 8001ab4:	4770      	bx	lr
	...

08001ab8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff88 	bl	80019e0 <LL_USART_IsEnabled>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d14e      	bne.n	8001b74 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <LL_USART_Init+0xc8>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6851      	ldr	r1, [r2, #4]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	68d2      	ldr	r2, [r2, #12]
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	6912      	ldr	r2, [r2, #16]
 8001aec:	4311      	orrs	r1, r2
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6992      	ldr	r2, [r2, #24]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff80 	bl	8001a06 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff8d 	bl	8001a2c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <LL_USART_Init+0xcc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d104      	bne.n	8001b24 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff fa7c 	bl	8001018 <LL_RCC_GetUSARTClockFreq>
 8001b20:	61b8      	str	r0, [r7, #24]
 8001b22:	e016      	b.n	8001b52 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <LL_USART_Init+0xd0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d107      	bne.n	8001b3c <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fa4b 	bl	8000fcc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e00a      	b.n	8001b52 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <LL_USART_Init+0xd4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d106      	bne.n	8001b52 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa3f 	bl	8000fcc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001b60:	2300      	movs	r3, #0
 8001b62:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69b9      	ldr	r1, [r7, #24]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff6f 	bl	8001a52 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	efff69f3 	.word	0xefff69f3
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	40004800 	.word	0x40004800

08001b90 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <LL_InitTick+0x30>)
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_InitTick+0x30>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_InitTick+0x30>)
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ffdd 	bl	8001b90 <LL_InitTick>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <LL_mDelay+0x44>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001bee:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d00c      	beq.n	8001c12 <LL_mDelay+0x32>
  {
    Delay++;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001bfe:	e008      	b.n	8001c12 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <LL_mDelay+0x44>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <LL_mDelay+0x32>
    {
      Delay--;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f3      	bne.n	8001c00 <LL_mDelay+0x20>
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <LL_SetSystemCoreClock+0x1c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <NVIC_EnableIRQ+0x30>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da0b      	bge.n	8001cc4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <NVIC_SetPriority+0x4c>)
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	3b04      	subs	r3, #4
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc2:	e009      	b.n	8001cd8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <NVIC_SetPriority+0x50>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000

08001d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff ffe3 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d8e:	f7ff ff5b 	bl	8001c48 <NVIC_GetPriorityGrouping>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ffa7 	bl	8001cec <NVIC_EncodePriority>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	2010      	movs	r0, #16
 8001da4:	f7ff ff78 	bl	8001c98 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001da8:	2010      	movs	r0, #16
 8001daa:	f7ff ff5b 	bl	8001c64 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001dae:	f7ff ff4b 	bl	8001c48 <NVIC_GetPriorityGrouping>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff97 	bl	8001cec <NVIC_EncodePriority>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2011      	movs	r0, #17
 8001dc4:	f7ff ff68 	bl	8001c98 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001dc8:	2011      	movs	r0, #17
 8001dca:	f7ff ff4b 	bl	8001c64 <NVIC_EnableIRQ>

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <LL_AHB1_GRP1_EnableClock>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000

08001e04 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e08:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e0c:	f7ff ffe2 	bl	8001dd4 <LL_AHB1_GRP1_EnableClock>

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <NVIC_SetPriorityGrouping>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <LL_DMA_GetDataLength+0x28>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	08006128 	.word	0x08006128

08001e88 <LL_RCC_HSI_Enable>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <LL_RCC_HSI_Enable+0x1c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <LL_RCC_HSI_Enable+0x1c>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <LL_RCC_HSI_IsReady>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <LL_RCC_HSI_IsReady+0x20>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000

08001ecc <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <LL_RCC_SetSysClkSource>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <LL_RCC_SetSysClkSource+0x24>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 0203 	bic.w	r2, r3, #3
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <LL_RCC_SetSysClkSource+0x24>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000

08001f20 <LL_RCC_GetSysClkSource>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <LL_RCC_GetSysClkSource+0x18>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_RCC_SetAHBPrescaler>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <LL_RCC_SetAHBPrescaler+0x24>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	4904      	ldr	r1, [pc, #16]	; (8001f60 <LL_RCC_SetAHBPrescaler+0x24>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000

08001f64 <LL_RCC_SetAPB1Prescaler>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	4904      	ldr	r1, [pc, #16]	; (8001f88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000

08001f8c <LL_RCC_SetAPB2Prescaler>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9c:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000

08002014 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <LL_FLASH_SetLatency+0x24>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0207 	bic.w	r2, r3, #7
 8002024:	4904      	ldr	r1, [pc, #16]	; (8002038 <LL_FLASH_SetLatency+0x24>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40022000 	.word	0x40022000

0800203c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <LL_FLASH_GetLatency+0x18>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40022000 	.word	0x40022000

08002058 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d106      	bne.n	8002074 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <LL_SYSTICK_SetClkSource+0x34>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <LL_SYSTICK_SetClkSource+0x34>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002072:	e005      	b.n	8002080 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <LL_SYSTICK_SetClkSource+0x34>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <LL_SYSTICK_SetClkSource+0x34>)
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e010 	.word	0xe000e010

08002090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af06      	add	r7, sp, #24

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff ffa4 	bl	8001fe4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800209c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020a0:	f7ff ff88 	bl	8001fb4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f7ff feb5 	bl	8001e14 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020aa:	f000 f869 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ae:	f7ff fea9 	bl	8001e04 <MX_GPIO_Init>
  MX_DMA_Init();
 80020b2:	f7ff fe67 	bl	8001d84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020b6:	f001 f8fb 	bl	80032b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80020ba:	f000 fd35 	bl	8002b28 <MX_TIM2_Init>

  USART2_RegisterCallback(proccesDmaData);
 80020be:	4827      	ldr	r0, [pc, #156]	; (800215c <main+0xcc>)
 80020c0:	f001 f8e4 	bl	800328c <USART2_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t occupied_memory = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80020c4:	2106      	movs	r1, #6
 80020c6:	4826      	ldr	r0, [pc, #152]	; (8002160 <main+0xd0>)
 80020c8:	f7ff fec8 	bl	8001e5c <LL_DMA_GetDataLength>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	425b      	negs	r3, r3
 80020d2:	73fb      	strb	r3, [r7, #15]
	  float load = occupied_memory / (float) DMA_USART2_BUFFER_SIZE * 100;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020de:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002164 <main+0xd4>
 80020e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002168 <main+0xd8>
 80020ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ee:	edc7 7a02 	vstr	s15, [r7, #8]
	  char mode_string[STRING_SIZE];

	  if (mode) strcpy(mode_string, "manual");
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <main+0xdc>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <main+0x80>
 80020fa:	463b      	mov	r3, r7
 80020fc:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <main+0xe0>)
 80020fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002102:	6018      	str	r0, [r3, #0]
 8002104:	3304      	adds	r3, #4
 8002106:	8019      	strh	r1, [r3, #0]
 8002108:	3302      	adds	r3, #2
 800210a:	0c0a      	lsrs	r2, r1, #16
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e006      	b.n	800211e <main+0x8e>
	  else strcpy(mode_string, "auto");
 8002110:	463b      	mov	r3, r7
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <main+0xe4>)
 8002114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002118:	6018      	str	r0, [r3, #0]
 800211a:	3304      	adds	r3, #4
 800211c:	7019      	strb	r1, [r3, #0]

	  snprintf(tx_data, sizeof(tx_data), "Buffer capacity: %d bytes, occupied memory: %d bytes, load: %.2f %%\n\rMode: %s\n\r\n\r",
 800211e:	7bfd      	ldrb	r5, [r7, #15]
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f7fe fa11 	bl	8000548 <__aeabi_f2d>
 8002126:	4603      	mov	r3, r0
 8002128:	460c      	mov	r4, r1
 800212a:	463a      	mov	r2, r7
 800212c:	9204      	str	r2, [sp, #16]
 800212e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002132:	9500      	str	r5, [sp, #0]
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <main+0xe8>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <main+0xec>)
 800213e:	f001 fecd 	bl	8003edc <sniprintf>
			  DMA_USART2_BUFFER_SIZE, occupied_memory, load, mode_string);
	  USART2_PutBuffer(tx_data, sizeof(tx_data));
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	480d      	ldr	r0, [pc, #52]	; (800217c <main+0xec>)
 8002146:	f001 f999 	bl	800347c <USART2_PutBuffer>

	  setDutyCycle(50);
 800214a:	2032      	movs	r0, #50	; 0x32
 800214c:	f000 f97a 	bl	8002444 <setDutyCycle>

	  LL_mDelay(2000);
 8002150:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002154:	f7ff fd44 	bl	8001be0 <LL_mDelay>
  {
 8002158:	e7b4      	b.n	80020c4 <main+0x34>
 800215a:	bf00      	nop
 800215c:	080021ed 	.word	0x080021ed
 8002160:	40020000 	.word	0x40020000
 8002164:	43800000 	.word	0x43800000
 8002168:	42c80000 	.word	0x42c80000
 800216c:	200001f0 	.word	0x200001f0
 8002170:	080060a0 	.word	0x080060a0
 8002174:	080060a8 	.word	0x080060a8
 8002178:	080060b0 	.word	0x080060b0
 800217c:	20000218 	.word	0x20000218

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff ff45 	bl	8002014 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800218a:	f7ff ff57 	bl	800203c <LL_FLASH_GetLatency>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8002194:	f000 f974 	bl	8002480 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002198:	f7ff fe76 	bl	8001e88 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800219c:	bf00      	nop
 800219e:	f7ff fe83 	bl	8001ea8 <LL_RCC_HSI_IsReady>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d1fa      	bne.n	800219e <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80021a8:	2010      	movs	r0, #16
 80021aa:	f7ff fe8f 	bl	8001ecc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff fec4 	bl	8001f3c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff fed5 	bl	8001f64 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7ff fee6 	bl	8001f8c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff fe99 	bl	8001ef8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80021c6:	bf00      	nop
 80021c8:	f7ff feaa 	bl	8001f20 <LL_RCC_GetSysClkSource>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1fa      	bne.n	80021c8 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <SystemClock_Config+0x68>)
 80021d4:	f7ff fcf6 	bl	8001bc4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80021d8:	2004      	movs	r0, #4
 80021da:	f7ff ff3d 	bl	8002058 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80021de:	4802      	ldr	r0, [pc, #8]	; (80021e8 <SystemClock_Config+0x68>)
 80021e0:	f7ff fd22 	bl	8001c28 <LL_SetSystemCoreClock>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	007a1200 	.word	0x007a1200

080021ec <proccesDmaData>:

void proccesDmaData(uint8_t* sign, uint16_t len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
	static char string[STRING_SIZE], pwm_string[3];
	static uint8_t it = 0, it2 = 0, pwm_value;

	for (uint8_t i = 0; i < len; i++) {
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
 80021fc:	e100      	b.n	8002400 <proccesDmaData+0x214>
		if (*(sign+i) == '$') {
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b24      	cmp	r3, #36	; 0x24
 8002208:	d102      	bne.n	8002210 <proccesDmaData+0x24>
			start = 1;
 800220a:	4b82      	ldr	r3, [pc, #520]	; (8002414 <proccesDmaData+0x228>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
		}

		if (start) {
 8002210:	4b80      	ldr	r3, [pc, #512]	; (8002414 <proccesDmaData+0x228>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80e3 	beq.w	80023e0 <proccesDmaData+0x1f4>
			string[it++] = *(sign+i);
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	441a      	add	r2, r3
 8002220:	4b7d      	ldr	r3, [pc, #500]	; (8002418 <proccesDmaData+0x22c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	b2c8      	uxtb	r0, r1
 8002228:	497b      	ldr	r1, [pc, #492]	; (8002418 <proccesDmaData+0x22c>)
 800222a:	7008      	strb	r0, [r1, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	4b7a      	ldr	r3, [pc, #488]	; (800241c <proccesDmaData+0x230>)
 8002232:	545a      	strb	r2, [r3, r1]

			if (it >= STRING_SIZE) for(uint8_t i = 0; i < STRING_SIZE; i++) string[i] = 0;
 8002234:	4b78      	ldr	r3, [pc, #480]	; (8002418 <proccesDmaData+0x22c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b07      	cmp	r3, #7
 800223a:	d90c      	bls.n	8002256 <proccesDmaData+0x6a>
 800223c:	2300      	movs	r3, #0
 800223e:	75bb      	strb	r3, [r7, #22]
 8002240:	e006      	b.n	8002250 <proccesDmaData+0x64>
 8002242:	7dbb      	ldrb	r3, [r7, #22]
 8002244:	4a75      	ldr	r2, [pc, #468]	; (800241c <proccesDmaData+0x230>)
 8002246:	2100      	movs	r1, #0
 8002248:	54d1      	strb	r1, [r2, r3]
 800224a:	7dbb      	ldrb	r3, [r7, #22]
 800224c:	3301      	adds	r3, #1
 800224e:	75bb      	strb	r3, [r7, #22]
 8002250:	7dbb      	ldrb	r3, [r7, #22]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d9f5      	bls.n	8002242 <proccesDmaData+0x56>

			if (strstr(string, "auto$")) {
 8002256:	4972      	ldr	r1, [pc, #456]	; (8002420 <proccesDmaData+0x234>)
 8002258:	4870      	ldr	r0, [pc, #448]	; (800241c <proccesDmaData+0x230>)
 800225a:	f001 fe9f 	bl	8003f9c <strstr>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <proccesDmaData+0x9e>
				mode = 0; start = 0;
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <proccesDmaData+0x238>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <proccesDmaData+0x228>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < STRING_SIZE; i++) string[i] = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	757b      	strb	r3, [r7, #21]
 8002274:	e006      	b.n	8002284 <proccesDmaData+0x98>
 8002276:	7d7b      	ldrb	r3, [r7, #21]
 8002278:	4a68      	ldr	r2, [pc, #416]	; (800241c <proccesDmaData+0x230>)
 800227a:	2100      	movs	r1, #0
 800227c:	54d1      	strb	r1, [r2, r3]
 800227e:	7d7b      	ldrb	r3, [r7, #21]
 8002280:	3301      	adds	r3, #1
 8002282:	757b      	strb	r3, [r7, #21]
 8002284:	7d7b      	ldrb	r3, [r7, #21]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d9f5      	bls.n	8002276 <proccesDmaData+0x8a>
			}

			if (strstr(string, "manual$")) {
 800228a:	4967      	ldr	r1, [pc, #412]	; (8002428 <proccesDmaData+0x23c>)
 800228c:	4863      	ldr	r0, [pc, #396]	; (800241c <proccesDmaData+0x230>)
 800228e:	f001 fe85 	bl	8003f9c <strstr>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <proccesDmaData+0xd2>
				mode = 1; start = 0;
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <proccesDmaData+0x238>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <proccesDmaData+0x228>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < STRING_SIZE; i++) string[i] = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	753b      	strb	r3, [r7, #20]
 80022a8:	e006      	b.n	80022b8 <proccesDmaData+0xcc>
 80022aa:	7d3b      	ldrb	r3, [r7, #20]
 80022ac:	4a5b      	ldr	r2, [pc, #364]	; (800241c <proccesDmaData+0x230>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	54d1      	strb	r1, [r2, r3]
 80022b2:	7d3b      	ldrb	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	753b      	strb	r3, [r7, #20]
 80022b8:	7d3b      	ldrb	r3, [r7, #20]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d9f5      	bls.n	80022aa <proccesDmaData+0xbe>
			}

			if (mode) {
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <proccesDmaData+0x238>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8099 	beq.w	80023fa <proccesDmaData+0x20e>
				if (get_pwm_value) {
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <proccesDmaData+0x240>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d07c      	beq.n	80023ca <proccesDmaData+0x1de>
					if (it2 >= 3) {
 80022d0:	4b57      	ldr	r3, [pc, #348]	; (8002430 <proccesDmaData+0x244>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d90c      	bls.n	80022f2 <proccesDmaData+0x106>
						for(uint8_t i = 0; i < 3; i++) pwm_string[i] = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	74fb      	strb	r3, [r7, #19]
 80022dc:	e006      	b.n	80022ec <proccesDmaData+0x100>
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	4a54      	ldr	r2, [pc, #336]	; (8002434 <proccesDmaData+0x248>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	54d1      	strb	r1, [r2, r3]
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	3301      	adds	r3, #1
 80022ea:	74fb      	strb	r3, [r7, #19]
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d9f5      	bls.n	80022de <proccesDmaData+0xf2>
					}

					if (it2 == 2 && *(sign+i) != '$') {
 80022f2:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <proccesDmaData+0x244>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d125      	bne.n	8002346 <proccesDmaData+0x15a>
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b24      	cmp	r3, #36	; 0x24
 8002304:	d01f      	beq.n	8002346 <proccesDmaData+0x15a>
						start = 0; get_pwm_value = 0;
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <proccesDmaData+0x228>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	4b47      	ldr	r3, [pc, #284]	; (800242c <proccesDmaData+0x240>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
						for(uint8_t i = 0; i < STRING_SIZE; i++) string[i] = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	74bb      	strb	r3, [r7, #18]
 8002316:	e006      	b.n	8002326 <proccesDmaData+0x13a>
 8002318:	7cbb      	ldrb	r3, [r7, #18]
 800231a:	4a40      	ldr	r2, [pc, #256]	; (800241c <proccesDmaData+0x230>)
 800231c:	2100      	movs	r1, #0
 800231e:	54d1      	strb	r1, [r2, r3]
 8002320:	7cbb      	ldrb	r3, [r7, #18]
 8002322:	3301      	adds	r3, #1
 8002324:	74bb      	strb	r3, [r7, #18]
 8002326:	7cbb      	ldrb	r3, [r7, #18]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d9f5      	bls.n	8002318 <proccesDmaData+0x12c>
						for(uint8_t i = 0; i < 3; i++) pwm_string[i] = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	747b      	strb	r3, [r7, #17]
 8002330:	e006      	b.n	8002340 <proccesDmaData+0x154>
 8002332:	7c7b      	ldrb	r3, [r7, #17]
 8002334:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <proccesDmaData+0x248>)
 8002336:	2100      	movs	r1, #0
 8002338:	54d1      	strb	r1, [r2, r3]
 800233a:	7c7b      	ldrb	r3, [r7, #17]
 800233c:	3301      	adds	r3, #1
 800233e:	747b      	strb	r3, [r7, #17]
 8002340:	7c7b      	ldrb	r3, [r7, #17]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d9f5      	bls.n	8002332 <proccesDmaData+0x146>
					}

					if (it2 == 2 && *(sign+i) == '$') {
 8002346:	4b3a      	ldr	r3, [pc, #232]	; (8002430 <proccesDmaData+0x244>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d12a      	bne.n	80023a4 <proccesDmaData+0x1b8>
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b24      	cmp	r3, #36	; 0x24
 8002358:	d124      	bne.n	80023a4 <proccesDmaData+0x1b8>
						sscanf(pwm_string, "%d", &pwm_value);
 800235a:	4a37      	ldr	r2, [pc, #220]	; (8002438 <proccesDmaData+0x24c>)
 800235c:	4937      	ldr	r1, [pc, #220]	; (800243c <proccesDmaData+0x250>)
 800235e:	4835      	ldr	r0, [pc, #212]	; (8002434 <proccesDmaData+0x248>)
 8002360:	f001 fdf0 	bl	8003f44 <siscanf>
//						setDutyCycle(pwm_value);
						start = 0; get_pwm_value = 0;
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <proccesDmaData+0x228>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <proccesDmaData+0x240>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
						for(uint8_t i = 0; i < STRING_SIZE; i++) string[i] = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	743b      	strb	r3, [r7, #16]
 8002374:	e006      	b.n	8002384 <proccesDmaData+0x198>
 8002376:	7c3b      	ldrb	r3, [r7, #16]
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <proccesDmaData+0x230>)
 800237a:	2100      	movs	r1, #0
 800237c:	54d1      	strb	r1, [r2, r3]
 800237e:	7c3b      	ldrb	r3, [r7, #16]
 8002380:	3301      	adds	r3, #1
 8002382:	743b      	strb	r3, [r7, #16]
 8002384:	7c3b      	ldrb	r3, [r7, #16]
 8002386:	2b07      	cmp	r3, #7
 8002388:	d9f5      	bls.n	8002376 <proccesDmaData+0x18a>
						for(uint8_t i = 0; i < 3; i++) pwm_string[i] = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e006      	b.n	800239e <proccesDmaData+0x1b2>
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <proccesDmaData+0x248>)
 8002394:	2100      	movs	r1, #0
 8002396:	54d1      	strb	r1, [r2, r3]
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	3301      	adds	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d9f5      	bls.n	8002390 <proccesDmaData+0x1a4>
					}

					if (*(sign+i) >= 0 && *(sign+i) <= 9) pwm_string[it2++] = *(sign+i);
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d80c      	bhi.n	80023ca <proccesDmaData+0x1de>
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	441a      	add	r2, r3
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <proccesDmaData+0x244>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	b2c8      	uxtb	r0, r1
 80023be:	491c      	ldr	r1, [pc, #112]	; (8002430 <proccesDmaData+0x244>)
 80023c0:	7008      	strb	r0, [r1, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <proccesDmaData+0x248>)
 80023c8:	545a      	strb	r2, [r3, r1]
				}

				if (strstr(string, "PWM")) get_pwm_value = 1;
 80023ca:	491d      	ldr	r1, [pc, #116]	; (8002440 <proccesDmaData+0x254>)
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <proccesDmaData+0x230>)
 80023ce:	f001 fde5 	bl	8003f9c <strstr>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <proccesDmaData+0x20e>
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <proccesDmaData+0x240>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e00c      	b.n	80023fa <proccesDmaData+0x20e>

			}
		}

		else for (uint8_t i = 0; i < STRING_SIZE; i++) string[i] = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73bb      	strb	r3, [r7, #14]
 80023e4:	e006      	b.n	80023f4 <proccesDmaData+0x208>
 80023e6:	7bbb      	ldrb	r3, [r7, #14]
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <proccesDmaData+0x230>)
 80023ea:	2100      	movs	r1, #0
 80023ec:	54d1      	strb	r1, [r2, r3]
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	3301      	adds	r3, #1
 80023f2:	73bb      	strb	r3, [r7, #14]
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d9f5      	bls.n	80023e6 <proccesDmaData+0x1fa>
	for (uint8_t i = 0; i < len; i++) {
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	3301      	adds	r3, #1
 80023fe:	75fb      	strb	r3, [r7, #23]
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	b29b      	uxth	r3, r3
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	429a      	cmp	r2, r3
 8002408:	f63f aef9 	bhi.w	80021fe <proccesDmaData+0x12>
	}

}
 800240c:	bf00      	nop
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200001f1 	.word	0x200001f1
 8002418:	200001f3 	.word	0x200001f3
 800241c:	200001f4 	.word	0x200001f4
 8002420:	08006104 	.word	0x08006104
 8002424:	200001f0 	.word	0x200001f0
 8002428:	0800610c 	.word	0x0800610c
 800242c:	200001f2 	.word	0x200001f2
 8002430:	200001fc 	.word	0x200001fc
 8002434:	20000200 	.word	0x20000200
 8002438:	20000203 	.word	0x20000203
 800243c:	08006114 	.word	0x08006114
 8002440:	08006118 	.word	0x08006118

08002444 <setDutyCycle>:

void setDutyCycle(uint8_t D)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	uint8_t DutyCycle = D;
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	73fb      	strb	r3, [r7, #15]
	uint8_t pulse_length = ((TIM2->ARR) * DutyCycle) / 100;
 8002452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <setDutyCycle+0x38>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	73bb      	strb	r3, [r7, #14]
	TIM2->CCR1 = pulse_length;
 8002468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	51eb851f 	.word	0x51eb851f

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <LL_DMA_DisableChannel>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <LL_DMA_DisableChannel+0x3c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	3a01      	subs	r2, #1
 80024ae:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_DMA_DisableChannel+0x3c>)
 80024b0:	5c8a      	ldrb	r2, [r1, r2]
 80024b2:	4611      	mov	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	440a      	add	r2, r1
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	08006130 	.word	0x08006130

080024d0 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002556:	605a      	str	r2, [r3, #4]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002572:	605a      	str	r2, [r3, #4]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800258e:	605a      	str	r2, [r3, #4]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b40      	cmp	r3, #64	; 0x40
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2210      	movs	r2, #16
 80025f4:	621a      	str	r2, [r3, #32]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <HardFault_Handler+0x4>

08002616 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <MemManage_Handler+0x4>

0800261c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <BusFault_Handler+0x4>

08002622 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <UsageFault_Handler+0x4>

08002628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <DMA1_Channel6_IRQHandler+0x38>)
 8002666:	f7ff ff33 	bl	80024d0 <LL_DMA_IsActiveFlag_TC6>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002670:	f000 ff24 	bl	80034bc <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8002674:	4808      	ldr	r0, [pc, #32]	; (8002698 <DMA1_Channel6_IRQHandler+0x38>)
 8002676:	f7ff ff67 	bl	8002548 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 800267a:	e00a      	b.n	8002692 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 800267c:	4806      	ldr	r0, [pc, #24]	; (8002698 <DMA1_Channel6_IRQHandler+0x38>)
 800267e:	f7ff ff4f 	bl	8002520 <LL_DMA_IsActiveFlag_HT6>
 8002682:	4603      	mov	r3, r0
 8002684:	2b01      	cmp	r3, #1
 8002686:	d104      	bne.n	8002692 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002688:	f000 ff18 	bl	80034bc <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA1_Channel6_IRQHandler+0x38>)
 800268e:	f7ff ff77 	bl	8002580 <LL_DMA_ClearFlag_HT6>
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40020000 	.word	0x40020000

0800269c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80026a0:	480a      	ldr	r0, [pc, #40]	; (80026cc <DMA1_Channel7_IRQHandler+0x30>)
 80026a2:	f7ff ff29 	bl	80024f8 <LL_DMA_IsActiveFlag_TC7>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <DMA1_Channel7_IRQHandler+0x30>)
 80026ae:	f7ff ff59 	bl	8002564 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80026b2:	bf00      	nop
 80026b4:	4806      	ldr	r0, [pc, #24]	; (80026d0 <DMA1_Channel7_IRQHandler+0x34>)
 80026b6:	f7ff ff84 	bl	80025c2 <LL_USART_IsActiveFlag_TC>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f9      	beq.n	80026b4 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80026c0:	2107      	movs	r1, #7
 80026c2:	4802      	ldr	r0, [pc, #8]	; (80026cc <DMA1_Channel7_IRQHandler+0x30>)
 80026c4:	f7ff fee4 	bl	8002490 <LL_DMA_DisableChannel>
	}
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40004400 	.word	0x40004400

080026d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <USART2_IRQHandler+0x20>)
 80026ea:	f7ff ff57 	bl	800259c <LL_USART_IsActiveFlag_IDLE>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80026f4:	f000 fee2 	bl	80034bc <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <USART2_IRQHandler+0x20>)
 80026fa:	f7ff ff75 	bl	80025e8 <LL_USART_ClearFlag_IDLE>
	}
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40004400 	.word	0x40004400

08002708 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <_sbrk+0x50>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x16>
		heap_end = &end;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <_sbrk+0x50>)
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <_sbrk+0x54>)
 800271c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <_sbrk+0x50>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <_sbrk+0x50>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	466a      	mov	r2, sp
 800272e:	4293      	cmp	r3, r2
 8002730:	d907      	bls.n	8002742 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002732:	f000 ff45 	bl	80035c0 <__errno>
 8002736:	4602      	mov	r2, r0
 8002738:	230c      	movs	r3, #12
 800273a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e006      	b.n	8002750 <_sbrk+0x48>
	}

	heap_end += incr;
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <_sbrk+0x50>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a03      	ldr	r2, [pc, #12]	; (8002758 <_sbrk+0x50>)
 800274c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000204 	.word	0x20000204
 800275c:	200003a0 	.word	0x200003a0

08002760 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <SystemInit+0x84>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <SystemInit+0x84>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <SystemInit+0x88>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <SystemInit+0x88>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <SystemInit+0x88>)
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4918      	ldr	r1, [pc, #96]	; (80027e8 <SystemInit+0x88>)
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <SystemInit+0x8c>)
 8002788:	4013      	ands	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <SystemInit+0x88>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <SystemInit+0x88>)
 8002792:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <SystemInit+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <SystemInit+0x88>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <SystemInit+0x88>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <SystemInit+0x88>)
 80027ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80027b2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <SystemInit+0x88>)
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <SystemInit+0x88>)
 80027ba:	f023 030f 	bic.w	r3, r3, #15
 80027be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <SystemInit+0x88>)
 80027c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c4:	4908      	ldr	r1, [pc, #32]	; (80027e8 <SystemInit+0x88>)
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <SystemInit+0x90>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x88>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SystemInit+0x84>)
 80027d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d8:	609a      	str	r2, [r3, #8]
#endif
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	f87fc00c 	.word	0xf87fc00c
 80027f0:	ff00fccc 	.word	0xff00fccc

080027f4 <NVIC_GetPriorityGrouping>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EnableIRQ>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <NVIC_EnableIRQ+0x30>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <NVIC_SetPriority>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	da0b      	bge.n	8002870 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <NVIC_SetPriority+0x4c>)
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	3b04      	subs	r3, #4
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	761a      	strb	r2, [r3, #24]
}
 800286e:	e009      	b.n	8002884 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <NVIC_SetPriority+0x50>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00
 8002894:	e000e100 	.word	0xe000e100

08002898 <NVIC_EncodePriority>:
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <LL_AHB1_GRP1_EnableClock>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4313      	orrs	r3, r2
 8002912:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40021000 	.word	0x40021000

08002930 <LL_APB1_GRP1_EnableClock>:
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <LL_APB1_GRP1_EnableClock+0x2c>)
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <LL_APB1_GRP1_EnableClock+0x2c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4313      	orrs	r3, r2
 8002942:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000

08002960 <LL_TIM_DisableARRPreload>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_TIM_OC_DisableFast>:
{
 8002980:	b4b0      	push	{r4, r5, r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d028      	beq.n	80029e2 <LL_TIM_OC_DisableFast+0x62>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d023      	beq.n	80029de <LL_TIM_OC_DisableFast+0x5e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b10      	cmp	r3, #16
 800299a:	d01e      	beq.n	80029da <LL_TIM_OC_DisableFast+0x5a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d019      	beq.n	80029d6 <LL_TIM_OC_DisableFast+0x56>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a8:	d013      	beq.n	80029d2 <LL_TIM_OC_DisableFast+0x52>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d00d      	beq.n	80029ce <LL_TIM_OC_DisableFast+0x4e>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d007      	beq.n	80029ca <LL_TIM_OC_DisableFast+0x4a>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d101      	bne.n	80029c6 <LL_TIM_OC_DisableFast+0x46>
 80029c2:	2307      	movs	r3, #7
 80029c4:	e00e      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e00c      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00a      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_TIM_OC_DisableFast+0x64>
 80029e2:	2300      	movs	r3, #0
 80029e4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3318      	adds	r3, #24
 80029ea:	461a      	mov	r2, r3
 80029ec:	4629      	mov	r1, r5
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <LL_TIM_OC_DisableFast+0x94>)
 80029f0:	5c5b      	ldrb	r3, [r3, r1]
 80029f2:	4413      	add	r3, r2
 80029f4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	4629      	mov	r1, r5
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <LL_TIM_OC_DisableFast+0x98>)
 80029fc:	5c5b      	ldrb	r3, [r3, r1]
 80029fe:	4619      	mov	r1, r3
 8002a00:	2304      	movs	r3, #4
 8002a02:	408b      	lsls	r3, r1
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4013      	ands	r3, r2
 8002a08:	6023      	str	r3, [r4, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bcb0      	pop	{r4, r5, r7}
 8002a12:	4770      	bx	lr
 8002a14:	08006150 	.word	0x08006150
 8002a18:	0800615c 	.word	0x0800615c

08002a1c <LL_TIM_OC_EnablePreload>:
{
 8002a1c:	b4b0      	push	{r4, r5, r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d028      	beq.n	8002a7e <LL_TIM_OC_EnablePreload+0x62>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d023      	beq.n	8002a7a <LL_TIM_OC_EnablePreload+0x5e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d01e      	beq.n	8002a76 <LL_TIM_OC_EnablePreload+0x5a>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d019      	beq.n	8002a72 <LL_TIM_OC_EnablePreload+0x56>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a44:	d013      	beq.n	8002a6e <LL_TIM_OC_EnablePreload+0x52>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d00d      	beq.n	8002a6a <LL_TIM_OC_EnablePreload+0x4e>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d007      	beq.n	8002a66 <LL_TIM_OC_EnablePreload+0x4a>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d101      	bne.n	8002a62 <LL_TIM_OC_EnablePreload+0x46>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e00e      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a62:	2308      	movs	r3, #8
 8002a64:	e00c      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a66:	2306      	movs	r3, #6
 8002a68:	e00a      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e008      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e006      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <LL_TIM_OC_EnablePreload+0x64>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3318      	adds	r3, #24
 8002a86:	461a      	mov	r2, r3
 8002a88:	4629      	mov	r1, r5
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <LL_TIM_OC_EnablePreload+0x94>)
 8002a8c:	5c5b      	ldrb	r3, [r3, r1]
 8002a8e:	4413      	add	r3, r2
 8002a90:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	4629      	mov	r1, r5
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <LL_TIM_OC_EnablePreload+0x98>)
 8002a98:	5c5b      	ldrb	r3, [r3, r1]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	408b      	lsls	r3, r1
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	6023      	str	r3, [r4, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bcb0      	pop	{r4, r5, r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	08006150 	.word	0x08006150
 8002ab4:	0800615c 	.word	0x0800615c

08002ab8 <LL_TIM_SetClockSource>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002aca:	f023 0307 	bic.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_TIM_SetTriggerOutput>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	605a      	str	r2, [r3, #4]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_TIM_DisableMasterSlaveMode>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b094      	sub	sp, #80	; 0x50
 8002b2c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	2220      	movs	r2, #32
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fd64 	bl	8003614 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff fee7 	bl	8002930 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002b62:	f7ff fe47 	bl	80027f4 <NVIC_GetPriorityGrouping>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fe93 	bl	8002898 <NVIC_EncodePriority>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4619      	mov	r1, r3
 8002b76:	201c      	movs	r0, #28
 8002b78:	f7ff fe64 	bl	8002844 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002b7c:	201c      	movs	r0, #28
 8002b7e:	f7ff fe47 	bl	8002810 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 7999;
 8002b82:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002b86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 9;
 8002b8c:	2309      	movs	r3, #9
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b9e:	f7fe fba5 	bl	80012ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002ba2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ba6:	f7ff fedb 	bl	8002960 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002baa:	2100      	movs	r1, #0
 8002bac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bb0:	f7ff ff82 	bl	8002ab8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bba:	f7ff ff2f 	bl	8002a1c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002bbe:	2360      	movs	r3, #96	; 0x60
 8002bc0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bde:	f7fe fbf9 	bl	80013d4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002be2:	2101      	movs	r1, #1
 8002be4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002be8:	f7ff feca 	bl	8002980 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002bec:	2100      	movs	r1, #0
 8002bee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bf2:	f7ff ff76 	bl	8002ae2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002bf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bfa:	f7ff ff85 	bl	8002b08 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002bfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c02:	f7ff fe7d 	bl	8002900 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002c06:	2320      	movs	r3, #32
 8002c08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c26:	f7fe f8ba 	bl	8000d9e <LL_GPIO_Init>

}
 8002c2a:	bf00      	nop
 8002c2c:	3750      	adds	r7, #80	; 0x50
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <NVIC_EnableIRQ>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <NVIC_EnableIRQ+0x30>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <NVIC_SetPriority>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da0b      	bge.n	8002c94 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <NVIC_SetPriority+0x4c>)
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	3b04      	subs	r3, #4
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	761a      	strb	r2, [r3, #24]
}
 8002c92:	e009      	b.n	8002ca8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <NVIC_SetPriority+0x50>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <LL_DMA_EnableChannel>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <LL_DMA_EnableChannel+0x3c>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <LL_DMA_EnableChannel+0x3c>)
 8002cdc:	5c8a      	ldrb	r2, [r1, r2]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	440a      	add	r2, r1
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	08006168 	.word	0x08006168

08002cfc <LL_DMA_SetDataTransferDirection>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <LL_DMA_SetDataTransferDirection+0x48>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1c:	f023 0310 	bic.w	r3, r3, #16
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	3a01      	subs	r2, #1
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <LL_DMA_SetDataTransferDirection+0x48>)
 8002d26:	5c8a      	ldrb	r2, [r1, r2]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	08006168 	.word	0x08006168

08002d48 <LL_DMA_GetDataTransferDirection>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f244 0310 	movw	r3, #16400	; 0x4010
 8002d66:	4013      	ands	r3, r2
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	08006168 	.word	0x08006168

08002d78 <LL_DMA_SetMode>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <LL_DMA_SetMode+0x44>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 0220 	bic.w	r2, r3, #32
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <LL_DMA_SetMode+0x44>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	4619      	mov	r1, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	440b      	add	r3, r1
 8002da6:	4619      	mov	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	08006168 	.word	0x08006168

08002dc0 <LL_DMA_SetPeriphIncMode>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <LL_DMA_SetPeriphIncMode+0x44>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	4907      	ldr	r1, [pc, #28]	; (8002e04 <LL_DMA_SetPeriphIncMode+0x44>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	4619      	mov	r1, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	440b      	add	r3, r1
 8002dee:	4619      	mov	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	08006168 	.word	0x08006168

08002e08 <LL_DMA_SetMemoryIncMode>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <LL_DMA_SetMemoryIncMode+0x44>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	4907      	ldr	r1, [pc, #28]	; (8002e4c <LL_DMA_SetMemoryIncMode+0x44>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	4619      	mov	r1, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	440b      	add	r3, r1
 8002e36:	4619      	mov	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	08006168 	.word	0x08006168

08002e50 <LL_DMA_SetPeriphSize>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <LL_DMA_SetPeriphSize+0x44>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4907      	ldr	r1, [pc, #28]	; (8002e94 <LL_DMA_SetPeriphSize+0x44>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	440b      	add	r3, r1
 8002e7e:	4619      	mov	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	08006168 	.word	0x08006168

08002e98 <LL_DMA_SetMemorySize>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <LL_DMA_SetMemorySize+0x44>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	461a      	mov	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	4907      	ldr	r1, [pc, #28]	; (8002edc <LL_DMA_SetMemorySize+0x44>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	440b      	add	r3, r1
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	08006168 	.word	0x08006168

08002ee0 <LL_DMA_SetChannelPriorityLevel>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	440b      	add	r3, r1
 8002f0e:	4619      	mov	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	08006168 	.word	0x08006168

08002f28 <LL_DMA_SetDataLength>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <LL_DMA_SetDataLength+0x44>)
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <LL_DMA_SetDataLength+0x44>)
 8002f4e:	5c8a      	ldrb	r2, [r1, r2]
 8002f50:	4611      	mov	r1, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	440a      	add	r2, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	08006168 	.word	0x08006168

08002f70 <LL_DMA_GetDataLength>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <LL_DMA_GetDataLength+0x28>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	08006168 	.word	0x08006168

08002f9c <LL_DMA_ConfigAddresses>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d114      	bne.n	8002fda <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <LL_DMA_ConfigAddresses+0x74>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <LL_DMA_ConfigAddresses+0x74>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6093      	str	r3, [r2, #8]
}
 8002fd8:	e013      	b.n	8003002 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <LL_DMA_ConfigAddresses+0x74>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <LL_DMA_ConfigAddresses+0x74>)
 8002ff4:	5cd3      	ldrb	r3, [r2, r3]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	60d3      	str	r3, [r2, #12]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	08006168 	.word	0x08006168

08003014 <LL_DMA_SetMemoryAddress>:
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3b01      	subs	r3, #1
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <LL_DMA_SetMemoryAddress+0x2c>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	08006168 	.word	0x08006168

08003044 <LL_DMA_SetPeriphAddress>:
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3b01      	subs	r3, #1
 8003054:	4a06      	ldr	r2, [pc, #24]	; (8003070 <LL_DMA_SetPeriphAddress+0x2c>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6093      	str	r3, [r2, #8]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	08006168 	.word	0x08006168

08003074 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	3b01      	subs	r3, #1
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <LL_DMA_EnableIT_TC+0x3c>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	3a01      	subs	r2, #1
 8003092:	4907      	ldr	r1, [pc, #28]	; (80030b0 <LL_DMA_EnableIT_TC+0x3c>)
 8003094:	5c8a      	ldrb	r2, [r1, r2]
 8003096:	4611      	mov	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	440a      	add	r2, r1
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	08006168 	.word	0x08006168

080030b4 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <LL_DMA_EnableIT_HT+0x3c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	3a01      	subs	r2, #1
 80030d2:	4907      	ldr	r1, [pc, #28]	; (80030f0 <LL_DMA_EnableIT_HT+0x3c>)
 80030d4:	5c8a      	ldrb	r2, [r1, r2]
 80030d6:	4611      	mov	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	440a      	add	r2, r1
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6013      	str	r3, [r2, #0]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	08006168 	.word	0x08006168

080030f4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	3b01      	subs	r3, #1
 8003102:	4a0b      	ldr	r2, [pc, #44]	; (8003130 <LL_DMA_EnableIT_TE+0x3c>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	3a01      	subs	r2, #1
 8003112:	4907      	ldr	r1, [pc, #28]	; (8003130 <LL_DMA_EnableIT_TE+0x3c>)
 8003114:	5c8a      	ldrb	r2, [r1, r2]
 8003116:	4611      	mov	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	440a      	add	r2, r1
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	6013      	str	r3, [r2, #0]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	08006168 	.word	0x08006168

08003134 <LL_AHB1_GRP1_EnableClock>:
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4313      	orrs	r3, r2
 8003146:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40021000 	.word	0x40021000

08003164 <LL_APB1_GRP1_EnableClock>:
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4013      	ands	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40021000 	.word	0x40021000

08003194 <LL_USART_Enable>:
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	601a      	str	r2, [r3, #0]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_USART_ConfigAsyncMode>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f043 0210 	orr.w	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 800326a:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3328      	adds	r3, #40	; 0x28
 8003276:	461c      	mov	r4, r3
 8003278:	e002      	b.n	8003280 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3324      	adds	r3, #36	; 0x24
 800327e:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8003280:	4623      	mov	r3, r4
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bc90      	pop	{r4, r7}
 800328a:	4770      	bx	lr

0800328c <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t* sign, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a03      	ldr	r2, [pc, #12]	; (80032ac <USART2_RegisterCallback+0x20>)
 800329e:	6013      	str	r3, [r2, #0]
	}
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	20000208 	.word	0x20000208

080032b0 <MX_USART2_UART_Init>:

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b090      	sub	sp, #64	; 0x40
 80032b4:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	611a      	str	r2, [r3, #16]
 80032c6:	615a      	str	r2, [r3, #20]
 80032c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
 80032d8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80032da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032de:	f7ff ff41 	bl	8003164 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80032e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032e6:	f7ff ff25 	bl	8003134 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80032ea:	f248 0304 	movw	r3, #32772	; 0x8004
 80032ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032f0:	2302      	movs	r3, #2
 80032f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003300:	2307      	movs	r3, #7
 8003302:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	4619      	mov	r1, r3
 8003308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330c:	f7fd fd47 	bl	8000d9e <LL_GPIO_Init>
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003310:	2200      	movs	r2, #0
 8003312:	2106      	movs	r1, #6
 8003314:	4856      	ldr	r0, [pc, #344]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003316:	f7ff fcf1 	bl	8002cfc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800331a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800331e:	2106      	movs	r1, #6
 8003320:	4853      	ldr	r0, [pc, #332]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003322:	f7ff fddd 	bl	8002ee0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8003326:	2220      	movs	r2, #32
 8003328:	2106      	movs	r1, #6
 800332a:	4851      	ldr	r0, [pc, #324]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 800332c:	f7ff fd24 	bl	8002d78 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8003330:	2200      	movs	r2, #0
 8003332:	2106      	movs	r1, #6
 8003334:	484e      	ldr	r0, [pc, #312]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003336:	f7ff fd43 	bl	8002dc0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	2106      	movs	r1, #6
 800333e:	484c      	ldr	r0, [pc, #304]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003340:	f7ff fd62 	bl	8002e08 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8003344:	2200      	movs	r2, #0
 8003346:	2106      	movs	r1, #6
 8003348:	4849      	ldr	r0, [pc, #292]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 800334a:	f7ff fd81 	bl	8002e50 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800334e:	2200      	movs	r2, #0
 8003350:	2106      	movs	r1, #6
 8003352:	4847      	ldr	r0, [pc, #284]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003354:	f7ff fda0 	bl	8002e98 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8003358:	2101      	movs	r1, #1
 800335a:	4846      	ldr	r0, [pc, #280]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 800335c:	f7ff ff80 	bl	8003260 <LL_USART_DMA_GetRegAddr>
 8003360:	4605      	mov	r5, r0
 8003362:	4c45      	ldr	r4, [pc, #276]	; (8003478 <MX_USART2_UART_Init+0x1c8>)
 8003364:	2106      	movs	r1, #6
 8003366:	4842      	ldr	r0, [pc, #264]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003368:	f7ff fcee 	bl	8002d48 <LL_DMA_GetDataTransferDirection>
 800336c:	4603      	mov	r3, r0
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4623      	mov	r3, r4
 8003372:	462a      	mov	r2, r5
 8003374:	2106      	movs	r1, #6
 8003376:	483e      	ldr	r0, [pc, #248]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003378:	f7ff fe10 	bl	8002f9c <LL_DMA_ConfigAddresses>
  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  							(uint32_t)bufferUSART2dma,
  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800337c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003380:	2106      	movs	r1, #6
 8003382:	483b      	ldr	r0, [pc, #236]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 8003384:	f7ff fdd0 	bl	8002f28 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8003388:	2106      	movs	r1, #6
 800338a:	4839      	ldr	r0, [pc, #228]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 800338c:	f7ff fc96 	bl	8002cbc <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8003390:	4838      	ldr	r0, [pc, #224]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 8003392:	f7ff ff45 	bl	8003220 <LL_USART_EnableDMAReq_RX>

  #if !POLLING
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8003396:	2106      	movs	r1, #6
 8003398:	4835      	ldr	r0, [pc, #212]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 800339a:	f7ff fe6b 	bl	8003074 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 800339e:	2106      	movs	r1, #6
 80033a0:	4833      	ldr	r0, [pc, #204]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033a2:	f7ff fe87 	bl	80030b4 <LL_DMA_EnableIT_HT>
  #endif


  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80033a6:	2210      	movs	r2, #16
 80033a8:	2107      	movs	r1, #7
 80033aa:	4831      	ldr	r0, [pc, #196]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033ac:	f7ff fca6 	bl	8002cfc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80033b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033b4:	2107      	movs	r1, #7
 80033b6:	482e      	ldr	r0, [pc, #184]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033b8:	f7ff fd92 	bl	8002ee0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80033bc:	2200      	movs	r2, #0
 80033be:	2107      	movs	r1, #7
 80033c0:	482b      	ldr	r0, [pc, #172]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033c2:	f7ff fcd9 	bl	8002d78 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2107      	movs	r1, #7
 80033ca:	4829      	ldr	r0, [pc, #164]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033cc:	f7ff fcf8 	bl	8002dc0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	2107      	movs	r1, #7
 80033d4:	4826      	ldr	r0, [pc, #152]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033d6:	f7ff fd17 	bl	8002e08 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80033da:	2200      	movs	r2, #0
 80033dc:	2107      	movs	r1, #7
 80033de:	4824      	ldr	r0, [pc, #144]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033e0:	f7ff fd36 	bl	8002e50 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2107      	movs	r1, #7
 80033e8:	4821      	ldr	r0, [pc, #132]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033ea:	f7ff fd55 	bl	8002e98 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80033ee:	2100      	movs	r1, #0
 80033f0:	4820      	ldr	r0, [pc, #128]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 80033f2:	f7ff ff35 	bl	8003260 <LL_USART_DMA_GetRegAddr>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	2107      	movs	r1, #7
 80033fc:	481c      	ldr	r0, [pc, #112]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 80033fe:	f7ff fe21 	bl	8003044 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8003402:	481c      	ldr	r0, [pc, #112]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 8003404:	f7ff ff1c 	bl	8003240 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8003408:	2107      	movs	r1, #7
 800340a:	4819      	ldr	r0, [pc, #100]	; (8003470 <MX_USART2_UART_Init+0x1c0>)
 800340c:	f7ff fe72 	bl	80030f4 <LL_DMA_EnableIT_TE>


  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8003410:	2100      	movs	r1, #0
 8003412:	2026      	movs	r0, #38	; 0x26
 8003414:	f7ff fc28 	bl	8002c68 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003418:	2026      	movs	r0, #38	; 0x26
 800341a:	f7ff fc0b 	bl	8002c34 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800341e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003422:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003430:	230c      	movs	r3, #12
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003434:	2300      	movs	r3, #0
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003438:	2300      	movs	r3, #0
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	4619      	mov	r1, r3
 8003442:	480c      	ldr	r0, [pc, #48]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 8003444:	f7fe fb38 	bl	8001ab8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003448:	480a      	ldr	r0, [pc, #40]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 800344a:	f7ff feb3 	bl	80031b4 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 800344e:	4809      	ldr	r0, [pc, #36]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 8003450:	f7ff fed6 	bl	8003200 <LL_USART_DisableIT_CTS>

#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
 8003454:	4807      	ldr	r0, [pc, #28]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 8003456:	f7ff fec3 	bl	80031e0 <LL_USART_EnableIT_IDLE>
#endif
  LL_USART_ConfigAsyncMode(USART2);
 800345a:	4806      	ldr	r0, [pc, #24]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 800345c:	f7ff feaa 	bl	80031b4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003460:	4804      	ldr	r0, [pc, #16]	; (8003474 <MX_USART2_UART_Init+0x1c4>)
 8003462:	f7ff fe97 	bl	8003194 <LL_USART_Enable>

}
 8003466:	bf00      	nop
 8003468:	3738      	adds	r7, #56	; 0x38
 800346a:	46bd      	mov	sp, r7
 800346c:	bdb0      	pop	{r4, r5, r7, pc}
 800346e:	bf00      	nop
 8003470:	40020000 	.word	0x40020000
 8003474:	40004400 	.word	0x40004400
 8003478:	20000298 	.word	0x20000298

0800347c <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	2107      	movs	r1, #7
 800348e:	480a      	ldr	r0, [pc, #40]	; (80034b8 <USART2_PutBuffer+0x3c>)
 8003490:	f7ff fdc0 	bl	8003014 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	461a      	mov	r2, r3
 8003498:	2107      	movs	r1, #7
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <USART2_PutBuffer+0x3c>)
 800349c:	f7ff fd44 	bl	8002f28 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80034a0:	2107      	movs	r1, #7
 80034a2:	4805      	ldr	r0, [pc, #20]	; (80034b8 <USART2_PutBuffer+0x3c>)
 80034a4:	f7ff fde6 	bl	8003074 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80034a8:	2107      	movs	r1, #7
 80034aa:	4803      	ldr	r0, [pc, #12]	; (80034b8 <USART2_PutBuffer+0x3c>)
 80034ac:	f7ff fc06 	bl	8002cbc <LL_DMA_EnableChannel>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40020000 	.word	0x40020000

080034bc <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <USART2_CheckDmaReception+0xa0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d044      	beq.n	8003554 <USART2_CheckDmaReception+0x98>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80034ca:	2106      	movs	r1, #6
 80034cc:	4824      	ldr	r0, [pc, #144]	; (8003560 <USART2_CheckDmaReception+0xa4>)
 80034ce:	f7ff fd4f 	bl	8002f70 <LL_DMA_GetDataLength>
 80034d2:	4603      	mov	r3, r0
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80034da:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 80034dc:	4b21      	ldr	r3, [pc, #132]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d02a      	beq.n	800353c <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 80034e6:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d90e      	bls.n	800350e <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <USART2_CheckDmaReception+0xa0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 80034f6:	8812      	ldrh	r2, [r2, #0]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <USART2_CheckDmaReception+0xac>)
 80034fc:	1888      	adds	r0, r1, r2
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 8003500:	8812      	ldrh	r2, [r2, #0]
 8003502:	88f9      	ldrh	r1, [r7, #6]
 8003504:	1a8a      	subs	r2, r1, r2
 8003506:	b292      	uxth	r2, r2
 8003508:	4611      	mov	r1, r2
 800350a:	4798      	blx	r3
 800350c:	e016      	b.n	800353c <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <USART2_CheckDmaReception+0xa0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 8003514:	8812      	ldrh	r2, [r2, #0]
 8003516:	4611      	mov	r1, r2
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <USART2_CheckDmaReception+0xac>)
 800351a:	1888      	adds	r0, r1, r2
 800351c:	4a11      	ldr	r2, [pc, #68]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 800351e:	8812      	ldrh	r2, [r2, #0]
 8003520:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003524:	b292      	uxth	r2, r2
 8003526:	4611      	mov	r1, r2
 8003528:	4798      	blx	r3

			if (pos > 0)
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <USART2_CheckDmaReception+0xa0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	4611      	mov	r1, r2
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <USART2_CheckDmaReception+0xac>)
 800353a:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 800353c:	4a09      	ldr	r2, [pc, #36]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d104      	bne.n	8003556 <USART2_CheckDmaReception+0x9a>
	{
		old_pos = 0;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <USART2_CheckDmaReception+0xa8>)
 800354e:	2200      	movs	r2, #0
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	e000      	b.n	8003556 <USART2_CheckDmaReception+0x9a>
	if(USART2_ProcessData == 0) return;
 8003554:	bf00      	nop
	}
}
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000208 	.word	0x20000208
 8003560:	40020000 	.word	0x40020000
 8003564:	2000020c 	.word	0x2000020c
 8003568:	20000298 	.word	0x20000298

0800356c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800356c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003570:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003572:	e003      	b.n	800357c <LoopCopyDataInit>

08003574 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003576:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003578:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800357a:	3104      	adds	r1, #4

0800357c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003580:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003582:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003584:	d3f6      	bcc.n	8003574 <CopyDataInit>
	ldr	r2, =_sbss
 8003586:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003588:	e002      	b.n	8003590 <LoopFillZerobss>

0800358a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800358a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800358c:	f842 3b04 	str.w	r3, [r2], #4

08003590 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <LoopForever+0x16>)
	cmp	r2, r3
 8003592:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003594:	d3f9      	bcc.n	800358a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003596:	f7ff f8e3 	bl	8002760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800359a:	f000 f817 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800359e:	f7fe fd77 	bl	8002090 <main>

080035a2 <LoopForever>:

LoopForever:
    b LoopForever
 80035a2:	e7fe      	b.n	80035a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035a4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80035a8:	0800644c 	.word	0x0800644c
	ldr	r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035b0:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80035b4:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80035b8:	2000039c 	.word	0x2000039c

080035bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC1_2_IRQHandler>
	...

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000004 	.word	0x20000004

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4e0d      	ldr	r6, [pc, #52]	; (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d2:	1ba4      	subs	r4, r4, r6
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2500      	movs	r5, #0
 80035d8:	42a5      	cmp	r5, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4e0b      	ldr	r6, [pc, #44]	; (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <__libc_init_array+0x44>)
 80035e0:	f002 fd50 	bl	8006084 <_init>
 80035e4:	1ba4      	subs	r4, r4, r6
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2500      	movs	r5, #0
 80035ea:	42a5      	cmp	r5, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035f4:	4798      	blx	r3
 80035f6:	3501      	adds	r5, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035fe:	4798      	blx	r3
 8003600:	3501      	adds	r5, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08006444 	.word	0x08006444
 8003608:	08006444 	.word	0x08006444
 800360c:	08006444 	.word	0x08006444
 8003610:	08006448 	.word	0x08006448

08003614 <memset>:
 8003614:	4402      	add	r2, r0
 8003616:	4603      	mov	r3, r0
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	f803 1b01 	strb.w	r1, [r3], #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <__cvt>:
 8003624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	ec55 4b10 	vmov	r4, r5, d0
 800362c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800362e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003632:	2d00      	cmp	r5, #0
 8003634:	460e      	mov	r6, r1
 8003636:	4691      	mov	r9, r2
 8003638:	4619      	mov	r1, r3
 800363a:	bfb8      	it	lt
 800363c:	4622      	movlt	r2, r4
 800363e:	462b      	mov	r3, r5
 8003640:	f027 0720 	bic.w	r7, r7, #32
 8003644:	bfbb      	ittet	lt
 8003646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800364a:	461d      	movlt	r5, r3
 800364c:	2300      	movge	r3, #0
 800364e:	232d      	movlt	r3, #45	; 0x2d
 8003650:	bfb8      	it	lt
 8003652:	4614      	movlt	r4, r2
 8003654:	2f46      	cmp	r7, #70	; 0x46
 8003656:	700b      	strb	r3, [r1, #0]
 8003658:	d004      	beq.n	8003664 <__cvt+0x40>
 800365a:	2f45      	cmp	r7, #69	; 0x45
 800365c:	d100      	bne.n	8003660 <__cvt+0x3c>
 800365e:	3601      	adds	r6, #1
 8003660:	2102      	movs	r1, #2
 8003662:	e000      	b.n	8003666 <__cvt+0x42>
 8003664:	2103      	movs	r1, #3
 8003666:	ab03      	add	r3, sp, #12
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	ab02      	add	r3, sp, #8
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4632      	mov	r2, r6
 8003670:	4653      	mov	r3, sl
 8003672:	ec45 4b10 	vmov	d0, r4, r5
 8003676:	f000 fd37 	bl	80040e8 <_dtoa_r>
 800367a:	2f47      	cmp	r7, #71	; 0x47
 800367c:	4680      	mov	r8, r0
 800367e:	d102      	bne.n	8003686 <__cvt+0x62>
 8003680:	f019 0f01 	tst.w	r9, #1
 8003684:	d026      	beq.n	80036d4 <__cvt+0xb0>
 8003686:	2f46      	cmp	r7, #70	; 0x46
 8003688:	eb08 0906 	add.w	r9, r8, r6
 800368c:	d111      	bne.n	80036b2 <__cvt+0x8e>
 800368e:	f898 3000 	ldrb.w	r3, [r8]
 8003692:	2b30      	cmp	r3, #48	; 0x30
 8003694:	d10a      	bne.n	80036ac <__cvt+0x88>
 8003696:	2200      	movs	r2, #0
 8003698:	2300      	movs	r3, #0
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f7fd fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80036a2:	b918      	cbnz	r0, 80036ac <__cvt+0x88>
 80036a4:	f1c6 0601 	rsb	r6, r6, #1
 80036a8:	f8ca 6000 	str.w	r6, [sl]
 80036ac:	f8da 3000 	ldr.w	r3, [sl]
 80036b0:	4499      	add	r9, r3
 80036b2:	2200      	movs	r2, #0
 80036b4:	2300      	movs	r3, #0
 80036b6:	4620      	mov	r0, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	f7fd fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80036be:	b938      	cbnz	r0, 80036d0 <__cvt+0xac>
 80036c0:	2230      	movs	r2, #48	; 0x30
 80036c2:	9b03      	ldr	r3, [sp, #12]
 80036c4:	454b      	cmp	r3, r9
 80036c6:	d205      	bcs.n	80036d4 <__cvt+0xb0>
 80036c8:	1c59      	adds	r1, r3, #1
 80036ca:	9103      	str	r1, [sp, #12]
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e7f8      	b.n	80036c2 <__cvt+0x9e>
 80036d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036d8:	eba3 0308 	sub.w	r3, r3, r8
 80036dc:	4640      	mov	r0, r8
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	b004      	add	sp, #16
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036e6 <__exponent>:
 80036e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036e8:	2900      	cmp	r1, #0
 80036ea:	4604      	mov	r4, r0
 80036ec:	bfba      	itte	lt
 80036ee:	4249      	neglt	r1, r1
 80036f0:	232d      	movlt	r3, #45	; 0x2d
 80036f2:	232b      	movge	r3, #43	; 0x2b
 80036f4:	2909      	cmp	r1, #9
 80036f6:	f804 2b02 	strb.w	r2, [r4], #2
 80036fa:	7043      	strb	r3, [r0, #1]
 80036fc:	dd20      	ble.n	8003740 <__exponent+0x5a>
 80036fe:	f10d 0307 	add.w	r3, sp, #7
 8003702:	461f      	mov	r7, r3
 8003704:	260a      	movs	r6, #10
 8003706:	fb91 f5f6 	sdiv	r5, r1, r6
 800370a:	fb06 1115 	mls	r1, r6, r5, r1
 800370e:	3130      	adds	r1, #48	; 0x30
 8003710:	2d09      	cmp	r5, #9
 8003712:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003716:	f103 32ff 	add.w	r2, r3, #4294967295
 800371a:	4629      	mov	r1, r5
 800371c:	dc09      	bgt.n	8003732 <__exponent+0x4c>
 800371e:	3130      	adds	r1, #48	; 0x30
 8003720:	3b02      	subs	r3, #2
 8003722:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003726:	42bb      	cmp	r3, r7
 8003728:	4622      	mov	r2, r4
 800372a:	d304      	bcc.n	8003736 <__exponent+0x50>
 800372c:	1a10      	subs	r0, r2, r0
 800372e:	b003      	add	sp, #12
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003732:	4613      	mov	r3, r2
 8003734:	e7e7      	b.n	8003706 <__exponent+0x20>
 8003736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373a:	f804 2b01 	strb.w	r2, [r4], #1
 800373e:	e7f2      	b.n	8003726 <__exponent+0x40>
 8003740:	2330      	movs	r3, #48	; 0x30
 8003742:	4419      	add	r1, r3
 8003744:	7083      	strb	r3, [r0, #2]
 8003746:	1d02      	adds	r2, r0, #4
 8003748:	70c1      	strb	r1, [r0, #3]
 800374a:	e7ef      	b.n	800372c <__exponent+0x46>

0800374c <_printf_float>:
 800374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003750:	b08d      	sub	sp, #52	; 0x34
 8003752:	460c      	mov	r4, r1
 8003754:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003758:	4616      	mov	r6, r2
 800375a:	461f      	mov	r7, r3
 800375c:	4605      	mov	r5, r0
 800375e:	f001 fa7b 	bl	8004c58 <_localeconv_r>
 8003762:	6803      	ldr	r3, [r0, #0]
 8003764:	9304      	str	r3, [sp, #16]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fd32 	bl	80001d0 <strlen>
 800376c:	2300      	movs	r3, #0
 800376e:	930a      	str	r3, [sp, #40]	; 0x28
 8003770:	f8d8 3000 	ldr.w	r3, [r8]
 8003774:	9005      	str	r0, [sp, #20]
 8003776:	3307      	adds	r3, #7
 8003778:	f023 0307 	bic.w	r3, r3, #7
 800377c:	f103 0208 	add.w	r2, r3, #8
 8003780:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003784:	f8d4 b000 	ldr.w	fp, [r4]
 8003788:	f8c8 2000 	str.w	r2, [r8]
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003794:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800379c:	9307      	str	r3, [sp, #28]
 800379e:	f8cd 8018 	str.w	r8, [sp, #24]
 80037a2:	f04f 32ff 	mov.w	r2, #4294967295
 80037a6:	4ba7      	ldr	r3, [pc, #668]	; (8003a44 <_printf_float+0x2f8>)
 80037a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037ac:	f7fd f9be 	bl	8000b2c <__aeabi_dcmpun>
 80037b0:	bb70      	cbnz	r0, 8003810 <_printf_float+0xc4>
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295
 80037b6:	4ba3      	ldr	r3, [pc, #652]	; (8003a44 <_printf_float+0x2f8>)
 80037b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037bc:	f7fd f998 	bl	8000af0 <__aeabi_dcmple>
 80037c0:	bb30      	cbnz	r0, 8003810 <_printf_float+0xc4>
 80037c2:	2200      	movs	r2, #0
 80037c4:	2300      	movs	r3, #0
 80037c6:	4640      	mov	r0, r8
 80037c8:	4649      	mov	r1, r9
 80037ca:	f7fd f987 	bl	8000adc <__aeabi_dcmplt>
 80037ce:	b110      	cbz	r0, 80037d6 <_printf_float+0x8a>
 80037d0:	232d      	movs	r3, #45	; 0x2d
 80037d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d6:	4a9c      	ldr	r2, [pc, #624]	; (8003a48 <_printf_float+0x2fc>)
 80037d8:	4b9c      	ldr	r3, [pc, #624]	; (8003a4c <_printf_float+0x300>)
 80037da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80037de:	bf8c      	ite	hi
 80037e0:	4690      	movhi	r8, r2
 80037e2:	4698      	movls	r8, r3
 80037e4:	2303      	movs	r3, #3
 80037e6:	f02b 0204 	bic.w	r2, fp, #4
 80037ea:	6123      	str	r3, [r4, #16]
 80037ec:	6022      	str	r2, [r4, #0]
 80037ee:	f04f 0900 	mov.w	r9, #0
 80037f2:	9700      	str	r7, [sp, #0]
 80037f4:	4633      	mov	r3, r6
 80037f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80037f8:	4621      	mov	r1, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 f9e6 	bl	8003bcc <_printf_common>
 8003800:	3001      	adds	r0, #1
 8003802:	f040 808d 	bne.w	8003920 <_printf_float+0x1d4>
 8003806:	f04f 30ff 	mov.w	r0, #4294967295
 800380a:	b00d      	add	sp, #52	; 0x34
 800380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	4640      	mov	r0, r8
 8003816:	4649      	mov	r1, r9
 8003818:	f7fd f988 	bl	8000b2c <__aeabi_dcmpun>
 800381c:	b110      	cbz	r0, 8003824 <_printf_float+0xd8>
 800381e:	4a8c      	ldr	r2, [pc, #560]	; (8003a50 <_printf_float+0x304>)
 8003820:	4b8c      	ldr	r3, [pc, #560]	; (8003a54 <_printf_float+0x308>)
 8003822:	e7da      	b.n	80037da <_printf_float+0x8e>
 8003824:	6861      	ldr	r1, [r4, #4]
 8003826:	1c4b      	adds	r3, r1, #1
 8003828:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800382c:	a80a      	add	r0, sp, #40	; 0x28
 800382e:	d13e      	bne.n	80038ae <_printf_float+0x162>
 8003830:	2306      	movs	r3, #6
 8003832:	6063      	str	r3, [r4, #4]
 8003834:	2300      	movs	r3, #0
 8003836:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800383a:	ab09      	add	r3, sp, #36	; 0x24
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	ec49 8b10 	vmov	d0, r8, r9
 8003842:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003846:	6022      	str	r2, [r4, #0]
 8003848:	f8cd a004 	str.w	sl, [sp, #4]
 800384c:	6861      	ldr	r1, [r4, #4]
 800384e:	4628      	mov	r0, r5
 8003850:	f7ff fee8 	bl	8003624 <__cvt>
 8003854:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003858:	2b47      	cmp	r3, #71	; 0x47
 800385a:	4680      	mov	r8, r0
 800385c:	d109      	bne.n	8003872 <_printf_float+0x126>
 800385e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003860:	1cd8      	adds	r0, r3, #3
 8003862:	db02      	blt.n	800386a <_printf_float+0x11e>
 8003864:	6862      	ldr	r2, [r4, #4]
 8003866:	4293      	cmp	r3, r2
 8003868:	dd47      	ble.n	80038fa <_printf_float+0x1ae>
 800386a:	f1aa 0a02 	sub.w	sl, sl, #2
 800386e:	fa5f fa8a 	uxtb.w	sl, sl
 8003872:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003878:	d824      	bhi.n	80038c4 <_printf_float+0x178>
 800387a:	3901      	subs	r1, #1
 800387c:	4652      	mov	r2, sl
 800387e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003882:	9109      	str	r1, [sp, #36]	; 0x24
 8003884:	f7ff ff2f 	bl	80036e6 <__exponent>
 8003888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800388a:	1813      	adds	r3, r2, r0
 800388c:	2a01      	cmp	r2, #1
 800388e:	4681      	mov	r9, r0
 8003890:	6123      	str	r3, [r4, #16]
 8003892:	dc02      	bgt.n	800389a <_printf_float+0x14e>
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	07d1      	lsls	r1, r2, #31
 8003898:	d501      	bpl.n	800389e <_printf_float+0x152>
 800389a:	3301      	adds	r3, #1
 800389c:	6123      	str	r3, [r4, #16]
 800389e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0a5      	beq.n	80037f2 <_printf_float+0xa6>
 80038a6:	232d      	movs	r3, #45	; 0x2d
 80038a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ac:	e7a1      	b.n	80037f2 <_printf_float+0xa6>
 80038ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80038b2:	f000 8177 	beq.w	8003ba4 <_printf_float+0x458>
 80038b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80038ba:	d1bb      	bne.n	8003834 <_printf_float+0xe8>
 80038bc:	2900      	cmp	r1, #0
 80038be:	d1b9      	bne.n	8003834 <_printf_float+0xe8>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e7b6      	b.n	8003832 <_printf_float+0xe6>
 80038c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80038c8:	d119      	bne.n	80038fe <_printf_float+0x1b2>
 80038ca:	2900      	cmp	r1, #0
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	dd0c      	ble.n	80038ea <_printf_float+0x19e>
 80038d0:	6121      	str	r1, [r4, #16]
 80038d2:	b913      	cbnz	r3, 80038da <_printf_float+0x18e>
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	07d2      	lsls	r2, r2, #31
 80038d8:	d502      	bpl.n	80038e0 <_printf_float+0x194>
 80038da:	3301      	adds	r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	6123      	str	r3, [r4, #16]
 80038e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80038e4:	f04f 0900 	mov.w	r9, #0
 80038e8:	e7d9      	b.n	800389e <_printf_float+0x152>
 80038ea:	b913      	cbnz	r3, 80038f2 <_printf_float+0x1a6>
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	07d0      	lsls	r0, r2, #31
 80038f0:	d501      	bpl.n	80038f6 <_printf_float+0x1aa>
 80038f2:	3302      	adds	r3, #2
 80038f4:	e7f3      	b.n	80038de <_printf_float+0x192>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e7f1      	b.n	80038de <_printf_float+0x192>
 80038fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80038fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003902:	4293      	cmp	r3, r2
 8003904:	db05      	blt.n	8003912 <_printf_float+0x1c6>
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	6123      	str	r3, [r4, #16]
 800390a:	07d1      	lsls	r1, r2, #31
 800390c:	d5e8      	bpl.n	80038e0 <_printf_float+0x194>
 800390e:	3301      	adds	r3, #1
 8003910:	e7e5      	b.n	80038de <_printf_float+0x192>
 8003912:	2b00      	cmp	r3, #0
 8003914:	bfd4      	ite	le
 8003916:	f1c3 0302 	rsble	r3, r3, #2
 800391a:	2301      	movgt	r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	e7de      	b.n	80038de <_printf_float+0x192>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	055a      	lsls	r2, r3, #21
 8003924:	d407      	bmi.n	8003936 <_printf_float+0x1ea>
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	4642      	mov	r2, r8
 800392a:	4631      	mov	r1, r6
 800392c:	4628      	mov	r0, r5
 800392e:	47b8      	blx	r7
 8003930:	3001      	adds	r0, #1
 8003932:	d12b      	bne.n	800398c <_printf_float+0x240>
 8003934:	e767      	b.n	8003806 <_printf_float+0xba>
 8003936:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800393a:	f240 80dc 	bls.w	8003af6 <_printf_float+0x3aa>
 800393e:	2200      	movs	r2, #0
 8003940:	2300      	movs	r3, #0
 8003942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003946:	f7fd f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800394a:	2800      	cmp	r0, #0
 800394c:	d033      	beq.n	80039b6 <_printf_float+0x26a>
 800394e:	2301      	movs	r3, #1
 8003950:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <_printf_float+0x30c>)
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f af54 	beq.w	8003806 <_printf_float+0xba>
 800395e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003962:	429a      	cmp	r2, r3
 8003964:	db02      	blt.n	800396c <_printf_float+0x220>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	07d8      	lsls	r0, r3, #31
 800396a:	d50f      	bpl.n	800398c <_printf_float+0x240>
 800396c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003970:	4631      	mov	r1, r6
 8003972:	4628      	mov	r0, r5
 8003974:	47b8      	blx	r7
 8003976:	3001      	adds	r0, #1
 8003978:	f43f af45 	beq.w	8003806 <_printf_float+0xba>
 800397c:	f04f 0800 	mov.w	r8, #0
 8003980:	f104 091a 	add.w	r9, r4, #26
 8003984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	4543      	cmp	r3, r8
 800398a:	dc09      	bgt.n	80039a0 <_printf_float+0x254>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	079b      	lsls	r3, r3, #30
 8003990:	f100 8103 	bmi.w	8003b9a <_printf_float+0x44e>
 8003994:	68e0      	ldr	r0, [r4, #12]
 8003996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003998:	4298      	cmp	r0, r3
 800399a:	bfb8      	it	lt
 800399c:	4618      	movlt	r0, r3
 800399e:	e734      	b.n	800380a <_printf_float+0xbe>
 80039a0:	2301      	movs	r3, #1
 80039a2:	464a      	mov	r2, r9
 80039a4:	4631      	mov	r1, r6
 80039a6:	4628      	mov	r0, r5
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	f43f af2b 	beq.w	8003806 <_printf_float+0xba>
 80039b0:	f108 0801 	add.w	r8, r8, #1
 80039b4:	e7e6      	b.n	8003984 <_printf_float+0x238>
 80039b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	dc2b      	bgt.n	8003a14 <_printf_float+0x2c8>
 80039bc:	2301      	movs	r3, #1
 80039be:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <_printf_float+0x30c>)
 80039c0:	4631      	mov	r1, r6
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f af1d 	beq.w	8003806 <_printf_float+0xba>
 80039cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ce:	b923      	cbnz	r3, 80039da <_printf_float+0x28e>
 80039d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d2:	b913      	cbnz	r3, 80039da <_printf_float+0x28e>
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	07d9      	lsls	r1, r3, #31
 80039d8:	d5d8      	bpl.n	800398c <_printf_float+0x240>
 80039da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039de:	4631      	mov	r1, r6
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	f43f af0e 	beq.w	8003806 <_printf_float+0xba>
 80039ea:	f04f 0900 	mov.w	r9, #0
 80039ee:	f104 0a1a 	add.w	sl, r4, #26
 80039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f4:	425b      	negs	r3, r3
 80039f6:	454b      	cmp	r3, r9
 80039f8:	dc01      	bgt.n	80039fe <_printf_float+0x2b2>
 80039fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039fc:	e794      	b.n	8003928 <_printf_float+0x1dc>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4652      	mov	r2, sl
 8003a02:	4631      	mov	r1, r6
 8003a04:	4628      	mov	r0, r5
 8003a06:	47b8      	blx	r7
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f43f aefc 	beq.w	8003806 <_printf_float+0xba>
 8003a0e:	f109 0901 	add.w	r9, r9, #1
 8003a12:	e7ee      	b.n	80039f2 <_printf_float+0x2a6>
 8003a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	bfa8      	it	ge
 8003a1c:	461a      	movge	r2, r3
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	4691      	mov	r9, r2
 8003a22:	dd07      	ble.n	8003a34 <_printf_float+0x2e8>
 8003a24:	4613      	mov	r3, r2
 8003a26:	4631      	mov	r1, r6
 8003a28:	4642      	mov	r2, r8
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f43f aee9 	beq.w	8003806 <_printf_float+0xba>
 8003a34:	f104 031a 	add.w	r3, r4, #26
 8003a38:	f04f 0b00 	mov.w	fp, #0
 8003a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a40:	9306      	str	r3, [sp, #24]
 8003a42:	e015      	b.n	8003a70 <_printf_float+0x324>
 8003a44:	7fefffff 	.word	0x7fefffff
 8003a48:	08006173 	.word	0x08006173
 8003a4c:	0800616f 	.word	0x0800616f
 8003a50:	0800617b 	.word	0x0800617b
 8003a54:	08006177 	.word	0x08006177
 8003a58:	080062d3 	.word	0x080062d3
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	9a06      	ldr	r2, [sp, #24]
 8003a60:	4631      	mov	r1, r6
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b8      	blx	r7
 8003a66:	3001      	adds	r0, #1
 8003a68:	f43f aecd 	beq.w	8003806 <_printf_float+0xba>
 8003a6c:	f10b 0b01 	add.w	fp, fp, #1
 8003a70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003a74:	ebaa 0309 	sub.w	r3, sl, r9
 8003a78:	455b      	cmp	r3, fp
 8003a7a:	dcef      	bgt.n	8003a5c <_printf_float+0x310>
 8003a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a80:	429a      	cmp	r2, r3
 8003a82:	44d0      	add	r8, sl
 8003a84:	db15      	blt.n	8003ab2 <_printf_float+0x366>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	07da      	lsls	r2, r3, #31
 8003a8a:	d412      	bmi.n	8003ab2 <_printf_float+0x366>
 8003a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a90:	eba3 020a 	sub.w	r2, r3, sl
 8003a94:	eba3 0a01 	sub.w	sl, r3, r1
 8003a98:	4592      	cmp	sl, r2
 8003a9a:	bfa8      	it	ge
 8003a9c:	4692      	movge	sl, r2
 8003a9e:	f1ba 0f00 	cmp.w	sl, #0
 8003aa2:	dc0e      	bgt.n	8003ac2 <_printf_float+0x376>
 8003aa4:	f04f 0800 	mov.w	r8, #0
 8003aa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003aac:	f104 091a 	add.w	r9, r4, #26
 8003ab0:	e019      	b.n	8003ae6 <_printf_float+0x39a>
 8003ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	4628      	mov	r0, r5
 8003aba:	47b8      	blx	r7
 8003abc:	3001      	adds	r0, #1
 8003abe:	d1e5      	bne.n	8003a8c <_printf_float+0x340>
 8003ac0:	e6a1      	b.n	8003806 <_printf_float+0xba>
 8003ac2:	4653      	mov	r3, sl
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b8      	blx	r7
 8003acc:	3001      	adds	r0, #1
 8003ace:	d1e9      	bne.n	8003aa4 <_printf_float+0x358>
 8003ad0:	e699      	b.n	8003806 <_printf_float+0xba>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	464a      	mov	r2, r9
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	4628      	mov	r0, r5
 8003ada:	47b8      	blx	r7
 8003adc:	3001      	adds	r0, #1
 8003ade:	f43f ae92 	beq.w	8003806 <_printf_float+0xba>
 8003ae2:	f108 0801 	add.w	r8, r8, #1
 8003ae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	eba3 030a 	sub.w	r3, r3, sl
 8003af0:	4543      	cmp	r3, r8
 8003af2:	dcee      	bgt.n	8003ad2 <_printf_float+0x386>
 8003af4:	e74a      	b.n	800398c <_printf_float+0x240>
 8003af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003af8:	2a01      	cmp	r2, #1
 8003afa:	dc01      	bgt.n	8003b00 <_printf_float+0x3b4>
 8003afc:	07db      	lsls	r3, r3, #31
 8003afe:	d53a      	bpl.n	8003b76 <_printf_float+0x42a>
 8003b00:	2301      	movs	r3, #1
 8003b02:	4642      	mov	r2, r8
 8003b04:	4631      	mov	r1, r6
 8003b06:	4628      	mov	r0, r5
 8003b08:	47b8      	blx	r7
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	f43f ae7b 	beq.w	8003806 <_printf_float+0xba>
 8003b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b14:	4631      	mov	r1, r6
 8003b16:	4628      	mov	r0, r5
 8003b18:	47b8      	blx	r7
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	f108 0801 	add.w	r8, r8, #1
 8003b20:	f43f ae71 	beq.w	8003806 <_printf_float+0xba>
 8003b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b26:	2200      	movs	r2, #0
 8003b28:	f103 3aff 	add.w	sl, r3, #4294967295
 8003b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b30:	2300      	movs	r3, #0
 8003b32:	f7fc ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b36:	b9c8      	cbnz	r0, 8003b6c <_printf_float+0x420>
 8003b38:	4653      	mov	r3, sl
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	4628      	mov	r0, r5
 8003b40:	47b8      	blx	r7
 8003b42:	3001      	adds	r0, #1
 8003b44:	d10e      	bne.n	8003b64 <_printf_float+0x418>
 8003b46:	e65e      	b.n	8003806 <_printf_float+0xba>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	4652      	mov	r2, sl
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4628      	mov	r0, r5
 8003b50:	47b8      	blx	r7
 8003b52:	3001      	adds	r0, #1
 8003b54:	f43f ae57 	beq.w	8003806 <_printf_float+0xba>
 8003b58:	f108 0801 	add.w	r8, r8, #1
 8003b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4543      	cmp	r3, r8
 8003b62:	dcf1      	bgt.n	8003b48 <_printf_float+0x3fc>
 8003b64:	464b      	mov	r3, r9
 8003b66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003b6a:	e6de      	b.n	800392a <_printf_float+0x1de>
 8003b6c:	f04f 0800 	mov.w	r8, #0
 8003b70:	f104 0a1a 	add.w	sl, r4, #26
 8003b74:	e7f2      	b.n	8003b5c <_printf_float+0x410>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e7df      	b.n	8003b3a <_printf_float+0x3ee>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	464a      	mov	r2, r9
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	f43f ae3e 	beq.w	8003806 <_printf_float+0xba>
 8003b8a:	f108 0801 	add.w	r8, r8, #1
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	4543      	cmp	r3, r8
 8003b96:	dcf0      	bgt.n	8003b7a <_printf_float+0x42e>
 8003b98:	e6fc      	b.n	8003994 <_printf_float+0x248>
 8003b9a:	f04f 0800 	mov.w	r8, #0
 8003b9e:	f104 0919 	add.w	r9, r4, #25
 8003ba2:	e7f4      	b.n	8003b8e <_printf_float+0x442>
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	f43f ae8b 	beq.w	80038c0 <_printf_float+0x174>
 8003baa:	2300      	movs	r3, #0
 8003bac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003bb0:	ab09      	add	r3, sp, #36	; 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	ec49 8b10 	vmov	d0, r8, r9
 8003bb8:	6022      	str	r2, [r4, #0]
 8003bba:	f8cd a004 	str.w	sl, [sp, #4]
 8003bbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f7ff fd2e 	bl	8003624 <__cvt>
 8003bc8:	4680      	mov	r8, r0
 8003bca:	e648      	b.n	800385e <_printf_float+0x112>

08003bcc <_printf_common>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	4691      	mov	r9, r2
 8003bd2:	461f      	mov	r7, r3
 8003bd4:	688a      	ldr	r2, [r1, #8]
 8003bd6:	690b      	ldr	r3, [r1, #16]
 8003bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bfb8      	it	lt
 8003be0:	4613      	movlt	r3, r2
 8003be2:	f8c9 3000 	str.w	r3, [r9]
 8003be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bea:	4606      	mov	r6, r0
 8003bec:	460c      	mov	r4, r1
 8003bee:	b112      	cbz	r2, 8003bf6 <_printf_common+0x2a>
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f8c9 3000 	str.w	r3, [r9]
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	0699      	lsls	r1, r3, #26
 8003bfa:	bf42      	ittt	mi
 8003bfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c00:	3302      	addmi	r3, #2
 8003c02:	f8c9 3000 	strmi.w	r3, [r9]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	f015 0506 	ands.w	r5, r5, #6
 8003c0c:	d107      	bne.n	8003c1e <_printf_common+0x52>
 8003c0e:	f104 0a19 	add.w	sl, r4, #25
 8003c12:	68e3      	ldr	r3, [r4, #12]
 8003c14:	f8d9 2000 	ldr.w	r2, [r9]
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	42ab      	cmp	r3, r5
 8003c1c:	dc28      	bgt.n	8003c70 <_printf_common+0xa4>
 8003c1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	3300      	adds	r3, #0
 8003c26:	bf18      	it	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	0692      	lsls	r2, r2, #26
 8003c2c:	d42d      	bmi.n	8003c8a <_printf_common+0xbe>
 8003c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c32:	4639      	mov	r1, r7
 8003c34:	4630      	mov	r0, r6
 8003c36:	47c0      	blx	r8
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d020      	beq.n	8003c7e <_printf_common+0xb2>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	68e5      	ldr	r5, [r4, #12]
 8003c40:	f8d9 2000 	ldr.w	r2, [r9]
 8003c44:	f003 0306 	and.w	r3, r3, #6
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	bf08      	it	eq
 8003c4c:	1aad      	subeq	r5, r5, r2
 8003c4e:	68a3      	ldr	r3, [r4, #8]
 8003c50:	6922      	ldr	r2, [r4, #16]
 8003c52:	bf0c      	ite	eq
 8003c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c58:	2500      	movne	r5, #0
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	bfc4      	itt	gt
 8003c5e:	1a9b      	subgt	r3, r3, r2
 8003c60:	18ed      	addgt	r5, r5, r3
 8003c62:	f04f 0900 	mov.w	r9, #0
 8003c66:	341a      	adds	r4, #26
 8003c68:	454d      	cmp	r5, r9
 8003c6a:	d11a      	bne.n	8003ca2 <_printf_common+0xd6>
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e008      	b.n	8003c82 <_printf_common+0xb6>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4652      	mov	r2, sl
 8003c74:	4639      	mov	r1, r7
 8003c76:	4630      	mov	r0, r6
 8003c78:	47c0      	blx	r8
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	d103      	bne.n	8003c86 <_printf_common+0xba>
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c86:	3501      	adds	r5, #1
 8003c88:	e7c3      	b.n	8003c12 <_printf_common+0x46>
 8003c8a:	18e1      	adds	r1, r4, r3
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	2030      	movs	r0, #48	; 0x30
 8003c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c94:	4422      	add	r2, r4
 8003c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	e7c5      	b.n	8003c2e <_printf_common+0x62>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4639      	mov	r1, r7
 8003ca8:	4630      	mov	r0, r6
 8003caa:	47c0      	blx	r8
 8003cac:	3001      	adds	r0, #1
 8003cae:	d0e6      	beq.n	8003c7e <_printf_common+0xb2>
 8003cb0:	f109 0901 	add.w	r9, r9, #1
 8003cb4:	e7d8      	b.n	8003c68 <_printf_common+0x9c>
	...

08003cb8 <_printf_i>:
 8003cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	7e09      	ldrb	r1, [r1, #24]
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	296e      	cmp	r1, #110	; 0x6e
 8003cc8:	4617      	mov	r7, r2
 8003cca:	4606      	mov	r6, r0
 8003ccc:	4698      	mov	r8, r3
 8003cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cd0:	f000 80b3 	beq.w	8003e3a <_printf_i+0x182>
 8003cd4:	d822      	bhi.n	8003d1c <_printf_i+0x64>
 8003cd6:	2963      	cmp	r1, #99	; 0x63
 8003cd8:	d036      	beq.n	8003d48 <_printf_i+0x90>
 8003cda:	d80a      	bhi.n	8003cf2 <_printf_i+0x3a>
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	f000 80b9 	beq.w	8003e54 <_printf_i+0x19c>
 8003ce2:	2958      	cmp	r1, #88	; 0x58
 8003ce4:	f000 8083 	beq.w	8003dee <_printf_i+0x136>
 8003ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003cf0:	e032      	b.n	8003d58 <_printf_i+0xa0>
 8003cf2:	2964      	cmp	r1, #100	; 0x64
 8003cf4:	d001      	beq.n	8003cfa <_printf_i+0x42>
 8003cf6:	2969      	cmp	r1, #105	; 0x69
 8003cf8:	d1f6      	bne.n	8003ce8 <_printf_i+0x30>
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	0605      	lsls	r5, r0, #24
 8003d00:	f103 0104 	add.w	r1, r3, #4
 8003d04:	d52a      	bpl.n	8003d5c <_printf_i+0xa4>
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	da03      	bge.n	8003d16 <_printf_i+0x5e>
 8003d0e:	222d      	movs	r2, #45	; 0x2d
 8003d10:	425b      	negs	r3, r3
 8003d12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d16:	486f      	ldr	r0, [pc, #444]	; (8003ed4 <_printf_i+0x21c>)
 8003d18:	220a      	movs	r2, #10
 8003d1a:	e039      	b.n	8003d90 <_printf_i+0xd8>
 8003d1c:	2973      	cmp	r1, #115	; 0x73
 8003d1e:	f000 809d 	beq.w	8003e5c <_printf_i+0x1a4>
 8003d22:	d808      	bhi.n	8003d36 <_printf_i+0x7e>
 8003d24:	296f      	cmp	r1, #111	; 0x6f
 8003d26:	d020      	beq.n	8003d6a <_printf_i+0xb2>
 8003d28:	2970      	cmp	r1, #112	; 0x70
 8003d2a:	d1dd      	bne.n	8003ce8 <_printf_i+0x30>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f043 0320 	orr.w	r3, r3, #32
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	e003      	b.n	8003d3e <_printf_i+0x86>
 8003d36:	2975      	cmp	r1, #117	; 0x75
 8003d38:	d017      	beq.n	8003d6a <_printf_i+0xb2>
 8003d3a:	2978      	cmp	r1, #120	; 0x78
 8003d3c:	d1d4      	bne.n	8003ce8 <_printf_i+0x30>
 8003d3e:	2378      	movs	r3, #120	; 0x78
 8003d40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d44:	4864      	ldr	r0, [pc, #400]	; (8003ed8 <_printf_i+0x220>)
 8003d46:	e055      	b.n	8003df4 <_printf_i+0x13c>
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	1d19      	adds	r1, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6011      	str	r1, [r2, #0]
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e08c      	b.n	8003e76 <_printf_i+0x1be>
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6011      	str	r1, [r2, #0]
 8003d60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d64:	bf18      	it	ne
 8003d66:	b21b      	sxthne	r3, r3
 8003d68:	e7cf      	b.n	8003d0a <_printf_i+0x52>
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	6825      	ldr	r5, [r4, #0]
 8003d6e:	1d18      	adds	r0, r3, #4
 8003d70:	6010      	str	r0, [r2, #0]
 8003d72:	0628      	lsls	r0, r5, #24
 8003d74:	d501      	bpl.n	8003d7a <_printf_i+0xc2>
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e002      	b.n	8003d80 <_printf_i+0xc8>
 8003d7a:	0668      	lsls	r0, r5, #25
 8003d7c:	d5fb      	bpl.n	8003d76 <_printf_i+0xbe>
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	4854      	ldr	r0, [pc, #336]	; (8003ed4 <_printf_i+0x21c>)
 8003d82:	296f      	cmp	r1, #111	; 0x6f
 8003d84:	bf14      	ite	ne
 8003d86:	220a      	movne	r2, #10
 8003d88:	2208      	moveq	r2, #8
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d90:	6865      	ldr	r5, [r4, #4]
 8003d92:	60a5      	str	r5, [r4, #8]
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	f2c0 8095 	blt.w	8003ec4 <_printf_i+0x20c>
 8003d9a:	6821      	ldr	r1, [r4, #0]
 8003d9c:	f021 0104 	bic.w	r1, r1, #4
 8003da0:	6021      	str	r1, [r4, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d13d      	bne.n	8003e22 <_printf_i+0x16a>
 8003da6:	2d00      	cmp	r5, #0
 8003da8:	f040 808e 	bne.w	8003ec8 <_printf_i+0x210>
 8003dac:	4665      	mov	r5, ip
 8003dae:	2a08      	cmp	r2, #8
 8003db0:	d10b      	bne.n	8003dca <_printf_i+0x112>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	07db      	lsls	r3, r3, #31
 8003db6:	d508      	bpl.n	8003dca <_printf_i+0x112>
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bfde      	ittt	le
 8003dc0:	2330      	movle	r3, #48	; 0x30
 8003dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dca:	ebac 0305 	sub.w	r3, ip, r5
 8003dce:	6123      	str	r3, [r4, #16]
 8003dd0:	f8cd 8000 	str.w	r8, [sp]
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	aa03      	add	r2, sp, #12
 8003dd8:	4621      	mov	r1, r4
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7ff fef6 	bl	8003bcc <_printf_common>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d14d      	bne.n	8003e80 <_printf_i+0x1c8>
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	b005      	add	sp, #20
 8003dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dee:	4839      	ldr	r0, [pc, #228]	; (8003ed4 <_printf_i+0x21c>)
 8003df0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	6821      	ldr	r1, [r4, #0]
 8003df8:	1d1d      	adds	r5, r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6015      	str	r5, [r2, #0]
 8003dfe:	060a      	lsls	r2, r1, #24
 8003e00:	d50b      	bpl.n	8003e1a <_printf_i+0x162>
 8003e02:	07ca      	lsls	r2, r1, #31
 8003e04:	bf44      	itt	mi
 8003e06:	f041 0120 	orrmi.w	r1, r1, #32
 8003e0a:	6021      	strmi	r1, [r4, #0]
 8003e0c:	b91b      	cbnz	r3, 8003e16 <_printf_i+0x15e>
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	f022 0220 	bic.w	r2, r2, #32
 8003e14:	6022      	str	r2, [r4, #0]
 8003e16:	2210      	movs	r2, #16
 8003e18:	e7b7      	b.n	8003d8a <_printf_i+0xd2>
 8003e1a:	064d      	lsls	r5, r1, #25
 8003e1c:	bf48      	it	mi
 8003e1e:	b29b      	uxthmi	r3, r3
 8003e20:	e7ef      	b.n	8003e02 <_printf_i+0x14a>
 8003e22:	4665      	mov	r5, ip
 8003e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e28:	fb02 3311 	mls	r3, r2, r1, r3
 8003e2c:	5cc3      	ldrb	r3, [r0, r3]
 8003e2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e32:	460b      	mov	r3, r1
 8003e34:	2900      	cmp	r1, #0
 8003e36:	d1f5      	bne.n	8003e24 <_printf_i+0x16c>
 8003e38:	e7b9      	b.n	8003dae <_printf_i+0xf6>
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	6825      	ldr	r5, [r4, #0]
 8003e3e:	6961      	ldr	r1, [r4, #20]
 8003e40:	1d18      	adds	r0, r3, #4
 8003e42:	6010      	str	r0, [r2, #0]
 8003e44:	0628      	lsls	r0, r5, #24
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	d501      	bpl.n	8003e4e <_printf_i+0x196>
 8003e4a:	6019      	str	r1, [r3, #0]
 8003e4c:	e002      	b.n	8003e54 <_printf_i+0x19c>
 8003e4e:	066a      	lsls	r2, r5, #25
 8003e50:	d5fb      	bpl.n	8003e4a <_printf_i+0x192>
 8003e52:	8019      	strh	r1, [r3, #0]
 8003e54:	2300      	movs	r3, #0
 8003e56:	6123      	str	r3, [r4, #16]
 8003e58:	4665      	mov	r5, ip
 8003e5a:	e7b9      	b.n	8003dd0 <_printf_i+0x118>
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	1d19      	adds	r1, r3, #4
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	681d      	ldr	r5, [r3, #0]
 8003e64:	6862      	ldr	r2, [r4, #4]
 8003e66:	2100      	movs	r1, #0
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f7fc f9b9 	bl	80001e0 <memchr>
 8003e6e:	b108      	cbz	r0, 8003e74 <_printf_i+0x1bc>
 8003e70:	1b40      	subs	r0, r0, r5
 8003e72:	6060      	str	r0, [r4, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e7e:	e7a7      	b.n	8003dd0 <_printf_i+0x118>
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	462a      	mov	r2, r5
 8003e84:	4639      	mov	r1, r7
 8003e86:	4630      	mov	r0, r6
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0aa      	beq.n	8003de4 <_printf_i+0x12c>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	079b      	lsls	r3, r3, #30
 8003e92:	d413      	bmi.n	8003ebc <_printf_i+0x204>
 8003e94:	68e0      	ldr	r0, [r4, #12]
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	4298      	cmp	r0, r3
 8003e9a:	bfb8      	it	lt
 8003e9c:	4618      	movlt	r0, r3
 8003e9e:	e7a3      	b.n	8003de8 <_printf_i+0x130>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	464a      	mov	r2, r9
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	47c0      	blx	r8
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d09a      	beq.n	8003de4 <_printf_i+0x12c>
 8003eae:	3501      	adds	r5, #1
 8003eb0:	68e3      	ldr	r3, [r4, #12]
 8003eb2:	9a03      	ldr	r2, [sp, #12]
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	42ab      	cmp	r3, r5
 8003eb8:	dcf2      	bgt.n	8003ea0 <_printf_i+0x1e8>
 8003eba:	e7eb      	b.n	8003e94 <_printf_i+0x1dc>
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	f104 0919 	add.w	r9, r4, #25
 8003ec2:	e7f5      	b.n	8003eb0 <_printf_i+0x1f8>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ac      	bne.n	8003e22 <_printf_i+0x16a>
 8003ec8:	7803      	ldrb	r3, [r0, #0]
 8003eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ece:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed2:	e76c      	b.n	8003dae <_printf_i+0xf6>
 8003ed4:	0800617f 	.word	0x0800617f
 8003ed8:	08006190 	.word	0x08006190

08003edc <sniprintf>:
 8003edc:	b40c      	push	{r2, r3}
 8003ede:	b530      	push	{r4, r5, lr}
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <sniprintf+0x64>)
 8003ee2:	1e0c      	subs	r4, r1, #0
 8003ee4:	b09d      	sub	sp, #116	; 0x74
 8003ee6:	681d      	ldr	r5, [r3, #0]
 8003ee8:	da08      	bge.n	8003efc <sniprintf+0x20>
 8003eea:	238b      	movs	r3, #139	; 0x8b
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef2:	b01d      	add	sp, #116	; 0x74
 8003ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ef8:	b002      	add	sp, #8
 8003efa:	4770      	bx	lr
 8003efc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f04:	bf14      	ite	ne
 8003f06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f0a:	4623      	moveq	r3, r4
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	9307      	str	r3, [sp, #28]
 8003f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f14:	9002      	str	r0, [sp, #8]
 8003f16:	9006      	str	r0, [sp, #24]
 8003f18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f1e:	ab21      	add	r3, sp, #132	; 0x84
 8003f20:	a902      	add	r1, sp, #8
 8003f22:	4628      	mov	r0, r5
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f001 faa3 	bl	8005470 <_svfiprintf_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	bfbc      	itt	lt
 8003f2e:	238b      	movlt	r3, #139	; 0x8b
 8003f30:	602b      	strlt	r3, [r5, #0]
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	d0dd      	beq.n	8003ef2 <sniprintf+0x16>
 8003f36:	9b02      	ldr	r3, [sp, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e7d9      	b.n	8003ef2 <sniprintf+0x16>
 8003f3e:	bf00      	nop
 8003f40:	20000004 	.word	0x20000004

08003f44 <siscanf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	b530      	push	{r4, r5, lr}
 8003f48:	b09c      	sub	sp, #112	; 0x70
 8003f4a:	ac1f      	add	r4, sp, #124	; 0x7c
 8003f4c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003f50:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f54:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003f58:	9002      	str	r0, [sp, #8]
 8003f5a:	9006      	str	r0, [sp, #24]
 8003f5c:	f7fc f938 	bl	80001d0 <strlen>
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <siscanf+0x4c>)
 8003f62:	9003      	str	r0, [sp, #12]
 8003f64:	9007      	str	r0, [sp, #28]
 8003f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f68:	480a      	ldr	r0, [pc, #40]	; (8003f94 <siscanf+0x50>)
 8003f6a:	9401      	str	r4, [sp, #4]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f70:	9314      	str	r3, [sp, #80]	; 0x50
 8003f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f76:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f7a:	462a      	mov	r2, r5
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	a902      	add	r1, sp, #8
 8003f80:	6800      	ldr	r0, [r0, #0]
 8003f82:	f001 fbc7 	bl	8005714 <__ssvfiscanf_r>
 8003f86:	b01c      	add	sp, #112	; 0x70
 8003f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f8c:	b003      	add	sp, #12
 8003f8e:	4770      	bx	lr
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	20000004 	.word	0x20000004

08003f98 <__seofread>:
 8003f98:	2000      	movs	r0, #0
 8003f9a:	4770      	bx	lr

08003f9c <strstr>:
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	7803      	ldrb	r3, [r0, #0]
 8003fa0:	b17b      	cbz	r3, 8003fc2 <strstr+0x26>
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	7823      	ldrb	r3, [r4, #0]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	1c66      	adds	r6, r4, #1
 8003faa:	b17b      	cbz	r3, 8003fcc <strstr+0x30>
 8003fac:	1e4a      	subs	r2, r1, #1
 8003fae:	1e63      	subs	r3, r4, #1
 8003fb0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003fb4:	b14d      	cbz	r5, 8003fca <strstr+0x2e>
 8003fb6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003fba:	42af      	cmp	r7, r5
 8003fbc:	4634      	mov	r4, r6
 8003fbe:	d0f7      	beq.n	8003fb0 <strstr+0x14>
 8003fc0:	e7f0      	b.n	8003fa4 <strstr+0x8>
 8003fc2:	780b      	ldrb	r3, [r1, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf18      	it	ne
 8003fc8:	2000      	movne	r0, #0
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	e7fc      	b.n	8003fca <strstr+0x2e>

08003fd0 <quorem>:
 8003fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd4:	6903      	ldr	r3, [r0, #16]
 8003fd6:	690c      	ldr	r4, [r1, #16]
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	4680      	mov	r8, r0
 8003fdc:	f2c0 8082 	blt.w	80040e4 <quorem+0x114>
 8003fe0:	3c01      	subs	r4, #1
 8003fe2:	f101 0714 	add.w	r7, r1, #20
 8003fe6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003fea:	f100 0614 	add.w	r6, r0, #20
 8003fee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003ff2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003ff6:	eb06 030c 	add.w	r3, r6, ip
 8003ffa:	3501      	adds	r5, #1
 8003ffc:	eb07 090c 	add.w	r9, r7, ip
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	fbb0 f5f5 	udiv	r5, r0, r5
 8004006:	b395      	cbz	r5, 800406e <quorem+0x9e>
 8004008:	f04f 0a00 	mov.w	sl, #0
 800400c:	4638      	mov	r0, r7
 800400e:	46b6      	mov	lr, r6
 8004010:	46d3      	mov	fp, sl
 8004012:	f850 2b04 	ldr.w	r2, [r0], #4
 8004016:	b293      	uxth	r3, r2
 8004018:	fb05 a303 	mla	r3, r5, r3, sl
 800401c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004020:	b29b      	uxth	r3, r3
 8004022:	ebab 0303 	sub.w	r3, fp, r3
 8004026:	0c12      	lsrs	r2, r2, #16
 8004028:	f8de b000 	ldr.w	fp, [lr]
 800402c:	fb05 a202 	mla	r2, r5, r2, sl
 8004030:	fa13 f38b 	uxtah	r3, r3, fp
 8004034:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004038:	fa1f fb82 	uxth.w	fp, r2
 800403c:	f8de 2000 	ldr.w	r2, [lr]
 8004040:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004048:	b29b      	uxth	r3, r3
 800404a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800404e:	4581      	cmp	r9, r0
 8004050:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004054:	f84e 3b04 	str.w	r3, [lr], #4
 8004058:	d2db      	bcs.n	8004012 <quorem+0x42>
 800405a:	f856 300c 	ldr.w	r3, [r6, ip]
 800405e:	b933      	cbnz	r3, 800406e <quorem+0x9e>
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	3b04      	subs	r3, #4
 8004064:	429e      	cmp	r6, r3
 8004066:	461a      	mov	r2, r3
 8004068:	d330      	bcc.n	80040cc <quorem+0xfc>
 800406a:	f8c8 4010 	str.w	r4, [r8, #16]
 800406e:	4640      	mov	r0, r8
 8004070:	f001 f828 	bl	80050c4 <__mcmp>
 8004074:	2800      	cmp	r0, #0
 8004076:	db25      	blt.n	80040c4 <quorem+0xf4>
 8004078:	3501      	adds	r5, #1
 800407a:	4630      	mov	r0, r6
 800407c:	f04f 0c00 	mov.w	ip, #0
 8004080:	f857 2b04 	ldr.w	r2, [r7], #4
 8004084:	f8d0 e000 	ldr.w	lr, [r0]
 8004088:	b293      	uxth	r3, r2
 800408a:	ebac 0303 	sub.w	r3, ip, r3
 800408e:	0c12      	lsrs	r2, r2, #16
 8004090:	fa13 f38e 	uxtah	r3, r3, lr
 8004094:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800409c:	b29b      	uxth	r3, r3
 800409e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040a2:	45b9      	cmp	r9, r7
 80040a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040a8:	f840 3b04 	str.w	r3, [r0], #4
 80040ac:	d2e8      	bcs.n	8004080 <quorem+0xb0>
 80040ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80040b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80040b6:	b92a      	cbnz	r2, 80040c4 <quorem+0xf4>
 80040b8:	3b04      	subs	r3, #4
 80040ba:	429e      	cmp	r6, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	d30b      	bcc.n	80040d8 <quorem+0x108>
 80040c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80040c4:	4628      	mov	r0, r5
 80040c6:	b003      	add	sp, #12
 80040c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	3b04      	subs	r3, #4
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d1ca      	bne.n	800406a <quorem+0x9a>
 80040d4:	3c01      	subs	r4, #1
 80040d6:	e7c5      	b.n	8004064 <quorem+0x94>
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	3b04      	subs	r3, #4
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d1ef      	bne.n	80040c0 <quorem+0xf0>
 80040e0:	3c01      	subs	r4, #1
 80040e2:	e7ea      	b.n	80040ba <quorem+0xea>
 80040e4:	2000      	movs	r0, #0
 80040e6:	e7ee      	b.n	80040c6 <quorem+0xf6>

080040e8 <_dtoa_r>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	ec57 6b10 	vmov	r6, r7, d0
 80040f0:	b097      	sub	sp, #92	; 0x5c
 80040f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040f4:	9106      	str	r1, [sp, #24]
 80040f6:	4604      	mov	r4, r0
 80040f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80040fa:	9312      	str	r3, [sp, #72]	; 0x48
 80040fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004100:	e9cd 6700 	strd	r6, r7, [sp]
 8004104:	b93d      	cbnz	r5, 8004116 <_dtoa_r+0x2e>
 8004106:	2010      	movs	r0, #16
 8004108:	f000 fdb4 	bl	8004c74 <malloc>
 800410c:	6260      	str	r0, [r4, #36]	; 0x24
 800410e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004112:	6005      	str	r5, [r0, #0]
 8004114:	60c5      	str	r5, [r0, #12]
 8004116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	b151      	cbz	r1, 8004132 <_dtoa_r+0x4a>
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	604a      	str	r2, [r1, #4]
 8004120:	2301      	movs	r3, #1
 8004122:	4093      	lsls	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
 8004126:	4620      	mov	r0, r4
 8004128:	f000 fdeb 	bl	8004d02 <_Bfree>
 800412c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	1e3b      	subs	r3, r7, #0
 8004134:	bfbb      	ittet	lt
 8004136:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800413a:	9301      	strlt	r3, [sp, #4]
 800413c:	2300      	movge	r3, #0
 800413e:	2201      	movlt	r2, #1
 8004140:	bfac      	ite	ge
 8004142:	f8c8 3000 	strge.w	r3, [r8]
 8004146:	f8c8 2000 	strlt.w	r2, [r8]
 800414a:	4baf      	ldr	r3, [pc, #700]	; (8004408 <_dtoa_r+0x320>)
 800414c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004150:	ea33 0308 	bics.w	r3, r3, r8
 8004154:	d114      	bne.n	8004180 <_dtoa_r+0x98>
 8004156:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004158:	f242 730f 	movw	r3, #9999	; 0x270f
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	9b00      	ldr	r3, [sp, #0]
 8004160:	b923      	cbnz	r3, 800416c <_dtoa_r+0x84>
 8004162:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004166:	2800      	cmp	r0, #0
 8004168:	f000 8542 	beq.w	8004bf0 <_dtoa_r+0xb08>
 800416c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800416e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800441c <_dtoa_r+0x334>
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8544 	beq.w	8004c00 <_dtoa_r+0xb18>
 8004178:	f10b 0303 	add.w	r3, fp, #3
 800417c:	f000 bd3e 	b.w	8004bfc <_dtoa_r+0xb14>
 8004180:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004184:	2200      	movs	r2, #0
 8004186:	2300      	movs	r3, #0
 8004188:	4630      	mov	r0, r6
 800418a:	4639      	mov	r1, r7
 800418c:	f7fc fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004190:	4681      	mov	r9, r0
 8004192:	b168      	cbz	r0, 80041b0 <_dtoa_r+0xc8>
 8004194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004196:	2301      	movs	r3, #1
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8524 	beq.w	8004bea <_dtoa_r+0xb02>
 80041a2:	4b9a      	ldr	r3, [pc, #616]	; (800440c <_dtoa_r+0x324>)
 80041a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	f000 bd28 	b.w	8004c00 <_dtoa_r+0xb18>
 80041b0:	aa14      	add	r2, sp, #80	; 0x50
 80041b2:	a915      	add	r1, sp, #84	; 0x54
 80041b4:	ec47 6b10 	vmov	d0, r6, r7
 80041b8:	4620      	mov	r0, r4
 80041ba:	f000 fffa 	bl	80051b2 <__d2b>
 80041be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80041c2:	9004      	str	r0, [sp, #16]
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	d07c      	beq.n	80042c2 <_dtoa_r+0x1da>
 80041c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80041cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80041d0:	46b2      	mov	sl, r6
 80041d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80041d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80041da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80041de:	2200      	movs	r2, #0
 80041e0:	4b8b      	ldr	r3, [pc, #556]	; (8004410 <_dtoa_r+0x328>)
 80041e2:	4650      	mov	r0, sl
 80041e4:	4659      	mov	r1, fp
 80041e6:	f7fc f84f 	bl	8000288 <__aeabi_dsub>
 80041ea:	a381      	add	r3, pc, #516	; (adr r3, 80043f0 <_dtoa_r+0x308>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc fa02 	bl	80005f8 <__aeabi_dmul>
 80041f4:	a380      	add	r3, pc, #512	; (adr r3, 80043f8 <_dtoa_r+0x310>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fc f847 	bl	800028c <__adddf3>
 80041fe:	4606      	mov	r6, r0
 8004200:	4628      	mov	r0, r5
 8004202:	460f      	mov	r7, r1
 8004204:	f7fc f98e 	bl	8000524 <__aeabi_i2d>
 8004208:	a37d      	add	r3, pc, #500	; (adr r3, 8004400 <_dtoa_r+0x318>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc f9f3 	bl	80005f8 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4630      	mov	r0, r6
 8004218:	4639      	mov	r1, r7
 800421a:	f7fc f837 	bl	800028c <__adddf3>
 800421e:	4606      	mov	r6, r0
 8004220:	460f      	mov	r7, r1
 8004222:	f7fc fc99 	bl	8000b58 <__aeabi_d2iz>
 8004226:	2200      	movs	r2, #0
 8004228:	4682      	mov	sl, r0
 800422a:	2300      	movs	r3, #0
 800422c:	4630      	mov	r0, r6
 800422e:	4639      	mov	r1, r7
 8004230:	f7fc fc54 	bl	8000adc <__aeabi_dcmplt>
 8004234:	b148      	cbz	r0, 800424a <_dtoa_r+0x162>
 8004236:	4650      	mov	r0, sl
 8004238:	f7fc f974 	bl	8000524 <__aeabi_i2d>
 800423c:	4632      	mov	r2, r6
 800423e:	463b      	mov	r3, r7
 8004240:	f7fc fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8004244:	b908      	cbnz	r0, 800424a <_dtoa_r+0x162>
 8004246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800424a:	f1ba 0f16 	cmp.w	sl, #22
 800424e:	d859      	bhi.n	8004304 <_dtoa_r+0x21c>
 8004250:	4970      	ldr	r1, [pc, #448]	; (8004414 <_dtoa_r+0x32c>)
 8004252:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004256:	e9dd 2300 	ldrd	r2, r3, [sp]
 800425a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800425e:	f7fc fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8004262:	2800      	cmp	r0, #0
 8004264:	d050      	beq.n	8004308 <_dtoa_r+0x220>
 8004266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800426a:	2300      	movs	r3, #0
 800426c:	930f      	str	r3, [sp, #60]	; 0x3c
 800426e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004270:	1b5d      	subs	r5, r3, r5
 8004272:	f1b5 0801 	subs.w	r8, r5, #1
 8004276:	bf49      	itett	mi
 8004278:	f1c5 0301 	rsbmi	r3, r5, #1
 800427c:	2300      	movpl	r3, #0
 800427e:	9305      	strmi	r3, [sp, #20]
 8004280:	f04f 0800 	movmi.w	r8, #0
 8004284:	bf58      	it	pl
 8004286:	9305      	strpl	r3, [sp, #20]
 8004288:	f1ba 0f00 	cmp.w	sl, #0
 800428c:	db3e      	blt.n	800430c <_dtoa_r+0x224>
 800428e:	2300      	movs	r3, #0
 8004290:	44d0      	add	r8, sl
 8004292:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004296:	9307      	str	r3, [sp, #28]
 8004298:	9b06      	ldr	r3, [sp, #24]
 800429a:	2b09      	cmp	r3, #9
 800429c:	f200 8090 	bhi.w	80043c0 <_dtoa_r+0x2d8>
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	bfc4      	itt	gt
 80042a4:	3b04      	subgt	r3, #4
 80042a6:	9306      	strgt	r3, [sp, #24]
 80042a8:	9b06      	ldr	r3, [sp, #24]
 80042aa:	f1a3 0302 	sub.w	r3, r3, #2
 80042ae:	bfcc      	ite	gt
 80042b0:	2500      	movgt	r5, #0
 80042b2:	2501      	movle	r5, #1
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	f200 808f 	bhi.w	80043d8 <_dtoa_r+0x2f0>
 80042ba:	e8df f003 	tbb	[pc, r3]
 80042be:	7f7d      	.short	0x7f7d
 80042c0:	7131      	.short	0x7131
 80042c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80042c6:	441d      	add	r5, r3
 80042c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80042cc:	2820      	cmp	r0, #32
 80042ce:	dd13      	ble.n	80042f8 <_dtoa_r+0x210>
 80042d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80042d4:	9b00      	ldr	r3, [sp, #0]
 80042d6:	fa08 f800 	lsl.w	r8, r8, r0
 80042da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80042de:	fa23 f000 	lsr.w	r0, r3, r0
 80042e2:	ea48 0000 	orr.w	r0, r8, r0
 80042e6:	f7fc f90d 	bl	8000504 <__aeabi_ui2d>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4682      	mov	sl, r0
 80042ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80042f2:	3d01      	subs	r5, #1
 80042f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80042f6:	e772      	b.n	80041de <_dtoa_r+0xf6>
 80042f8:	9b00      	ldr	r3, [sp, #0]
 80042fa:	f1c0 0020 	rsb	r0, r0, #32
 80042fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004302:	e7f0      	b.n	80042e6 <_dtoa_r+0x1fe>
 8004304:	2301      	movs	r3, #1
 8004306:	e7b1      	b.n	800426c <_dtoa_r+0x184>
 8004308:	900f      	str	r0, [sp, #60]	; 0x3c
 800430a:	e7b0      	b.n	800426e <_dtoa_r+0x186>
 800430c:	9b05      	ldr	r3, [sp, #20]
 800430e:	eba3 030a 	sub.w	r3, r3, sl
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	f1ca 0300 	rsb	r3, sl, #0
 8004318:	9307      	str	r3, [sp, #28]
 800431a:	2300      	movs	r3, #0
 800431c:	930e      	str	r3, [sp, #56]	; 0x38
 800431e:	e7bb      	b.n	8004298 <_dtoa_r+0x1b0>
 8004320:	2301      	movs	r3, #1
 8004322:	930a      	str	r3, [sp, #40]	; 0x28
 8004324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	dd59      	ble.n	80043de <_dtoa_r+0x2f6>
 800432a:	9302      	str	r3, [sp, #8]
 800432c:	4699      	mov	r9, r3
 800432e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004330:	2200      	movs	r2, #0
 8004332:	6072      	str	r2, [r6, #4]
 8004334:	2204      	movs	r2, #4
 8004336:	f102 0014 	add.w	r0, r2, #20
 800433a:	4298      	cmp	r0, r3
 800433c:	6871      	ldr	r1, [r6, #4]
 800433e:	d953      	bls.n	80043e8 <_dtoa_r+0x300>
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fcaa 	bl	8004c9a <_Balloc>
 8004346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004348:	6030      	str	r0, [r6, #0]
 800434a:	f1b9 0f0e 	cmp.w	r9, #14
 800434e:	f8d3 b000 	ldr.w	fp, [r3]
 8004352:	f200 80e6 	bhi.w	8004522 <_dtoa_r+0x43a>
 8004356:	2d00      	cmp	r5, #0
 8004358:	f000 80e3 	beq.w	8004522 <_dtoa_r+0x43a>
 800435c:	ed9d 7b00 	vldr	d7, [sp]
 8004360:	f1ba 0f00 	cmp.w	sl, #0
 8004364:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004368:	dd74      	ble.n	8004454 <_dtoa_r+0x36c>
 800436a:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <_dtoa_r+0x32c>)
 800436c:	f00a 030f 	and.w	r3, sl, #15
 8004370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004374:	ed93 7b00 	vldr	d7, [r3]
 8004378:	ea4f 162a 	mov.w	r6, sl, asr #4
 800437c:	06f0      	lsls	r0, r6, #27
 800437e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004382:	d565      	bpl.n	8004450 <_dtoa_r+0x368>
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <_dtoa_r+0x330>)
 8004386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800438a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800438e:	f7fc fa5d 	bl	800084c <__aeabi_ddiv>
 8004392:	e9cd 0100 	strd	r0, r1, [sp]
 8004396:	f006 060f 	and.w	r6, r6, #15
 800439a:	2503      	movs	r5, #3
 800439c:	4f1e      	ldr	r7, [pc, #120]	; (8004418 <_dtoa_r+0x330>)
 800439e:	e04c      	b.n	800443a <_dtoa_r+0x352>
 80043a0:	2301      	movs	r3, #1
 80043a2:	930a      	str	r3, [sp, #40]	; 0x28
 80043a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043a6:	4453      	add	r3, sl
 80043a8:	f103 0901 	add.w	r9, r3, #1
 80043ac:	9302      	str	r3, [sp, #8]
 80043ae:	464b      	mov	r3, r9
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bfb8      	it	lt
 80043b4:	2301      	movlt	r3, #1
 80043b6:	e7ba      	b.n	800432e <_dtoa_r+0x246>
 80043b8:	2300      	movs	r3, #0
 80043ba:	e7b2      	b.n	8004322 <_dtoa_r+0x23a>
 80043bc:	2300      	movs	r3, #0
 80043be:	e7f0      	b.n	80043a2 <_dtoa_r+0x2ba>
 80043c0:	2501      	movs	r5, #1
 80043c2:	2300      	movs	r3, #0
 80043c4:	9306      	str	r3, [sp, #24]
 80043c6:	950a      	str	r5, [sp, #40]	; 0x28
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	4699      	mov	r9, r3
 80043d0:	2200      	movs	r2, #0
 80043d2:	2312      	movs	r3, #18
 80043d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80043d6:	e7aa      	b.n	800432e <_dtoa_r+0x246>
 80043d8:	2301      	movs	r3, #1
 80043da:	930a      	str	r3, [sp, #40]	; 0x28
 80043dc:	e7f4      	b.n	80043c8 <_dtoa_r+0x2e0>
 80043de:	2301      	movs	r3, #1
 80043e0:	9302      	str	r3, [sp, #8]
 80043e2:	4699      	mov	r9, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	e7f5      	b.n	80043d4 <_dtoa_r+0x2ec>
 80043e8:	3101      	adds	r1, #1
 80043ea:	6071      	str	r1, [r6, #4]
 80043ec:	0052      	lsls	r2, r2, #1
 80043ee:	e7a2      	b.n	8004336 <_dtoa_r+0x24e>
 80043f0:	636f4361 	.word	0x636f4361
 80043f4:	3fd287a7 	.word	0x3fd287a7
 80043f8:	8b60c8b3 	.word	0x8b60c8b3
 80043fc:	3fc68a28 	.word	0x3fc68a28
 8004400:	509f79fb 	.word	0x509f79fb
 8004404:	3fd34413 	.word	0x3fd34413
 8004408:	7ff00000 	.word	0x7ff00000
 800440c:	080062d4 	.word	0x080062d4
 8004410:	3ff80000 	.word	0x3ff80000
 8004414:	080061d8 	.word	0x080061d8
 8004418:	080061b0 	.word	0x080061b0
 800441c:	080061aa 	.word	0x080061aa
 8004420:	07f1      	lsls	r1, r6, #31
 8004422:	d508      	bpl.n	8004436 <_dtoa_r+0x34e>
 8004424:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442c:	f7fc f8e4 	bl	80005f8 <__aeabi_dmul>
 8004430:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004434:	3501      	adds	r5, #1
 8004436:	1076      	asrs	r6, r6, #1
 8004438:	3708      	adds	r7, #8
 800443a:	2e00      	cmp	r6, #0
 800443c:	d1f0      	bne.n	8004420 <_dtoa_r+0x338>
 800443e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004446:	f7fc fa01 	bl	800084c <__aeabi_ddiv>
 800444a:	e9cd 0100 	strd	r0, r1, [sp]
 800444e:	e01a      	b.n	8004486 <_dtoa_r+0x39e>
 8004450:	2502      	movs	r5, #2
 8004452:	e7a3      	b.n	800439c <_dtoa_r+0x2b4>
 8004454:	f000 80a0 	beq.w	8004598 <_dtoa_r+0x4b0>
 8004458:	f1ca 0600 	rsb	r6, sl, #0
 800445c:	4b9f      	ldr	r3, [pc, #636]	; (80046dc <_dtoa_r+0x5f4>)
 800445e:	4fa0      	ldr	r7, [pc, #640]	; (80046e0 <_dtoa_r+0x5f8>)
 8004460:	f006 020f 	and.w	r2, r6, #15
 8004464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004470:	f7fc f8c2 	bl	80005f8 <__aeabi_dmul>
 8004474:	e9cd 0100 	strd	r0, r1, [sp]
 8004478:	1136      	asrs	r6, r6, #4
 800447a:	2300      	movs	r3, #0
 800447c:	2502      	movs	r5, #2
 800447e:	2e00      	cmp	r6, #0
 8004480:	d17f      	bne.n	8004582 <_dtoa_r+0x49a>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e1      	bne.n	800444a <_dtoa_r+0x362>
 8004486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8087 	beq.w	800459c <_dtoa_r+0x4b4>
 800448e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004492:	2200      	movs	r2, #0
 8004494:	4b93      	ldr	r3, [pc, #588]	; (80046e4 <_dtoa_r+0x5fc>)
 8004496:	4630      	mov	r0, r6
 8004498:	4639      	mov	r1, r7
 800449a:	f7fc fb1f 	bl	8000adc <__aeabi_dcmplt>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d07c      	beq.n	800459c <_dtoa_r+0x4b4>
 80044a2:	f1b9 0f00 	cmp.w	r9, #0
 80044a6:	d079      	beq.n	800459c <_dtoa_r+0x4b4>
 80044a8:	9b02      	ldr	r3, [sp, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dd35      	ble.n	800451a <_dtoa_r+0x432>
 80044ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80044b2:	9308      	str	r3, [sp, #32]
 80044b4:	4639      	mov	r1, r7
 80044b6:	2200      	movs	r2, #0
 80044b8:	4b8b      	ldr	r3, [pc, #556]	; (80046e8 <_dtoa_r+0x600>)
 80044ba:	4630      	mov	r0, r6
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	e9cd 0100 	strd	r0, r1, [sp]
 80044c4:	9f02      	ldr	r7, [sp, #8]
 80044c6:	3501      	adds	r5, #1
 80044c8:	4628      	mov	r0, r5
 80044ca:	f7fc f82b 	bl	8000524 <__aeabi_i2d>
 80044ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044d2:	f7fc f891 	bl	80005f8 <__aeabi_dmul>
 80044d6:	2200      	movs	r2, #0
 80044d8:	4b84      	ldr	r3, [pc, #528]	; (80046ec <_dtoa_r+0x604>)
 80044da:	f7fb fed7 	bl	800028c <__adddf3>
 80044de:	4605      	mov	r5, r0
 80044e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80044e4:	2f00      	cmp	r7, #0
 80044e6:	d15d      	bne.n	80045a4 <_dtoa_r+0x4bc>
 80044e8:	2200      	movs	r2, #0
 80044ea:	4b81      	ldr	r3, [pc, #516]	; (80046f0 <_dtoa_r+0x608>)
 80044ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044f0:	f7fb feca 	bl	8000288 <__aeabi_dsub>
 80044f4:	462a      	mov	r2, r5
 80044f6:	4633      	mov	r3, r6
 80044f8:	e9cd 0100 	strd	r0, r1, [sp]
 80044fc:	f7fc fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8004500:	2800      	cmp	r0, #0
 8004502:	f040 8288 	bne.w	8004a16 <_dtoa_r+0x92e>
 8004506:	462a      	mov	r2, r5
 8004508:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800450c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004510:	f7fc fae4 	bl	8000adc <__aeabi_dcmplt>
 8004514:	2800      	cmp	r0, #0
 8004516:	f040 827c 	bne.w	8004a12 <_dtoa_r+0x92a>
 800451a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800451e:	e9cd 2300 	strd	r2, r3, [sp]
 8004522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	f2c0 8150 	blt.w	80047ca <_dtoa_r+0x6e2>
 800452a:	f1ba 0f0e 	cmp.w	sl, #14
 800452e:	f300 814c 	bgt.w	80047ca <_dtoa_r+0x6e2>
 8004532:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <_dtoa_r+0x5f4>)
 8004534:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004538:	ed93 7b00 	vldr	d7, [r3]
 800453c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453e:	2b00      	cmp	r3, #0
 8004540:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004544:	f280 80d8 	bge.w	80046f8 <_dtoa_r+0x610>
 8004548:	f1b9 0f00 	cmp.w	r9, #0
 800454c:	f300 80d4 	bgt.w	80046f8 <_dtoa_r+0x610>
 8004550:	f040 825e 	bne.w	8004a10 <_dtoa_r+0x928>
 8004554:	2200      	movs	r2, #0
 8004556:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <_dtoa_r+0x608>)
 8004558:	ec51 0b17 	vmov	r0, r1, d7
 800455c:	f7fc f84c 	bl	80005f8 <__aeabi_dmul>
 8004560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004564:	f7fc face 	bl	8000b04 <__aeabi_dcmpge>
 8004568:	464f      	mov	r7, r9
 800456a:	464e      	mov	r6, r9
 800456c:	2800      	cmp	r0, #0
 800456e:	f040 8234 	bne.w	80049da <_dtoa_r+0x8f2>
 8004572:	2331      	movs	r3, #49	; 0x31
 8004574:	f10b 0501 	add.w	r5, fp, #1
 8004578:	f88b 3000 	strb.w	r3, [fp]
 800457c:	f10a 0a01 	add.w	sl, sl, #1
 8004580:	e22f      	b.n	80049e2 <_dtoa_r+0x8fa>
 8004582:	07f2      	lsls	r2, r6, #31
 8004584:	d505      	bpl.n	8004592 <_dtoa_r+0x4aa>
 8004586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800458a:	f7fc f835 	bl	80005f8 <__aeabi_dmul>
 800458e:	3501      	adds	r5, #1
 8004590:	2301      	movs	r3, #1
 8004592:	1076      	asrs	r6, r6, #1
 8004594:	3708      	adds	r7, #8
 8004596:	e772      	b.n	800447e <_dtoa_r+0x396>
 8004598:	2502      	movs	r5, #2
 800459a:	e774      	b.n	8004486 <_dtoa_r+0x39e>
 800459c:	f8cd a020 	str.w	sl, [sp, #32]
 80045a0:	464f      	mov	r7, r9
 80045a2:	e791      	b.n	80044c8 <_dtoa_r+0x3e0>
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <_dtoa_r+0x5f4>)
 80045a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80045ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d047      	beq.n	8004644 <_dtoa_r+0x55c>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	2000      	movs	r0, #0
 80045ba:	494e      	ldr	r1, [pc, #312]	; (80046f4 <_dtoa_r+0x60c>)
 80045bc:	f7fc f946 	bl	800084c <__aeabi_ddiv>
 80045c0:	462a      	mov	r2, r5
 80045c2:	4633      	mov	r3, r6
 80045c4:	f7fb fe60 	bl	8000288 <__aeabi_dsub>
 80045c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80045cc:	465d      	mov	r5, fp
 80045ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045d2:	f7fc fac1 	bl	8000b58 <__aeabi_d2iz>
 80045d6:	4606      	mov	r6, r0
 80045d8:	f7fb ffa4 	bl	8000524 <__aeabi_i2d>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e4:	f7fb fe50 	bl	8000288 <__aeabi_dsub>
 80045e8:	3630      	adds	r6, #48	; 0x30
 80045ea:	f805 6b01 	strb.w	r6, [r5], #1
 80045ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80045f2:	e9cd 0100 	strd	r0, r1, [sp]
 80045f6:	f7fc fa71 	bl	8000adc <__aeabi_dcmplt>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d163      	bne.n	80046c6 <_dtoa_r+0x5de>
 80045fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004602:	2000      	movs	r0, #0
 8004604:	4937      	ldr	r1, [pc, #220]	; (80046e4 <_dtoa_r+0x5fc>)
 8004606:	f7fb fe3f 	bl	8000288 <__aeabi_dsub>
 800460a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800460e:	f7fc fa65 	bl	8000adc <__aeabi_dcmplt>
 8004612:	2800      	cmp	r0, #0
 8004614:	f040 80b7 	bne.w	8004786 <_dtoa_r+0x69e>
 8004618:	eba5 030b 	sub.w	r3, r5, fp
 800461c:	429f      	cmp	r7, r3
 800461e:	f77f af7c 	ble.w	800451a <_dtoa_r+0x432>
 8004622:	2200      	movs	r2, #0
 8004624:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <_dtoa_r+0x600>)
 8004626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800462a:	f7fb ffe5 	bl	80005f8 <__aeabi_dmul>
 800462e:	2200      	movs	r2, #0
 8004630:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004634:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <_dtoa_r+0x600>)
 8004636:	e9dd 0100 	ldrd	r0, r1, [sp]
 800463a:	f7fb ffdd 	bl	80005f8 <__aeabi_dmul>
 800463e:	e9cd 0100 	strd	r0, r1, [sp]
 8004642:	e7c4      	b.n	80045ce <_dtoa_r+0x4e6>
 8004644:	462a      	mov	r2, r5
 8004646:	4633      	mov	r3, r6
 8004648:	f7fb ffd6 	bl	80005f8 <__aeabi_dmul>
 800464c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004650:	eb0b 0507 	add.w	r5, fp, r7
 8004654:	465e      	mov	r6, fp
 8004656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800465a:	f7fc fa7d 	bl	8000b58 <__aeabi_d2iz>
 800465e:	4607      	mov	r7, r0
 8004660:	f7fb ff60 	bl	8000524 <__aeabi_i2d>
 8004664:	3730      	adds	r7, #48	; 0x30
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800466e:	f7fb fe0b 	bl	8000288 <__aeabi_dsub>
 8004672:	f806 7b01 	strb.w	r7, [r6], #1
 8004676:	42ae      	cmp	r6, r5
 8004678:	e9cd 0100 	strd	r0, r1, [sp]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	d126      	bne.n	80046d0 <_dtoa_r+0x5e8>
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <_dtoa_r+0x60c>)
 8004684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004688:	f7fb fe00 	bl	800028c <__adddf3>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004694:	f7fc fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8004698:	2800      	cmp	r0, #0
 800469a:	d174      	bne.n	8004786 <_dtoa_r+0x69e>
 800469c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80046a0:	2000      	movs	r0, #0
 80046a2:	4914      	ldr	r1, [pc, #80]	; (80046f4 <_dtoa_r+0x60c>)
 80046a4:	f7fb fdf0 	bl	8000288 <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046b0:	f7fc fa14 	bl	8000adc <__aeabi_dcmplt>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f43f af30 	beq.w	800451a <_dtoa_r+0x432>
 80046ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046be:	2b30      	cmp	r3, #48	; 0x30
 80046c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80046c4:	d002      	beq.n	80046cc <_dtoa_r+0x5e4>
 80046c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80046ca:	e04a      	b.n	8004762 <_dtoa_r+0x67a>
 80046cc:	4615      	mov	r5, r2
 80046ce:	e7f4      	b.n	80046ba <_dtoa_r+0x5d2>
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_dtoa_r+0x600>)
 80046d2:	f7fb ff91 	bl	80005f8 <__aeabi_dmul>
 80046d6:	e9cd 0100 	strd	r0, r1, [sp]
 80046da:	e7bc      	b.n	8004656 <_dtoa_r+0x56e>
 80046dc:	080061d8 	.word	0x080061d8
 80046e0:	080061b0 	.word	0x080061b0
 80046e4:	3ff00000 	.word	0x3ff00000
 80046e8:	40240000 	.word	0x40240000
 80046ec:	401c0000 	.word	0x401c0000
 80046f0:	40140000 	.word	0x40140000
 80046f4:	3fe00000 	.word	0x3fe00000
 80046f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80046fc:	465d      	mov	r5, fp
 80046fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004702:	4630      	mov	r0, r6
 8004704:	4639      	mov	r1, r7
 8004706:	f7fc f8a1 	bl	800084c <__aeabi_ddiv>
 800470a:	f7fc fa25 	bl	8000b58 <__aeabi_d2iz>
 800470e:	4680      	mov	r8, r0
 8004710:	f7fb ff08 	bl	8000524 <__aeabi_i2d>
 8004714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004718:	f7fb ff6e 	bl	80005f8 <__aeabi_dmul>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4630      	mov	r0, r6
 8004722:	4639      	mov	r1, r7
 8004724:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004728:	f7fb fdae 	bl	8000288 <__aeabi_dsub>
 800472c:	f805 6b01 	strb.w	r6, [r5], #1
 8004730:	eba5 060b 	sub.w	r6, r5, fp
 8004734:	45b1      	cmp	r9, r6
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	d139      	bne.n	80047b0 <_dtoa_r+0x6c8>
 800473c:	f7fb fda6 	bl	800028c <__adddf3>
 8004740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004744:	4606      	mov	r6, r0
 8004746:	460f      	mov	r7, r1
 8004748:	f7fc f9e6 	bl	8000b18 <__aeabi_dcmpgt>
 800474c:	b9c8      	cbnz	r0, 8004782 <_dtoa_r+0x69a>
 800474e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004752:	4630      	mov	r0, r6
 8004754:	4639      	mov	r1, r7
 8004756:	f7fc f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800475a:	b110      	cbz	r0, 8004762 <_dtoa_r+0x67a>
 800475c:	f018 0f01 	tst.w	r8, #1
 8004760:	d10f      	bne.n	8004782 <_dtoa_r+0x69a>
 8004762:	9904      	ldr	r1, [sp, #16]
 8004764:	4620      	mov	r0, r4
 8004766:	f000 facc 	bl	8004d02 <_Bfree>
 800476a:	2300      	movs	r3, #0
 800476c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800476e:	702b      	strb	r3, [r5, #0]
 8004770:	f10a 0301 	add.w	r3, sl, #1
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8241 	beq.w	8004c00 <_dtoa_r+0xb18>
 800477e:	601d      	str	r5, [r3, #0]
 8004780:	e23e      	b.n	8004c00 <_dtoa_r+0xb18>
 8004782:	f8cd a020 	str.w	sl, [sp, #32]
 8004786:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800478a:	2a39      	cmp	r2, #57	; 0x39
 800478c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004790:	d108      	bne.n	80047a4 <_dtoa_r+0x6bc>
 8004792:	459b      	cmp	fp, r3
 8004794:	d10a      	bne.n	80047ac <_dtoa_r+0x6c4>
 8004796:	9b08      	ldr	r3, [sp, #32]
 8004798:	3301      	adds	r3, #1
 800479a:	9308      	str	r3, [sp, #32]
 800479c:	2330      	movs	r3, #48	; 0x30
 800479e:	f88b 3000 	strb.w	r3, [fp]
 80047a2:	465b      	mov	r3, fp
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	3201      	adds	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e78c      	b.n	80046c6 <_dtoa_r+0x5de>
 80047ac:	461d      	mov	r5, r3
 80047ae:	e7ea      	b.n	8004786 <_dtoa_r+0x69e>
 80047b0:	2200      	movs	r2, #0
 80047b2:	4b9b      	ldr	r3, [pc, #620]	; (8004a20 <_dtoa_r+0x938>)
 80047b4:	f7fb ff20 	bl	80005f8 <__aeabi_dmul>
 80047b8:	2200      	movs	r2, #0
 80047ba:	2300      	movs	r3, #0
 80047bc:	4606      	mov	r6, r0
 80047be:	460f      	mov	r7, r1
 80047c0:	f7fc f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d09a      	beq.n	80046fe <_dtoa_r+0x616>
 80047c8:	e7cb      	b.n	8004762 <_dtoa_r+0x67a>
 80047ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047cc:	2a00      	cmp	r2, #0
 80047ce:	f000 808b 	beq.w	80048e8 <_dtoa_r+0x800>
 80047d2:	9a06      	ldr	r2, [sp, #24]
 80047d4:	2a01      	cmp	r2, #1
 80047d6:	dc6e      	bgt.n	80048b6 <_dtoa_r+0x7ce>
 80047d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d067      	beq.n	80048ae <_dtoa_r+0x7c6>
 80047de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047e2:	9f07      	ldr	r7, [sp, #28]
 80047e4:	9d05      	ldr	r5, [sp, #20]
 80047e6:	9a05      	ldr	r2, [sp, #20]
 80047e8:	2101      	movs	r1, #1
 80047ea:	441a      	add	r2, r3
 80047ec:	4620      	mov	r0, r4
 80047ee:	9205      	str	r2, [sp, #20]
 80047f0:	4498      	add	r8, r3
 80047f2:	f000 fb26 	bl	8004e42 <__i2b>
 80047f6:	4606      	mov	r6, r0
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	dd0c      	ble.n	8004816 <_dtoa_r+0x72e>
 80047fc:	f1b8 0f00 	cmp.w	r8, #0
 8004800:	dd09      	ble.n	8004816 <_dtoa_r+0x72e>
 8004802:	4545      	cmp	r5, r8
 8004804:	9a05      	ldr	r2, [sp, #20]
 8004806:	462b      	mov	r3, r5
 8004808:	bfa8      	it	ge
 800480a:	4643      	movge	r3, r8
 800480c:	1ad2      	subs	r2, r2, r3
 800480e:	9205      	str	r2, [sp, #20]
 8004810:	1aed      	subs	r5, r5, r3
 8004812:	eba8 0803 	sub.w	r8, r8, r3
 8004816:	9b07      	ldr	r3, [sp, #28]
 8004818:	b1eb      	cbz	r3, 8004856 <_dtoa_r+0x76e>
 800481a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d067      	beq.n	80048f0 <_dtoa_r+0x808>
 8004820:	b18f      	cbz	r7, 8004846 <_dtoa_r+0x75e>
 8004822:	4631      	mov	r1, r6
 8004824:	463a      	mov	r2, r7
 8004826:	4620      	mov	r0, r4
 8004828:	f000 fbaa 	bl	8004f80 <__pow5mult>
 800482c:	9a04      	ldr	r2, [sp, #16]
 800482e:	4601      	mov	r1, r0
 8004830:	4606      	mov	r6, r0
 8004832:	4620      	mov	r0, r4
 8004834:	f000 fb0e 	bl	8004e54 <__multiply>
 8004838:	9904      	ldr	r1, [sp, #16]
 800483a:	9008      	str	r0, [sp, #32]
 800483c:	4620      	mov	r0, r4
 800483e:	f000 fa60 	bl	8004d02 <_Bfree>
 8004842:	9b08      	ldr	r3, [sp, #32]
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	9b07      	ldr	r3, [sp, #28]
 8004848:	1bda      	subs	r2, r3, r7
 800484a:	d004      	beq.n	8004856 <_dtoa_r+0x76e>
 800484c:	9904      	ldr	r1, [sp, #16]
 800484e:	4620      	mov	r0, r4
 8004850:	f000 fb96 	bl	8004f80 <__pow5mult>
 8004854:	9004      	str	r0, [sp, #16]
 8004856:	2101      	movs	r1, #1
 8004858:	4620      	mov	r0, r4
 800485a:	f000 faf2 	bl	8004e42 <__i2b>
 800485e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004860:	4607      	mov	r7, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 81d0 	beq.w	8004c08 <_dtoa_r+0xb20>
 8004868:	461a      	mov	r2, r3
 800486a:	4601      	mov	r1, r0
 800486c:	4620      	mov	r0, r4
 800486e:	f000 fb87 	bl	8004f80 <__pow5mult>
 8004872:	9b06      	ldr	r3, [sp, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	4607      	mov	r7, r0
 8004878:	dc40      	bgt.n	80048fc <_dtoa_r+0x814>
 800487a:	9b00      	ldr	r3, [sp, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d139      	bne.n	80048f4 <_dtoa_r+0x80c>
 8004880:	9b01      	ldr	r3, [sp, #4]
 8004882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004886:	2b00      	cmp	r3, #0
 8004888:	d136      	bne.n	80048f8 <_dtoa_r+0x810>
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004890:	0d1b      	lsrs	r3, r3, #20
 8004892:	051b      	lsls	r3, r3, #20
 8004894:	b12b      	cbz	r3, 80048a2 <_dtoa_r+0x7ba>
 8004896:	9b05      	ldr	r3, [sp, #20]
 8004898:	3301      	adds	r3, #1
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f108 0801 	add.w	r8, r8, #1
 80048a0:	2301      	movs	r3, #1
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d12a      	bne.n	8004900 <_dtoa_r+0x818>
 80048aa:	2001      	movs	r0, #1
 80048ac:	e030      	b.n	8004910 <_dtoa_r+0x828>
 80048ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048b4:	e795      	b.n	80047e2 <_dtoa_r+0x6fa>
 80048b6:	9b07      	ldr	r3, [sp, #28]
 80048b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80048bc:	42bb      	cmp	r3, r7
 80048be:	bfbf      	itttt	lt
 80048c0:	9b07      	ldrlt	r3, [sp, #28]
 80048c2:	9707      	strlt	r7, [sp, #28]
 80048c4:	1afa      	sublt	r2, r7, r3
 80048c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80048c8:	bfbb      	ittet	lt
 80048ca:	189b      	addlt	r3, r3, r2
 80048cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80048ce:	1bdf      	subge	r7, r3, r7
 80048d0:	2700      	movlt	r7, #0
 80048d2:	f1b9 0f00 	cmp.w	r9, #0
 80048d6:	bfb5      	itete	lt
 80048d8:	9b05      	ldrlt	r3, [sp, #20]
 80048da:	9d05      	ldrge	r5, [sp, #20]
 80048dc:	eba3 0509 	sublt.w	r5, r3, r9
 80048e0:	464b      	movge	r3, r9
 80048e2:	bfb8      	it	lt
 80048e4:	2300      	movlt	r3, #0
 80048e6:	e77e      	b.n	80047e6 <_dtoa_r+0x6fe>
 80048e8:	9f07      	ldr	r7, [sp, #28]
 80048ea:	9d05      	ldr	r5, [sp, #20]
 80048ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80048ee:	e783      	b.n	80047f8 <_dtoa_r+0x710>
 80048f0:	9a07      	ldr	r2, [sp, #28]
 80048f2:	e7ab      	b.n	800484c <_dtoa_r+0x764>
 80048f4:	2300      	movs	r3, #0
 80048f6:	e7d4      	b.n	80048a2 <_dtoa_r+0x7ba>
 80048f8:	9b00      	ldr	r3, [sp, #0]
 80048fa:	e7d2      	b.n	80048a2 <_dtoa_r+0x7ba>
 80048fc:	2300      	movs	r3, #0
 80048fe:	9307      	str	r3, [sp, #28]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004906:	6918      	ldr	r0, [r3, #16]
 8004908:	f000 fa4d 	bl	8004da6 <__hi0bits>
 800490c:	f1c0 0020 	rsb	r0, r0, #32
 8004910:	4440      	add	r0, r8
 8004912:	f010 001f 	ands.w	r0, r0, #31
 8004916:	d047      	beq.n	80049a8 <_dtoa_r+0x8c0>
 8004918:	f1c0 0320 	rsb	r3, r0, #32
 800491c:	2b04      	cmp	r3, #4
 800491e:	dd3b      	ble.n	8004998 <_dtoa_r+0x8b0>
 8004920:	9b05      	ldr	r3, [sp, #20]
 8004922:	f1c0 001c 	rsb	r0, r0, #28
 8004926:	4403      	add	r3, r0
 8004928:	9305      	str	r3, [sp, #20]
 800492a:	4405      	add	r5, r0
 800492c:	4480      	add	r8, r0
 800492e:	9b05      	ldr	r3, [sp, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	dd05      	ble.n	8004940 <_dtoa_r+0x858>
 8004934:	461a      	mov	r2, r3
 8004936:	9904      	ldr	r1, [sp, #16]
 8004938:	4620      	mov	r0, r4
 800493a:	f000 fb6f 	bl	800501c <__lshift>
 800493e:	9004      	str	r0, [sp, #16]
 8004940:	f1b8 0f00 	cmp.w	r8, #0
 8004944:	dd05      	ble.n	8004952 <_dtoa_r+0x86a>
 8004946:	4639      	mov	r1, r7
 8004948:	4642      	mov	r2, r8
 800494a:	4620      	mov	r0, r4
 800494c:	f000 fb66 	bl	800501c <__lshift>
 8004950:	4607      	mov	r7, r0
 8004952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004954:	b353      	cbz	r3, 80049ac <_dtoa_r+0x8c4>
 8004956:	4639      	mov	r1, r7
 8004958:	9804      	ldr	r0, [sp, #16]
 800495a:	f000 fbb3 	bl	80050c4 <__mcmp>
 800495e:	2800      	cmp	r0, #0
 8004960:	da24      	bge.n	80049ac <_dtoa_r+0x8c4>
 8004962:	2300      	movs	r3, #0
 8004964:	220a      	movs	r2, #10
 8004966:	9904      	ldr	r1, [sp, #16]
 8004968:	4620      	mov	r0, r4
 800496a:	f000 f9e1 	bl	8004d30 <__multadd>
 800496e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004970:	9004      	str	r0, [sp, #16]
 8004972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 814d 	beq.w	8004c16 <_dtoa_r+0xb2e>
 800497c:	2300      	movs	r3, #0
 800497e:	4631      	mov	r1, r6
 8004980:	220a      	movs	r2, #10
 8004982:	4620      	mov	r0, r4
 8004984:	f000 f9d4 	bl	8004d30 <__multadd>
 8004988:	9b02      	ldr	r3, [sp, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	4606      	mov	r6, r0
 800498e:	dc4f      	bgt.n	8004a30 <_dtoa_r+0x948>
 8004990:	9b06      	ldr	r3, [sp, #24]
 8004992:	2b02      	cmp	r3, #2
 8004994:	dd4c      	ble.n	8004a30 <_dtoa_r+0x948>
 8004996:	e011      	b.n	80049bc <_dtoa_r+0x8d4>
 8004998:	d0c9      	beq.n	800492e <_dtoa_r+0x846>
 800499a:	9a05      	ldr	r2, [sp, #20]
 800499c:	331c      	adds	r3, #28
 800499e:	441a      	add	r2, r3
 80049a0:	9205      	str	r2, [sp, #20]
 80049a2:	441d      	add	r5, r3
 80049a4:	4498      	add	r8, r3
 80049a6:	e7c2      	b.n	800492e <_dtoa_r+0x846>
 80049a8:	4603      	mov	r3, r0
 80049aa:	e7f6      	b.n	800499a <_dtoa_r+0x8b2>
 80049ac:	f1b9 0f00 	cmp.w	r9, #0
 80049b0:	dc38      	bgt.n	8004a24 <_dtoa_r+0x93c>
 80049b2:	9b06      	ldr	r3, [sp, #24]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	dd35      	ble.n	8004a24 <_dtoa_r+0x93c>
 80049b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	b963      	cbnz	r3, 80049da <_dtoa_r+0x8f2>
 80049c0:	4639      	mov	r1, r7
 80049c2:	2205      	movs	r2, #5
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 f9b3 	bl	8004d30 <__multadd>
 80049ca:	4601      	mov	r1, r0
 80049cc:	4607      	mov	r7, r0
 80049ce:	9804      	ldr	r0, [sp, #16]
 80049d0:	f000 fb78 	bl	80050c4 <__mcmp>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f73f adcc 	bgt.w	8004572 <_dtoa_r+0x48a>
 80049da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049dc:	465d      	mov	r5, fp
 80049de:	ea6f 0a03 	mvn.w	sl, r3
 80049e2:	f04f 0900 	mov.w	r9, #0
 80049e6:	4639      	mov	r1, r7
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 f98a 	bl	8004d02 <_Bfree>
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	f43f aeb7 	beq.w	8004762 <_dtoa_r+0x67a>
 80049f4:	f1b9 0f00 	cmp.w	r9, #0
 80049f8:	d005      	beq.n	8004a06 <_dtoa_r+0x91e>
 80049fa:	45b1      	cmp	r9, r6
 80049fc:	d003      	beq.n	8004a06 <_dtoa_r+0x91e>
 80049fe:	4649      	mov	r1, r9
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 f97e 	bl	8004d02 <_Bfree>
 8004a06:	4631      	mov	r1, r6
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 f97a 	bl	8004d02 <_Bfree>
 8004a0e:	e6a8      	b.n	8004762 <_dtoa_r+0x67a>
 8004a10:	2700      	movs	r7, #0
 8004a12:	463e      	mov	r6, r7
 8004a14:	e7e1      	b.n	80049da <_dtoa_r+0x8f2>
 8004a16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004a1a:	463e      	mov	r6, r7
 8004a1c:	e5a9      	b.n	8004572 <_dtoa_r+0x48a>
 8004a1e:	bf00      	nop
 8004a20:	40240000 	.word	0x40240000
 8004a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a26:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80fa 	beq.w	8004c24 <_dtoa_r+0xb3c>
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	dd05      	ble.n	8004a40 <_dtoa_r+0x958>
 8004a34:	4631      	mov	r1, r6
 8004a36:	462a      	mov	r2, r5
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 faef 	bl	800501c <__lshift>
 8004a3e:	4606      	mov	r6, r0
 8004a40:	9b07      	ldr	r3, [sp, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d04c      	beq.n	8004ae0 <_dtoa_r+0x9f8>
 8004a46:	6871      	ldr	r1, [r6, #4]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 f926 	bl	8004c9a <_Balloc>
 8004a4e:	6932      	ldr	r2, [r6, #16]
 8004a50:	3202      	adds	r2, #2
 8004a52:	4605      	mov	r5, r0
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	f106 010c 	add.w	r1, r6, #12
 8004a5a:	300c      	adds	r0, #12
 8004a5c:	f000 f912 	bl	8004c84 <memcpy>
 8004a60:	2201      	movs	r2, #1
 8004a62:	4629      	mov	r1, r5
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 fad9 	bl	800501c <__lshift>
 8004a6a:	9b00      	ldr	r3, [sp, #0]
 8004a6c:	f8cd b014 	str.w	fp, [sp, #20]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	46b1      	mov	r9, r6
 8004a76:	9307      	str	r3, [sp, #28]
 8004a78:	4606      	mov	r6, r0
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	9804      	ldr	r0, [sp, #16]
 8004a7e:	f7ff faa7 	bl	8003fd0 <quorem>
 8004a82:	4649      	mov	r1, r9
 8004a84:	4605      	mov	r5, r0
 8004a86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a8a:	9804      	ldr	r0, [sp, #16]
 8004a8c:	f000 fb1a 	bl	80050c4 <__mcmp>
 8004a90:	4632      	mov	r2, r6
 8004a92:	9000      	str	r0, [sp, #0]
 8004a94:	4639      	mov	r1, r7
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 fb2e 	bl	80050f8 <__mdiff>
 8004a9c:	68c3      	ldr	r3, [r0, #12]
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	bb03      	cbnz	r3, 8004ae4 <_dtoa_r+0x9fc>
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	9008      	str	r0, [sp, #32]
 8004aa6:	9804      	ldr	r0, [sp, #16]
 8004aa8:	f000 fb0c 	bl	80050c4 <__mcmp>
 8004aac:	9a08      	ldr	r2, [sp, #32]
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	9308      	str	r3, [sp, #32]
 8004ab6:	f000 f924 	bl	8004d02 <_Bfree>
 8004aba:	9b08      	ldr	r3, [sp, #32]
 8004abc:	b9a3      	cbnz	r3, 8004ae8 <_dtoa_r+0xa00>
 8004abe:	9a06      	ldr	r2, [sp, #24]
 8004ac0:	b992      	cbnz	r2, 8004ae8 <_dtoa_r+0xa00>
 8004ac2:	9a07      	ldr	r2, [sp, #28]
 8004ac4:	b982      	cbnz	r2, 8004ae8 <_dtoa_r+0xa00>
 8004ac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004aca:	d029      	beq.n	8004b20 <_dtoa_r+0xa38>
 8004acc:	9b00      	ldr	r3, [sp, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	dd01      	ble.n	8004ad6 <_dtoa_r+0x9ee>
 8004ad2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004ad6:	9b05      	ldr	r3, [sp, #20]
 8004ad8:	1c5d      	adds	r5, r3, #1
 8004ada:	f883 8000 	strb.w	r8, [r3]
 8004ade:	e782      	b.n	80049e6 <_dtoa_r+0x8fe>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	e7c2      	b.n	8004a6a <_dtoa_r+0x982>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e7e3      	b.n	8004ab0 <_dtoa_r+0x9c8>
 8004ae8:	9a00      	ldr	r2, [sp, #0]
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	db04      	blt.n	8004af8 <_dtoa_r+0xa10>
 8004aee:	d125      	bne.n	8004b3c <_dtoa_r+0xa54>
 8004af0:	9a06      	ldr	r2, [sp, #24]
 8004af2:	bb1a      	cbnz	r2, 8004b3c <_dtoa_r+0xa54>
 8004af4:	9a07      	ldr	r2, [sp, #28]
 8004af6:	bb0a      	cbnz	r2, 8004b3c <_dtoa_r+0xa54>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	ddec      	ble.n	8004ad6 <_dtoa_r+0x9ee>
 8004afc:	2201      	movs	r2, #1
 8004afe:	9904      	ldr	r1, [sp, #16]
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 fa8b 	bl	800501c <__lshift>
 8004b06:	4639      	mov	r1, r7
 8004b08:	9004      	str	r0, [sp, #16]
 8004b0a:	f000 fadb 	bl	80050c4 <__mcmp>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	dc03      	bgt.n	8004b1a <_dtoa_r+0xa32>
 8004b12:	d1e0      	bne.n	8004ad6 <_dtoa_r+0x9ee>
 8004b14:	f018 0f01 	tst.w	r8, #1
 8004b18:	d0dd      	beq.n	8004ad6 <_dtoa_r+0x9ee>
 8004b1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b1e:	d1d8      	bne.n	8004ad2 <_dtoa_r+0x9ea>
 8004b20:	9b05      	ldr	r3, [sp, #20]
 8004b22:	9a05      	ldr	r2, [sp, #20]
 8004b24:	1c5d      	adds	r5, r3, #1
 8004b26:	2339      	movs	r3, #57	; 0x39
 8004b28:	7013      	strb	r3, [r2, #0]
 8004b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b2e:	2b39      	cmp	r3, #57	; 0x39
 8004b30:	f105 32ff 	add.w	r2, r5, #4294967295
 8004b34:	d04f      	beq.n	8004bd6 <_dtoa_r+0xaee>
 8004b36:	3301      	adds	r3, #1
 8004b38:	7013      	strb	r3, [r2, #0]
 8004b3a:	e754      	b.n	80049e6 <_dtoa_r+0x8fe>
 8004b3c:	9a05      	ldr	r2, [sp, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f102 0501 	add.w	r5, r2, #1
 8004b44:	dd06      	ble.n	8004b54 <_dtoa_r+0xa6c>
 8004b46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b4a:	d0e9      	beq.n	8004b20 <_dtoa_r+0xa38>
 8004b4c:	f108 0801 	add.w	r8, r8, #1
 8004b50:	9b05      	ldr	r3, [sp, #20]
 8004b52:	e7c2      	b.n	8004ada <_dtoa_r+0x9f2>
 8004b54:	9a02      	ldr	r2, [sp, #8]
 8004b56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004b5a:	eba5 030b 	sub.w	r3, r5, fp
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d021      	beq.n	8004ba6 <_dtoa_r+0xabe>
 8004b62:	2300      	movs	r3, #0
 8004b64:	220a      	movs	r2, #10
 8004b66:	9904      	ldr	r1, [sp, #16]
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 f8e1 	bl	8004d30 <__multadd>
 8004b6e:	45b1      	cmp	r9, r6
 8004b70:	9004      	str	r0, [sp, #16]
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	f04f 020a 	mov.w	r2, #10
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	d105      	bne.n	8004b8c <_dtoa_r+0xaa4>
 8004b80:	f000 f8d6 	bl	8004d30 <__multadd>
 8004b84:	4681      	mov	r9, r0
 8004b86:	4606      	mov	r6, r0
 8004b88:	9505      	str	r5, [sp, #20]
 8004b8a:	e776      	b.n	8004a7a <_dtoa_r+0x992>
 8004b8c:	f000 f8d0 	bl	8004d30 <__multadd>
 8004b90:	4631      	mov	r1, r6
 8004b92:	4681      	mov	r9, r0
 8004b94:	2300      	movs	r3, #0
 8004b96:	220a      	movs	r2, #10
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f000 f8c9 	bl	8004d30 <__multadd>
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	e7f2      	b.n	8004b88 <_dtoa_r+0xaa0>
 8004ba2:	f04f 0900 	mov.w	r9, #0
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	9904      	ldr	r1, [sp, #16]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fa36 	bl	800501c <__lshift>
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	9004      	str	r0, [sp, #16]
 8004bb4:	f000 fa86 	bl	80050c4 <__mcmp>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	dcb6      	bgt.n	8004b2a <_dtoa_r+0xa42>
 8004bbc:	d102      	bne.n	8004bc4 <_dtoa_r+0xadc>
 8004bbe:	f018 0f01 	tst.w	r8, #1
 8004bc2:	d1b2      	bne.n	8004b2a <_dtoa_r+0xa42>
 8004bc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	f105 32ff 	add.w	r2, r5, #4294967295
 8004bce:	f47f af0a 	bne.w	80049e6 <_dtoa_r+0x8fe>
 8004bd2:	4615      	mov	r5, r2
 8004bd4:	e7f6      	b.n	8004bc4 <_dtoa_r+0xadc>
 8004bd6:	4593      	cmp	fp, r2
 8004bd8:	d105      	bne.n	8004be6 <_dtoa_r+0xafe>
 8004bda:	2331      	movs	r3, #49	; 0x31
 8004bdc:	f10a 0a01 	add.w	sl, sl, #1
 8004be0:	f88b 3000 	strb.w	r3, [fp]
 8004be4:	e6ff      	b.n	80049e6 <_dtoa_r+0x8fe>
 8004be6:	4615      	mov	r5, r2
 8004be8:	e79f      	b.n	8004b2a <_dtoa_r+0xa42>
 8004bea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004c50 <_dtoa_r+0xb68>
 8004bee:	e007      	b.n	8004c00 <_dtoa_r+0xb18>
 8004bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004c54 <_dtoa_r+0xb6c>
 8004bf6:	b11b      	cbz	r3, 8004c00 <_dtoa_r+0xb18>
 8004bf8:	f10b 0308 	add.w	r3, fp, #8
 8004bfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4658      	mov	r0, fp
 8004c02:	b017      	add	sp, #92	; 0x5c
 8004c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c08:	9b06      	ldr	r3, [sp, #24]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	f77f ae35 	ble.w	800487a <_dtoa_r+0x792>
 8004c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c12:	9307      	str	r3, [sp, #28]
 8004c14:	e649      	b.n	80048aa <_dtoa_r+0x7c2>
 8004c16:	9b02      	ldr	r3, [sp, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dc03      	bgt.n	8004c24 <_dtoa_r+0xb3c>
 8004c1c:	9b06      	ldr	r3, [sp, #24]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	f73f aecc 	bgt.w	80049bc <_dtoa_r+0x8d4>
 8004c24:	465d      	mov	r5, fp
 8004c26:	4639      	mov	r1, r7
 8004c28:	9804      	ldr	r0, [sp, #16]
 8004c2a:	f7ff f9d1 	bl	8003fd0 <quorem>
 8004c2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c32:	f805 8b01 	strb.w	r8, [r5], #1
 8004c36:	9a02      	ldr	r2, [sp, #8]
 8004c38:	eba5 030b 	sub.w	r3, r5, fp
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	ddb0      	ble.n	8004ba2 <_dtoa_r+0xaba>
 8004c40:	2300      	movs	r3, #0
 8004c42:	220a      	movs	r2, #10
 8004c44:	9904      	ldr	r1, [sp, #16]
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f872 	bl	8004d30 <__multadd>
 8004c4c:	9004      	str	r0, [sp, #16]
 8004c4e:	e7ea      	b.n	8004c26 <_dtoa_r+0xb3e>
 8004c50:	080062d3 	.word	0x080062d3
 8004c54:	080061a1 	.word	0x080061a1

08004c58 <_localeconv_r>:
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <_localeconv_r+0x14>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a18      	ldr	r0, [r3, #32]
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <_localeconv_r+0x18>)
 8004c60:	2800      	cmp	r0, #0
 8004c62:	bf08      	it	eq
 8004c64:	4618      	moveq	r0, r3
 8004c66:	30f0      	adds	r0, #240	; 0xf0
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000004 	.word	0x20000004
 8004c70:	20000068 	.word	0x20000068

08004c74 <malloc>:
 8004c74:	4b02      	ldr	r3, [pc, #8]	; (8004c80 <malloc+0xc>)
 8004c76:	4601      	mov	r1, r0
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	f000 bb45 	b.w	8005308 <_malloc_r>
 8004c7e:	bf00      	nop
 8004c80:	20000004 	.word	0x20000004

08004c84 <memcpy>:
 8004c84:	b510      	push	{r4, lr}
 8004c86:	1e43      	subs	r3, r0, #1
 8004c88:	440a      	add	r2, r1
 8004c8a:	4291      	cmp	r1, r2
 8004c8c:	d100      	bne.n	8004c90 <memcpy+0xc>
 8004c8e:	bd10      	pop	{r4, pc}
 8004c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c98:	e7f7      	b.n	8004c8a <memcpy+0x6>

08004c9a <_Balloc>:
 8004c9a:	b570      	push	{r4, r5, r6, lr}
 8004c9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	460e      	mov	r6, r1
 8004ca2:	b93d      	cbnz	r5, 8004cb4 <_Balloc+0x1a>
 8004ca4:	2010      	movs	r0, #16
 8004ca6:	f7ff ffe5 	bl	8004c74 <malloc>
 8004caa:	6260      	str	r0, [r4, #36]	; 0x24
 8004cac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cb0:	6005      	str	r5, [r0, #0]
 8004cb2:	60c5      	str	r5, [r0, #12]
 8004cb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004cb6:	68eb      	ldr	r3, [r5, #12]
 8004cb8:	b183      	cbz	r3, 8004cdc <_Balloc+0x42>
 8004cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004cc2:	b9b8      	cbnz	r0, 8004cf4 <_Balloc+0x5a>
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f506 	lsl.w	r5, r1, r6
 8004cca:	1d6a      	adds	r2, r5, #5
 8004ccc:	0092      	lsls	r2, r2, #2
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f000 fabe 	bl	8005250 <_calloc_r>
 8004cd4:	b160      	cbz	r0, 8004cf0 <_Balloc+0x56>
 8004cd6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004cda:	e00e      	b.n	8004cfa <_Balloc+0x60>
 8004cdc:	2221      	movs	r2, #33	; 0x21
 8004cde:	2104      	movs	r1, #4
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 fab5 	bl	8005250 <_calloc_r>
 8004ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce8:	60e8      	str	r0, [r5, #12]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e4      	bne.n	8004cba <_Balloc+0x20>
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	6802      	ldr	r2, [r0, #0]
 8004cf6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d00:	e7f7      	b.n	8004cf2 <_Balloc+0x58>

08004d02 <_Bfree>:
 8004d02:	b570      	push	{r4, r5, r6, lr}
 8004d04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d06:	4606      	mov	r6, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	b93c      	cbnz	r4, 8004d1c <_Bfree+0x1a>
 8004d0c:	2010      	movs	r0, #16
 8004d0e:	f7ff ffb1 	bl	8004c74 <malloc>
 8004d12:	6270      	str	r0, [r6, #36]	; 0x24
 8004d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d18:	6004      	str	r4, [r0, #0]
 8004d1a:	60c4      	str	r4, [r0, #12]
 8004d1c:	b13d      	cbz	r5, 8004d2e <_Bfree+0x2c>
 8004d1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004d20:	686a      	ldr	r2, [r5, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d28:	6029      	str	r1, [r5, #0]
 8004d2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}

08004d30 <__multadd>:
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	690d      	ldr	r5, [r1, #16]
 8004d36:	461f      	mov	r7, r3
 8004d38:	4606      	mov	r6, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	f101 0c14 	add.w	ip, r1, #20
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8dc 0000 	ldr.w	r0, [ip]
 8004d46:	b281      	uxth	r1, r0
 8004d48:	fb02 7101 	mla	r1, r2, r1, r7
 8004d4c:	0c0f      	lsrs	r7, r1, #16
 8004d4e:	0c00      	lsrs	r0, r0, #16
 8004d50:	fb02 7000 	mla	r0, r2, r0, r7
 8004d54:	b289      	uxth	r1, r1
 8004d56:	3301      	adds	r3, #1
 8004d58:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004d5c:	429d      	cmp	r5, r3
 8004d5e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004d62:	f84c 1b04 	str.w	r1, [ip], #4
 8004d66:	dcec      	bgt.n	8004d42 <__multadd+0x12>
 8004d68:	b1d7      	cbz	r7, 8004da0 <__multadd+0x70>
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc12      	bgt.n	8004d96 <__multadd+0x66>
 8004d70:	6861      	ldr	r1, [r4, #4]
 8004d72:	4630      	mov	r0, r6
 8004d74:	3101      	adds	r1, #1
 8004d76:	f7ff ff90 	bl	8004c9a <_Balloc>
 8004d7a:	6922      	ldr	r2, [r4, #16]
 8004d7c:	3202      	adds	r2, #2
 8004d7e:	f104 010c 	add.w	r1, r4, #12
 8004d82:	4680      	mov	r8, r0
 8004d84:	0092      	lsls	r2, r2, #2
 8004d86:	300c      	adds	r0, #12
 8004d88:	f7ff ff7c 	bl	8004c84 <memcpy>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7ff ffb7 	bl	8004d02 <_Bfree>
 8004d94:	4644      	mov	r4, r8
 8004d96:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	615f      	str	r7, [r3, #20]
 8004d9e:	6125      	str	r5, [r4, #16]
 8004da0:	4620      	mov	r0, r4
 8004da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004da6 <__hi0bits>:
 8004da6:	0c02      	lsrs	r2, r0, #16
 8004da8:	0412      	lsls	r2, r2, #16
 8004daa:	4603      	mov	r3, r0
 8004dac:	b9b2      	cbnz	r2, 8004ddc <__hi0bits+0x36>
 8004dae:	0403      	lsls	r3, r0, #16
 8004db0:	2010      	movs	r0, #16
 8004db2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004db6:	bf04      	itt	eq
 8004db8:	021b      	lsleq	r3, r3, #8
 8004dba:	3008      	addeq	r0, #8
 8004dbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004dc0:	bf04      	itt	eq
 8004dc2:	011b      	lsleq	r3, r3, #4
 8004dc4:	3004      	addeq	r0, #4
 8004dc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004dca:	bf04      	itt	eq
 8004dcc:	009b      	lsleq	r3, r3, #2
 8004dce:	3002      	addeq	r0, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	db06      	blt.n	8004de2 <__hi0bits+0x3c>
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	d503      	bpl.n	8004de0 <__hi0bits+0x3a>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	4770      	bx	lr
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e7e8      	b.n	8004db2 <__hi0bits+0xc>
 8004de0:	2020      	movs	r0, #32
 8004de2:	4770      	bx	lr

08004de4 <__lo0bits>:
 8004de4:	6803      	ldr	r3, [r0, #0]
 8004de6:	f013 0207 	ands.w	r2, r3, #7
 8004dea:	4601      	mov	r1, r0
 8004dec:	d00b      	beq.n	8004e06 <__lo0bits+0x22>
 8004dee:	07da      	lsls	r2, r3, #31
 8004df0:	d423      	bmi.n	8004e3a <__lo0bits+0x56>
 8004df2:	0798      	lsls	r0, r3, #30
 8004df4:	bf49      	itett	mi
 8004df6:	085b      	lsrmi	r3, r3, #1
 8004df8:	089b      	lsrpl	r3, r3, #2
 8004dfa:	2001      	movmi	r0, #1
 8004dfc:	600b      	strmi	r3, [r1, #0]
 8004dfe:	bf5c      	itt	pl
 8004e00:	600b      	strpl	r3, [r1, #0]
 8004e02:	2002      	movpl	r0, #2
 8004e04:	4770      	bx	lr
 8004e06:	b298      	uxth	r0, r3
 8004e08:	b9a8      	cbnz	r0, 8004e36 <__lo0bits+0x52>
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	2010      	movs	r0, #16
 8004e0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e12:	bf04      	itt	eq
 8004e14:	0a1b      	lsreq	r3, r3, #8
 8004e16:	3008      	addeq	r0, #8
 8004e18:	071a      	lsls	r2, r3, #28
 8004e1a:	bf04      	itt	eq
 8004e1c:	091b      	lsreq	r3, r3, #4
 8004e1e:	3004      	addeq	r0, #4
 8004e20:	079a      	lsls	r2, r3, #30
 8004e22:	bf04      	itt	eq
 8004e24:	089b      	lsreq	r3, r3, #2
 8004e26:	3002      	addeq	r0, #2
 8004e28:	07da      	lsls	r2, r3, #31
 8004e2a:	d402      	bmi.n	8004e32 <__lo0bits+0x4e>
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	d006      	beq.n	8004e3e <__lo0bits+0x5a>
 8004e30:	3001      	adds	r0, #1
 8004e32:	600b      	str	r3, [r1, #0]
 8004e34:	4770      	bx	lr
 8004e36:	4610      	mov	r0, r2
 8004e38:	e7e9      	b.n	8004e0e <__lo0bits+0x2a>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	4770      	bx	lr
 8004e3e:	2020      	movs	r0, #32
 8004e40:	4770      	bx	lr

08004e42 <__i2b>:
 8004e42:	b510      	push	{r4, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	2101      	movs	r1, #1
 8004e48:	f7ff ff27 	bl	8004c9a <_Balloc>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	6144      	str	r4, [r0, #20]
 8004e50:	6102      	str	r2, [r0, #16]
 8004e52:	bd10      	pop	{r4, pc}

08004e54 <__multiply>:
 8004e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	4614      	mov	r4, r2
 8004e5a:	690a      	ldr	r2, [r1, #16]
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	bfb8      	it	lt
 8004e62:	460b      	movlt	r3, r1
 8004e64:	4688      	mov	r8, r1
 8004e66:	bfbc      	itt	lt
 8004e68:	46a0      	movlt	r8, r4
 8004e6a:	461c      	movlt	r4, r3
 8004e6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004e70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004e74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004e7c:	eb07 0609 	add.w	r6, r7, r9
 8004e80:	42b3      	cmp	r3, r6
 8004e82:	bfb8      	it	lt
 8004e84:	3101      	addlt	r1, #1
 8004e86:	f7ff ff08 	bl	8004c9a <_Balloc>
 8004e8a:	f100 0514 	add.w	r5, r0, #20
 8004e8e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004e92:	462b      	mov	r3, r5
 8004e94:	2200      	movs	r2, #0
 8004e96:	4573      	cmp	r3, lr
 8004e98:	d316      	bcc.n	8004ec8 <__multiply+0x74>
 8004e9a:	f104 0214 	add.w	r2, r4, #20
 8004e9e:	f108 0114 	add.w	r1, r8, #20
 8004ea2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004ea6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d80c      	bhi.n	8004ece <__multiply+0x7a>
 8004eb4:	2e00      	cmp	r6, #0
 8004eb6:	dd03      	ble.n	8004ec0 <__multiply+0x6c>
 8004eb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d05d      	beq.n	8004f7c <__multiply+0x128>
 8004ec0:	6106      	str	r6, [r0, #16]
 8004ec2:	b003      	add	sp, #12
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	f843 2b04 	str.w	r2, [r3], #4
 8004ecc:	e7e3      	b.n	8004e96 <__multiply+0x42>
 8004ece:	f8b2 b000 	ldrh.w	fp, [r2]
 8004ed2:	f1bb 0f00 	cmp.w	fp, #0
 8004ed6:	d023      	beq.n	8004f20 <__multiply+0xcc>
 8004ed8:	4689      	mov	r9, r1
 8004eda:	46ac      	mov	ip, r5
 8004edc:	f04f 0800 	mov.w	r8, #0
 8004ee0:	f859 4b04 	ldr.w	r4, [r9], #4
 8004ee4:	f8dc a000 	ldr.w	sl, [ip]
 8004ee8:	b2a3      	uxth	r3, r4
 8004eea:	fa1f fa8a 	uxth.w	sl, sl
 8004eee:	fb0b a303 	mla	r3, fp, r3, sl
 8004ef2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ef6:	f8dc 4000 	ldr.w	r4, [ip]
 8004efa:	4443      	add	r3, r8
 8004efc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004f00:	fb0b 840a 	mla	r4, fp, sl, r8
 8004f04:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004f08:	46e2      	mov	sl, ip
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004f10:	454f      	cmp	r7, r9
 8004f12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004f16:	f84a 3b04 	str.w	r3, [sl], #4
 8004f1a:	d82b      	bhi.n	8004f74 <__multiply+0x120>
 8004f1c:	f8cc 8004 	str.w	r8, [ip, #4]
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004f26:	3204      	adds	r2, #4
 8004f28:	f1ba 0f00 	cmp.w	sl, #0
 8004f2c:	d020      	beq.n	8004f70 <__multiply+0x11c>
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	4689      	mov	r9, r1
 8004f32:	46a8      	mov	r8, r5
 8004f34:	f04f 0b00 	mov.w	fp, #0
 8004f38:	f8b9 c000 	ldrh.w	ip, [r9]
 8004f3c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004f40:	fb0a 440c 	mla	r4, sl, ip, r4
 8004f44:	445c      	add	r4, fp
 8004f46:	46c4      	mov	ip, r8
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004f4e:	f84c 3b04 	str.w	r3, [ip], #4
 8004f52:	f859 3b04 	ldr.w	r3, [r9], #4
 8004f56:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	fb0a b303 	mla	r3, sl, r3, fp
 8004f60:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004f64:	454f      	cmp	r7, r9
 8004f66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004f6a:	d805      	bhi.n	8004f78 <__multiply+0x124>
 8004f6c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004f70:	3504      	adds	r5, #4
 8004f72:	e79b      	b.n	8004eac <__multiply+0x58>
 8004f74:	46d4      	mov	ip, sl
 8004f76:	e7b3      	b.n	8004ee0 <__multiply+0x8c>
 8004f78:	46e0      	mov	r8, ip
 8004f7a:	e7dd      	b.n	8004f38 <__multiply+0xe4>
 8004f7c:	3e01      	subs	r6, #1
 8004f7e:	e799      	b.n	8004eb4 <__multiply+0x60>

08004f80 <__pow5mult>:
 8004f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f84:	4615      	mov	r5, r2
 8004f86:	f012 0203 	ands.w	r2, r2, #3
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	460f      	mov	r7, r1
 8004f8e:	d007      	beq.n	8004fa0 <__pow5mult+0x20>
 8004f90:	3a01      	subs	r2, #1
 8004f92:	4c21      	ldr	r4, [pc, #132]	; (8005018 <__pow5mult+0x98>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f9a:	f7ff fec9 	bl	8004d30 <__multadd>
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	10ad      	asrs	r5, r5, #2
 8004fa2:	d035      	beq.n	8005010 <__pow5mult+0x90>
 8004fa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004fa6:	b93c      	cbnz	r4, 8004fb8 <__pow5mult+0x38>
 8004fa8:	2010      	movs	r0, #16
 8004faa:	f7ff fe63 	bl	8004c74 <malloc>
 8004fae:	6270      	str	r0, [r6, #36]	; 0x24
 8004fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fb4:	6004      	str	r4, [r0, #0]
 8004fb6:	60c4      	str	r4, [r0, #12]
 8004fb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004fbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fc0:	b94c      	cbnz	r4, 8004fd6 <__pow5mult+0x56>
 8004fc2:	f240 2171 	movw	r1, #625	; 0x271
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7ff ff3b 	bl	8004e42 <__i2b>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8c8 0008 	str.w	r0, [r8, #8]
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	6003      	str	r3, [r0, #0]
 8004fd6:	f04f 0800 	mov.w	r8, #0
 8004fda:	07eb      	lsls	r3, r5, #31
 8004fdc:	d50a      	bpl.n	8004ff4 <__pow5mult+0x74>
 8004fde:	4639      	mov	r1, r7
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7ff ff36 	bl	8004e54 <__multiply>
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4681      	mov	r9, r0
 8004fec:	4630      	mov	r0, r6
 8004fee:	f7ff fe88 	bl	8004d02 <_Bfree>
 8004ff2:	464f      	mov	r7, r9
 8004ff4:	106d      	asrs	r5, r5, #1
 8004ff6:	d00b      	beq.n	8005010 <__pow5mult+0x90>
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	b938      	cbnz	r0, 800500c <__pow5mult+0x8c>
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4621      	mov	r1, r4
 8005000:	4630      	mov	r0, r6
 8005002:	f7ff ff27 	bl	8004e54 <__multiply>
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	f8c0 8000 	str.w	r8, [r0]
 800500c:	4604      	mov	r4, r0
 800500e:	e7e4      	b.n	8004fda <__pow5mult+0x5a>
 8005010:	4638      	mov	r0, r7
 8005012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005016:	bf00      	nop
 8005018:	080062a0 	.word	0x080062a0

0800501c <__lshift>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	6849      	ldr	r1, [r1, #4]
 800502a:	eb0a 0903 	add.w	r9, sl, r3
 800502e:	68a3      	ldr	r3, [r4, #8]
 8005030:	4607      	mov	r7, r0
 8005032:	4616      	mov	r6, r2
 8005034:	f109 0501 	add.w	r5, r9, #1
 8005038:	42ab      	cmp	r3, r5
 800503a:	db32      	blt.n	80050a2 <__lshift+0x86>
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff fe2c 	bl	8004c9a <_Balloc>
 8005042:	2300      	movs	r3, #0
 8005044:	4680      	mov	r8, r0
 8005046:	f100 0114 	add.w	r1, r0, #20
 800504a:	461a      	mov	r2, r3
 800504c:	4553      	cmp	r3, sl
 800504e:	db2b      	blt.n	80050a8 <__lshift+0x8c>
 8005050:	6920      	ldr	r0, [r4, #16]
 8005052:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005056:	f104 0314 	add.w	r3, r4, #20
 800505a:	f016 021f 	ands.w	r2, r6, #31
 800505e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005062:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005066:	d025      	beq.n	80050b4 <__lshift+0x98>
 8005068:	f1c2 0e20 	rsb	lr, r2, #32
 800506c:	2000      	movs	r0, #0
 800506e:	681e      	ldr	r6, [r3, #0]
 8005070:	468a      	mov	sl, r1
 8005072:	4096      	lsls	r6, r2
 8005074:	4330      	orrs	r0, r6
 8005076:	f84a 0b04 	str.w	r0, [sl], #4
 800507a:	f853 0b04 	ldr.w	r0, [r3], #4
 800507e:	459c      	cmp	ip, r3
 8005080:	fa20 f00e 	lsr.w	r0, r0, lr
 8005084:	d814      	bhi.n	80050b0 <__lshift+0x94>
 8005086:	6048      	str	r0, [r1, #4]
 8005088:	b108      	cbz	r0, 800508e <__lshift+0x72>
 800508a:	f109 0502 	add.w	r5, r9, #2
 800508e:	3d01      	subs	r5, #1
 8005090:	4638      	mov	r0, r7
 8005092:	f8c8 5010 	str.w	r5, [r8, #16]
 8005096:	4621      	mov	r1, r4
 8005098:	f7ff fe33 	bl	8004d02 <_Bfree>
 800509c:	4640      	mov	r0, r8
 800509e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a2:	3101      	adds	r1, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	e7c7      	b.n	8005038 <__lshift+0x1c>
 80050a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80050ac:	3301      	adds	r3, #1
 80050ae:	e7cd      	b.n	800504c <__lshift+0x30>
 80050b0:	4651      	mov	r1, sl
 80050b2:	e7dc      	b.n	800506e <__lshift+0x52>
 80050b4:	3904      	subs	r1, #4
 80050b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80050be:	459c      	cmp	ip, r3
 80050c0:	d8f9      	bhi.n	80050b6 <__lshift+0x9a>
 80050c2:	e7e4      	b.n	800508e <__lshift+0x72>

080050c4 <__mcmp>:
 80050c4:	6903      	ldr	r3, [r0, #16]
 80050c6:	690a      	ldr	r2, [r1, #16]
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	b530      	push	{r4, r5, lr}
 80050cc:	d10c      	bne.n	80050e8 <__mcmp+0x24>
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	3014      	adds	r0, #20
 80050d2:	3114      	adds	r1, #20
 80050d4:	1884      	adds	r4, r0, r2
 80050d6:	4411      	add	r1, r2
 80050d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80050dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80050e0:	4295      	cmp	r5, r2
 80050e2:	d003      	beq.n	80050ec <__mcmp+0x28>
 80050e4:	d305      	bcc.n	80050f2 <__mcmp+0x2e>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd30      	pop	{r4, r5, pc}
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d3f3      	bcc.n	80050d8 <__mcmp+0x14>
 80050f0:	e7fa      	b.n	80050e8 <__mcmp+0x24>
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	e7f7      	b.n	80050e8 <__mcmp+0x24>

080050f8 <__mdiff>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	460d      	mov	r5, r1
 80050fe:	4607      	mov	r7, r0
 8005100:	4611      	mov	r1, r2
 8005102:	4628      	mov	r0, r5
 8005104:	4614      	mov	r4, r2
 8005106:	f7ff ffdd 	bl	80050c4 <__mcmp>
 800510a:	1e06      	subs	r6, r0, #0
 800510c:	d108      	bne.n	8005120 <__mdiff+0x28>
 800510e:	4631      	mov	r1, r6
 8005110:	4638      	mov	r0, r7
 8005112:	f7ff fdc2 	bl	8004c9a <_Balloc>
 8005116:	2301      	movs	r3, #1
 8005118:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	bfa4      	itt	ge
 8005122:	4623      	movge	r3, r4
 8005124:	462c      	movge	r4, r5
 8005126:	4638      	mov	r0, r7
 8005128:	6861      	ldr	r1, [r4, #4]
 800512a:	bfa6      	itte	ge
 800512c:	461d      	movge	r5, r3
 800512e:	2600      	movge	r6, #0
 8005130:	2601      	movlt	r6, #1
 8005132:	f7ff fdb2 	bl	8004c9a <_Balloc>
 8005136:	692b      	ldr	r3, [r5, #16]
 8005138:	60c6      	str	r6, [r0, #12]
 800513a:	6926      	ldr	r6, [r4, #16]
 800513c:	f105 0914 	add.w	r9, r5, #20
 8005140:	f104 0214 	add.w	r2, r4, #20
 8005144:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005148:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800514c:	f100 0514 	add.w	r5, r0, #20
 8005150:	f04f 0e00 	mov.w	lr, #0
 8005154:	f852 ab04 	ldr.w	sl, [r2], #4
 8005158:	f859 4b04 	ldr.w	r4, [r9], #4
 800515c:	fa1e f18a 	uxtah	r1, lr, sl
 8005160:	b2a3      	uxth	r3, r4
 8005162:	1ac9      	subs	r1, r1, r3
 8005164:	0c23      	lsrs	r3, r4, #16
 8005166:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800516a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800516e:	b289      	uxth	r1, r1
 8005170:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005174:	45c8      	cmp	r8, r9
 8005176:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800517a:	4694      	mov	ip, r2
 800517c:	f845 3b04 	str.w	r3, [r5], #4
 8005180:	d8e8      	bhi.n	8005154 <__mdiff+0x5c>
 8005182:	45bc      	cmp	ip, r7
 8005184:	d304      	bcc.n	8005190 <__mdiff+0x98>
 8005186:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800518a:	b183      	cbz	r3, 80051ae <__mdiff+0xb6>
 800518c:	6106      	str	r6, [r0, #16]
 800518e:	e7c5      	b.n	800511c <__mdiff+0x24>
 8005190:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005194:	fa1e f381 	uxtah	r3, lr, r1
 8005198:	141a      	asrs	r2, r3, #16
 800519a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800519e:	b29b      	uxth	r3, r3
 80051a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80051a8:	f845 3b04 	str.w	r3, [r5], #4
 80051ac:	e7e9      	b.n	8005182 <__mdiff+0x8a>
 80051ae:	3e01      	subs	r6, #1
 80051b0:	e7e9      	b.n	8005186 <__mdiff+0x8e>

080051b2 <__d2b>:
 80051b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051b6:	460e      	mov	r6, r1
 80051b8:	2101      	movs	r1, #1
 80051ba:	ec59 8b10 	vmov	r8, r9, d0
 80051be:	4615      	mov	r5, r2
 80051c0:	f7ff fd6b 	bl	8004c9a <_Balloc>
 80051c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80051c8:	4607      	mov	r7, r0
 80051ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051ce:	bb34      	cbnz	r4, 800521e <__d2b+0x6c>
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f1b8 0300 	subs.w	r3, r8, #0
 80051d6:	d027      	beq.n	8005228 <__d2b+0x76>
 80051d8:	a802      	add	r0, sp, #8
 80051da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80051de:	f7ff fe01 	bl	8004de4 <__lo0bits>
 80051e2:	9900      	ldr	r1, [sp, #0]
 80051e4:	b1f0      	cbz	r0, 8005224 <__d2b+0x72>
 80051e6:	9a01      	ldr	r2, [sp, #4]
 80051e8:	f1c0 0320 	rsb	r3, r0, #32
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	430b      	orrs	r3, r1
 80051f2:	40c2      	lsrs	r2, r0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	9201      	str	r2, [sp, #4]
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf14      	ite	ne
 8005200:	2102      	movne	r1, #2
 8005202:	2101      	moveq	r1, #1
 8005204:	6139      	str	r1, [r7, #16]
 8005206:	b1c4      	cbz	r4, 800523a <__d2b+0x88>
 8005208:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800520c:	4404      	add	r4, r0
 800520e:	6034      	str	r4, [r6, #0]
 8005210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005214:	6028      	str	r0, [r5, #0]
 8005216:	4638      	mov	r0, r7
 8005218:	b003      	add	sp, #12
 800521a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800521e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005222:	e7d5      	b.n	80051d0 <__d2b+0x1e>
 8005224:	6179      	str	r1, [r7, #20]
 8005226:	e7e7      	b.n	80051f8 <__d2b+0x46>
 8005228:	a801      	add	r0, sp, #4
 800522a:	f7ff fddb 	bl	8004de4 <__lo0bits>
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	2101      	movs	r1, #1
 8005234:	6139      	str	r1, [r7, #16]
 8005236:	3020      	adds	r0, #32
 8005238:	e7e5      	b.n	8005206 <__d2b+0x54>
 800523a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800523e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005242:	6030      	str	r0, [r6, #0]
 8005244:	6918      	ldr	r0, [r3, #16]
 8005246:	f7ff fdae 	bl	8004da6 <__hi0bits>
 800524a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800524e:	e7e1      	b.n	8005214 <__d2b+0x62>

08005250 <_calloc_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	fb02 f401 	mul.w	r4, r2, r1
 8005256:	4621      	mov	r1, r4
 8005258:	f000 f856 	bl	8005308 <_malloc_r>
 800525c:	4605      	mov	r5, r0
 800525e:	b118      	cbz	r0, 8005268 <_calloc_r+0x18>
 8005260:	4622      	mov	r2, r4
 8005262:	2100      	movs	r1, #0
 8005264:	f7fe f9d6 	bl	8003614 <memset>
 8005268:	4628      	mov	r0, r5
 800526a:	bd38      	pop	{r3, r4, r5, pc}

0800526c <_free_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4605      	mov	r5, r0
 8005270:	2900      	cmp	r1, #0
 8005272:	d045      	beq.n	8005300 <_free_r+0x94>
 8005274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005278:	1f0c      	subs	r4, r1, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	bfb8      	it	lt
 800527e:	18e4      	addlt	r4, r4, r3
 8005280:	f000 fec3 	bl	800600a <__malloc_lock>
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <_free_r+0x98>)
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	4610      	mov	r0, r2
 800528a:	b933      	cbnz	r3, 800529a <_free_r+0x2e>
 800528c:	6063      	str	r3, [r4, #4]
 800528e:	6014      	str	r4, [r2, #0]
 8005290:	4628      	mov	r0, r5
 8005292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005296:	f000 beb9 	b.w	800600c <__malloc_unlock>
 800529a:	42a3      	cmp	r3, r4
 800529c:	d90c      	bls.n	80052b8 <_free_r+0x4c>
 800529e:	6821      	ldr	r1, [r4, #0]
 80052a0:	1862      	adds	r2, r4, r1
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bf04      	itt	eq
 80052a6:	681a      	ldreq	r2, [r3, #0]
 80052a8:	685b      	ldreq	r3, [r3, #4]
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	bf04      	itt	eq
 80052ae:	1852      	addeq	r2, r2, r1
 80052b0:	6022      	streq	r2, [r4, #0]
 80052b2:	6004      	str	r4, [r0, #0]
 80052b4:	e7ec      	b.n	8005290 <_free_r+0x24>
 80052b6:	4613      	mov	r3, r2
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	b10a      	cbz	r2, 80052c0 <_free_r+0x54>
 80052bc:	42a2      	cmp	r2, r4
 80052be:	d9fa      	bls.n	80052b6 <_free_r+0x4a>
 80052c0:	6819      	ldr	r1, [r3, #0]
 80052c2:	1858      	adds	r0, r3, r1
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d10b      	bne.n	80052e0 <_free_r+0x74>
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	4401      	add	r1, r0
 80052cc:	1858      	adds	r0, r3, r1
 80052ce:	4282      	cmp	r2, r0
 80052d0:	6019      	str	r1, [r3, #0]
 80052d2:	d1dd      	bne.n	8005290 <_free_r+0x24>
 80052d4:	6810      	ldr	r0, [r2, #0]
 80052d6:	6852      	ldr	r2, [r2, #4]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	4401      	add	r1, r0
 80052dc:	6019      	str	r1, [r3, #0]
 80052de:	e7d7      	b.n	8005290 <_free_r+0x24>
 80052e0:	d902      	bls.n	80052e8 <_free_r+0x7c>
 80052e2:	230c      	movs	r3, #12
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	e7d3      	b.n	8005290 <_free_r+0x24>
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	1821      	adds	r1, r4, r0
 80052ec:	428a      	cmp	r2, r1
 80052ee:	bf04      	itt	eq
 80052f0:	6811      	ldreq	r1, [r2, #0]
 80052f2:	6852      	ldreq	r2, [r2, #4]
 80052f4:	6062      	str	r2, [r4, #4]
 80052f6:	bf04      	itt	eq
 80052f8:	1809      	addeq	r1, r1, r0
 80052fa:	6021      	streq	r1, [r4, #0]
 80052fc:	605c      	str	r4, [r3, #4]
 80052fe:	e7c7      	b.n	8005290 <_free_r+0x24>
 8005300:	bd38      	pop	{r3, r4, r5, pc}
 8005302:	bf00      	nop
 8005304:	20000210 	.word	0x20000210

08005308 <_malloc_r>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	1ccd      	adds	r5, r1, #3
 800530c:	f025 0503 	bic.w	r5, r5, #3
 8005310:	3508      	adds	r5, #8
 8005312:	2d0c      	cmp	r5, #12
 8005314:	bf38      	it	cc
 8005316:	250c      	movcc	r5, #12
 8005318:	2d00      	cmp	r5, #0
 800531a:	4606      	mov	r6, r0
 800531c:	db01      	blt.n	8005322 <_malloc_r+0x1a>
 800531e:	42a9      	cmp	r1, r5
 8005320:	d903      	bls.n	800532a <_malloc_r+0x22>
 8005322:	230c      	movs	r3, #12
 8005324:	6033      	str	r3, [r6, #0]
 8005326:	2000      	movs	r0, #0
 8005328:	bd70      	pop	{r4, r5, r6, pc}
 800532a:	f000 fe6e 	bl	800600a <__malloc_lock>
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <_malloc_r+0xac>)
 8005330:	6814      	ldr	r4, [r2, #0]
 8005332:	4621      	mov	r1, r4
 8005334:	b991      	cbnz	r1, 800535c <_malloc_r+0x54>
 8005336:	4c20      	ldr	r4, [pc, #128]	; (80053b8 <_malloc_r+0xb0>)
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	b91b      	cbnz	r3, 8005344 <_malloc_r+0x3c>
 800533c:	4630      	mov	r0, r6
 800533e:	f000 fc91 	bl	8005c64 <_sbrk_r>
 8005342:	6020      	str	r0, [r4, #0]
 8005344:	4629      	mov	r1, r5
 8005346:	4630      	mov	r0, r6
 8005348:	f000 fc8c 	bl	8005c64 <_sbrk_r>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d124      	bne.n	800539a <_malloc_r+0x92>
 8005350:	230c      	movs	r3, #12
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	4630      	mov	r0, r6
 8005356:	f000 fe59 	bl	800600c <__malloc_unlock>
 800535a:	e7e4      	b.n	8005326 <_malloc_r+0x1e>
 800535c:	680b      	ldr	r3, [r1, #0]
 800535e:	1b5b      	subs	r3, r3, r5
 8005360:	d418      	bmi.n	8005394 <_malloc_r+0x8c>
 8005362:	2b0b      	cmp	r3, #11
 8005364:	d90f      	bls.n	8005386 <_malloc_r+0x7e>
 8005366:	600b      	str	r3, [r1, #0]
 8005368:	50cd      	str	r5, [r1, r3]
 800536a:	18cc      	adds	r4, r1, r3
 800536c:	4630      	mov	r0, r6
 800536e:	f000 fe4d 	bl	800600c <__malloc_unlock>
 8005372:	f104 000b 	add.w	r0, r4, #11
 8005376:	1d23      	adds	r3, r4, #4
 8005378:	f020 0007 	bic.w	r0, r0, #7
 800537c:	1ac3      	subs	r3, r0, r3
 800537e:	d0d3      	beq.n	8005328 <_malloc_r+0x20>
 8005380:	425a      	negs	r2, r3
 8005382:	50e2      	str	r2, [r4, r3]
 8005384:	e7d0      	b.n	8005328 <_malloc_r+0x20>
 8005386:	428c      	cmp	r4, r1
 8005388:	684b      	ldr	r3, [r1, #4]
 800538a:	bf16      	itet	ne
 800538c:	6063      	strne	r3, [r4, #4]
 800538e:	6013      	streq	r3, [r2, #0]
 8005390:	460c      	movne	r4, r1
 8005392:	e7eb      	b.n	800536c <_malloc_r+0x64>
 8005394:	460c      	mov	r4, r1
 8005396:	6849      	ldr	r1, [r1, #4]
 8005398:	e7cc      	b.n	8005334 <_malloc_r+0x2c>
 800539a:	1cc4      	adds	r4, r0, #3
 800539c:	f024 0403 	bic.w	r4, r4, #3
 80053a0:	42a0      	cmp	r0, r4
 80053a2:	d005      	beq.n	80053b0 <_malloc_r+0xa8>
 80053a4:	1a21      	subs	r1, r4, r0
 80053a6:	4630      	mov	r0, r6
 80053a8:	f000 fc5c 	bl	8005c64 <_sbrk_r>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d0cf      	beq.n	8005350 <_malloc_r+0x48>
 80053b0:	6025      	str	r5, [r4, #0]
 80053b2:	e7db      	b.n	800536c <_malloc_r+0x64>
 80053b4:	20000210 	.word	0x20000210
 80053b8:	20000214 	.word	0x20000214

080053bc <__ssputs_r>:
 80053bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c0:	688e      	ldr	r6, [r1, #8]
 80053c2:	429e      	cmp	r6, r3
 80053c4:	4682      	mov	sl, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	4690      	mov	r8, r2
 80053ca:	4699      	mov	r9, r3
 80053cc:	d837      	bhi.n	800543e <__ssputs_r+0x82>
 80053ce:	898a      	ldrh	r2, [r1, #12]
 80053d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053d4:	d031      	beq.n	800543a <__ssputs_r+0x7e>
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	6909      	ldr	r1, [r1, #16]
 80053da:	1a6f      	subs	r7, r5, r1
 80053dc:	6965      	ldr	r5, [r4, #20]
 80053de:	2302      	movs	r3, #2
 80053e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80053e8:	f109 0301 	add.w	r3, r9, #1
 80053ec:	443b      	add	r3, r7
 80053ee:	429d      	cmp	r5, r3
 80053f0:	bf38      	it	cc
 80053f2:	461d      	movcc	r5, r3
 80053f4:	0553      	lsls	r3, r2, #21
 80053f6:	d530      	bpl.n	800545a <__ssputs_r+0x9e>
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7ff ff85 	bl	8005308 <_malloc_r>
 80053fe:	4606      	mov	r6, r0
 8005400:	b950      	cbnz	r0, 8005418 <__ssputs_r+0x5c>
 8005402:	230c      	movs	r3, #12
 8005404:	f8ca 3000 	str.w	r3, [sl]
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	463a      	mov	r2, r7
 800541a:	6921      	ldr	r1, [r4, #16]
 800541c:	f7ff fc32 	bl	8004c84 <memcpy>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	6126      	str	r6, [r4, #16]
 800542e:	6165      	str	r5, [r4, #20]
 8005430:	443e      	add	r6, r7
 8005432:	1bed      	subs	r5, r5, r7
 8005434:	6026      	str	r6, [r4, #0]
 8005436:	60a5      	str	r5, [r4, #8]
 8005438:	464e      	mov	r6, r9
 800543a:	454e      	cmp	r6, r9
 800543c:	d900      	bls.n	8005440 <__ssputs_r+0x84>
 800543e:	464e      	mov	r6, r9
 8005440:	4632      	mov	r2, r6
 8005442:	4641      	mov	r1, r8
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	f000 fdc7 	bl	8005fd8 <memmove>
 800544a:	68a3      	ldr	r3, [r4, #8]
 800544c:	1b9b      	subs	r3, r3, r6
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	441e      	add	r6, r3
 8005454:	6026      	str	r6, [r4, #0]
 8005456:	2000      	movs	r0, #0
 8005458:	e7dc      	b.n	8005414 <__ssputs_r+0x58>
 800545a:	462a      	mov	r2, r5
 800545c:	f000 fdd7 	bl	800600e <_realloc_r>
 8005460:	4606      	mov	r6, r0
 8005462:	2800      	cmp	r0, #0
 8005464:	d1e2      	bne.n	800542c <__ssputs_r+0x70>
 8005466:	6921      	ldr	r1, [r4, #16]
 8005468:	4650      	mov	r0, sl
 800546a:	f7ff feff 	bl	800526c <_free_r>
 800546e:	e7c8      	b.n	8005402 <__ssputs_r+0x46>

08005470 <_svfiprintf_r>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	461d      	mov	r5, r3
 8005476:	898b      	ldrh	r3, [r1, #12]
 8005478:	061f      	lsls	r7, r3, #24
 800547a:	b09d      	sub	sp, #116	; 0x74
 800547c:	4680      	mov	r8, r0
 800547e:	460c      	mov	r4, r1
 8005480:	4616      	mov	r6, r2
 8005482:	d50f      	bpl.n	80054a4 <_svfiprintf_r+0x34>
 8005484:	690b      	ldr	r3, [r1, #16]
 8005486:	b96b      	cbnz	r3, 80054a4 <_svfiprintf_r+0x34>
 8005488:	2140      	movs	r1, #64	; 0x40
 800548a:	f7ff ff3d 	bl	8005308 <_malloc_r>
 800548e:	6020      	str	r0, [r4, #0]
 8005490:	6120      	str	r0, [r4, #16]
 8005492:	b928      	cbnz	r0, 80054a0 <_svfiprintf_r+0x30>
 8005494:	230c      	movs	r3, #12
 8005496:	f8c8 3000 	str.w	r3, [r8]
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	e0c8      	b.n	8005632 <_svfiprintf_r+0x1c2>
 80054a0:	2340      	movs	r3, #64	; 0x40
 80054a2:	6163      	str	r3, [r4, #20]
 80054a4:	2300      	movs	r3, #0
 80054a6:	9309      	str	r3, [sp, #36]	; 0x24
 80054a8:	2320      	movs	r3, #32
 80054aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ae:	2330      	movs	r3, #48	; 0x30
 80054b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b4:	9503      	str	r5, [sp, #12]
 80054b6:	f04f 0b01 	mov.w	fp, #1
 80054ba:	4637      	mov	r7, r6
 80054bc:	463d      	mov	r5, r7
 80054be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054c2:	b10b      	cbz	r3, 80054c8 <_svfiprintf_r+0x58>
 80054c4:	2b25      	cmp	r3, #37	; 0x25
 80054c6:	d13e      	bne.n	8005546 <_svfiprintf_r+0xd6>
 80054c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80054cc:	d00b      	beq.n	80054e6 <_svfiprintf_r+0x76>
 80054ce:	4653      	mov	r3, sl
 80054d0:	4632      	mov	r2, r6
 80054d2:	4621      	mov	r1, r4
 80054d4:	4640      	mov	r0, r8
 80054d6:	f7ff ff71 	bl	80053bc <__ssputs_r>
 80054da:	3001      	adds	r0, #1
 80054dc:	f000 80a4 	beq.w	8005628 <_svfiprintf_r+0x1b8>
 80054e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e2:	4453      	add	r3, sl
 80054e4:	9309      	str	r3, [sp, #36]	; 0x24
 80054e6:	783b      	ldrb	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 809d 	beq.w	8005628 <_svfiprintf_r+0x1b8>
 80054ee:	2300      	movs	r3, #0
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054f8:	9304      	str	r3, [sp, #16]
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005500:	931a      	str	r3, [sp, #104]	; 0x68
 8005502:	462f      	mov	r7, r5
 8005504:	2205      	movs	r2, #5
 8005506:	f817 1b01 	ldrb.w	r1, [r7], #1
 800550a:	4850      	ldr	r0, [pc, #320]	; (800564c <_svfiprintf_r+0x1dc>)
 800550c:	f7fa fe68 	bl	80001e0 <memchr>
 8005510:	9b04      	ldr	r3, [sp, #16]
 8005512:	b9d0      	cbnz	r0, 800554a <_svfiprintf_r+0xda>
 8005514:	06d9      	lsls	r1, r3, #27
 8005516:	bf44      	itt	mi
 8005518:	2220      	movmi	r2, #32
 800551a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800551e:	071a      	lsls	r2, r3, #28
 8005520:	bf44      	itt	mi
 8005522:	222b      	movmi	r2, #43	; 0x2b
 8005524:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005528:	782a      	ldrb	r2, [r5, #0]
 800552a:	2a2a      	cmp	r2, #42	; 0x2a
 800552c:	d015      	beq.n	800555a <_svfiprintf_r+0xea>
 800552e:	9a07      	ldr	r2, [sp, #28]
 8005530:	462f      	mov	r7, r5
 8005532:	2000      	movs	r0, #0
 8005534:	250a      	movs	r5, #10
 8005536:	4639      	mov	r1, r7
 8005538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800553c:	3b30      	subs	r3, #48	; 0x30
 800553e:	2b09      	cmp	r3, #9
 8005540:	d94d      	bls.n	80055de <_svfiprintf_r+0x16e>
 8005542:	b1b8      	cbz	r0, 8005574 <_svfiprintf_r+0x104>
 8005544:	e00f      	b.n	8005566 <_svfiprintf_r+0xf6>
 8005546:	462f      	mov	r7, r5
 8005548:	e7b8      	b.n	80054bc <_svfiprintf_r+0x4c>
 800554a:	4a40      	ldr	r2, [pc, #256]	; (800564c <_svfiprintf_r+0x1dc>)
 800554c:	1a80      	subs	r0, r0, r2
 800554e:	fa0b f000 	lsl.w	r0, fp, r0
 8005552:	4318      	orrs	r0, r3
 8005554:	9004      	str	r0, [sp, #16]
 8005556:	463d      	mov	r5, r7
 8005558:	e7d3      	b.n	8005502 <_svfiprintf_r+0x92>
 800555a:	9a03      	ldr	r2, [sp, #12]
 800555c:	1d11      	adds	r1, r2, #4
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	9103      	str	r1, [sp, #12]
 8005562:	2a00      	cmp	r2, #0
 8005564:	db01      	blt.n	800556a <_svfiprintf_r+0xfa>
 8005566:	9207      	str	r2, [sp, #28]
 8005568:	e004      	b.n	8005574 <_svfiprintf_r+0x104>
 800556a:	4252      	negs	r2, r2
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	9207      	str	r2, [sp, #28]
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	783b      	ldrb	r3, [r7, #0]
 8005576:	2b2e      	cmp	r3, #46	; 0x2e
 8005578:	d10c      	bne.n	8005594 <_svfiprintf_r+0x124>
 800557a:	787b      	ldrb	r3, [r7, #1]
 800557c:	2b2a      	cmp	r3, #42	; 0x2a
 800557e:	d133      	bne.n	80055e8 <_svfiprintf_r+0x178>
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	1d1a      	adds	r2, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	9203      	str	r2, [sp, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	bfb8      	it	lt
 800558c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005590:	3702      	adds	r7, #2
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	4d2e      	ldr	r5, [pc, #184]	; (8005650 <_svfiprintf_r+0x1e0>)
 8005596:	7839      	ldrb	r1, [r7, #0]
 8005598:	2203      	movs	r2, #3
 800559a:	4628      	mov	r0, r5
 800559c:	f7fa fe20 	bl	80001e0 <memchr>
 80055a0:	b138      	cbz	r0, 80055b2 <_svfiprintf_r+0x142>
 80055a2:	2340      	movs	r3, #64	; 0x40
 80055a4:	1b40      	subs	r0, r0, r5
 80055a6:	fa03 f000 	lsl.w	r0, r3, r0
 80055aa:	9b04      	ldr	r3, [sp, #16]
 80055ac:	4303      	orrs	r3, r0
 80055ae:	3701      	adds	r7, #1
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	7839      	ldrb	r1, [r7, #0]
 80055b4:	4827      	ldr	r0, [pc, #156]	; (8005654 <_svfiprintf_r+0x1e4>)
 80055b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ba:	2206      	movs	r2, #6
 80055bc:	1c7e      	adds	r6, r7, #1
 80055be:	f7fa fe0f 	bl	80001e0 <memchr>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d038      	beq.n	8005638 <_svfiprintf_r+0x1c8>
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <_svfiprintf_r+0x1e8>)
 80055c8:	bb13      	cbnz	r3, 8005610 <_svfiprintf_r+0x1a0>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	3307      	adds	r3, #7
 80055ce:	f023 0307 	bic.w	r3, r3, #7
 80055d2:	3308      	adds	r3, #8
 80055d4:	9303      	str	r3, [sp, #12]
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	444b      	add	r3, r9
 80055da:	9309      	str	r3, [sp, #36]	; 0x24
 80055dc:	e76d      	b.n	80054ba <_svfiprintf_r+0x4a>
 80055de:	fb05 3202 	mla	r2, r5, r2, r3
 80055e2:	2001      	movs	r0, #1
 80055e4:	460f      	mov	r7, r1
 80055e6:	e7a6      	b.n	8005536 <_svfiprintf_r+0xc6>
 80055e8:	2300      	movs	r3, #0
 80055ea:	3701      	adds	r7, #1
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	4619      	mov	r1, r3
 80055f0:	250a      	movs	r5, #10
 80055f2:	4638      	mov	r0, r7
 80055f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f8:	3a30      	subs	r2, #48	; 0x30
 80055fa:	2a09      	cmp	r2, #9
 80055fc:	d903      	bls.n	8005606 <_svfiprintf_r+0x196>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0c8      	beq.n	8005594 <_svfiprintf_r+0x124>
 8005602:	9105      	str	r1, [sp, #20]
 8005604:	e7c6      	b.n	8005594 <_svfiprintf_r+0x124>
 8005606:	fb05 2101 	mla	r1, r5, r1, r2
 800560a:	2301      	movs	r3, #1
 800560c:	4607      	mov	r7, r0
 800560e:	e7f0      	b.n	80055f2 <_svfiprintf_r+0x182>
 8005610:	ab03      	add	r3, sp, #12
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	4622      	mov	r2, r4
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <_svfiprintf_r+0x1ec>)
 8005618:	a904      	add	r1, sp, #16
 800561a:	4640      	mov	r0, r8
 800561c:	f7fe f896 	bl	800374c <_printf_float>
 8005620:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005624:	4681      	mov	r9, r0
 8005626:	d1d6      	bne.n	80055d6 <_svfiprintf_r+0x166>
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	065b      	lsls	r3, r3, #25
 800562c:	f53f af35 	bmi.w	800549a <_svfiprintf_r+0x2a>
 8005630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005632:	b01d      	add	sp, #116	; 0x74
 8005634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005638:	ab03      	add	r3, sp, #12
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	4622      	mov	r2, r4
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <_svfiprintf_r+0x1ec>)
 8005640:	a904      	add	r1, sp, #16
 8005642:	4640      	mov	r0, r8
 8005644:	f7fe fb38 	bl	8003cb8 <_printf_i>
 8005648:	e7ea      	b.n	8005620 <_svfiprintf_r+0x1b0>
 800564a:	bf00      	nop
 800564c:	080062ac 	.word	0x080062ac
 8005650:	080062b2 	.word	0x080062b2
 8005654:	080062b6 	.word	0x080062b6
 8005658:	0800374d 	.word	0x0800374d
 800565c:	080053bd 	.word	0x080053bd

08005660 <_sungetc_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	1c4b      	adds	r3, r1, #1
 8005664:	4614      	mov	r4, r2
 8005666:	d103      	bne.n	8005670 <_sungetc_r+0x10>
 8005668:	f04f 35ff 	mov.w	r5, #4294967295
 800566c:	4628      	mov	r0, r5
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	8993      	ldrh	r3, [r2, #12]
 8005672:	f023 0320 	bic.w	r3, r3, #32
 8005676:	8193      	strh	r3, [r2, #12]
 8005678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567a:	6852      	ldr	r2, [r2, #4]
 800567c:	b2cd      	uxtb	r5, r1
 800567e:	b18b      	cbz	r3, 80056a4 <_sungetc_r+0x44>
 8005680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005682:	4293      	cmp	r3, r2
 8005684:	dd08      	ble.n	8005698 <_sungetc_r+0x38>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	1e5a      	subs	r2, r3, #1
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	3301      	adds	r3, #1
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	e7e9      	b.n	800566c <_sungetc_r+0xc>
 8005698:	4621      	mov	r1, r4
 800569a:	f000 fc3f 	bl	8005f1c <__submore>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0f1      	beq.n	8005686 <_sungetc_r+0x26>
 80056a2:	e7e1      	b.n	8005668 <_sungetc_r+0x8>
 80056a4:	6921      	ldr	r1, [r4, #16]
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	b151      	cbz	r1, 80056c0 <_sungetc_r+0x60>
 80056aa:	4299      	cmp	r1, r3
 80056ac:	d208      	bcs.n	80056c0 <_sungetc_r+0x60>
 80056ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80056b2:	42a9      	cmp	r1, r5
 80056b4:	d104      	bne.n	80056c0 <_sungetc_r+0x60>
 80056b6:	3b01      	subs	r3, #1
 80056b8:	3201      	adds	r2, #1
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	6062      	str	r2, [r4, #4]
 80056be:	e7d5      	b.n	800566c <_sungetc_r+0xc>
 80056c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80056c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c8:	6363      	str	r3, [r4, #52]	; 0x34
 80056ca:	2303      	movs	r3, #3
 80056cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80056ce:	4623      	mov	r3, r4
 80056d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7dc      	b.n	8005694 <_sungetc_r+0x34>

080056da <__ssrefill_r>:
 80056da:	b510      	push	{r4, lr}
 80056dc:	460c      	mov	r4, r1
 80056de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80056e0:	b169      	cbz	r1, 80056fe <__ssrefill_r+0x24>
 80056e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056e6:	4299      	cmp	r1, r3
 80056e8:	d001      	beq.n	80056ee <__ssrefill_r+0x14>
 80056ea:	f7ff fdbf 	bl	800526c <_free_r>
 80056ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056f0:	6063      	str	r3, [r4, #4]
 80056f2:	2000      	movs	r0, #0
 80056f4:	6360      	str	r0, [r4, #52]	; 0x34
 80056f6:	b113      	cbz	r3, 80056fe <__ssrefill_r+0x24>
 80056f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0320 	orr.w	r3, r3, #32
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	f04f 30ff 	mov.w	r0, #4294967295
 8005712:	e7f3      	b.n	80056fc <__ssrefill_r+0x22>

08005714 <__ssvfiscanf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800571c:	460c      	mov	r4, r1
 800571e:	2100      	movs	r1, #0
 8005720:	9144      	str	r1, [sp, #272]	; 0x110
 8005722:	9145      	str	r1, [sp, #276]	; 0x114
 8005724:	499f      	ldr	r1, [pc, #636]	; (80059a4 <__ssvfiscanf_r+0x290>)
 8005726:	91a0      	str	r1, [sp, #640]	; 0x280
 8005728:	f10d 0804 	add.w	r8, sp, #4
 800572c:	499e      	ldr	r1, [pc, #632]	; (80059a8 <__ssvfiscanf_r+0x294>)
 800572e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80059ac <__ssvfiscanf_r+0x298>
 8005732:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005736:	4606      	mov	r6, r0
 8005738:	4692      	mov	sl, r2
 800573a:	91a1      	str	r1, [sp, #644]	; 0x284
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	270a      	movs	r7, #10
 8005740:	f89a 3000 	ldrb.w	r3, [sl]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 812a 	beq.w	800599e <__ssvfiscanf_r+0x28a>
 800574a:	4655      	mov	r5, sl
 800574c:	f000 fc24 	bl	8005f98 <__locale_ctype_ptr>
 8005750:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005754:	4458      	add	r0, fp
 8005756:	7843      	ldrb	r3, [r0, #1]
 8005758:	f013 0308 	ands.w	r3, r3, #8
 800575c:	d01c      	beq.n	8005798 <__ssvfiscanf_r+0x84>
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	dd12      	ble.n	800578a <__ssvfiscanf_r+0x76>
 8005764:	f000 fc18 	bl	8005f98 <__locale_ctype_ptr>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	4410      	add	r0, r2
 800576e:	7842      	ldrb	r2, [r0, #1]
 8005770:	0712      	lsls	r2, r2, #28
 8005772:	d401      	bmi.n	8005778 <__ssvfiscanf_r+0x64>
 8005774:	46aa      	mov	sl, r5
 8005776:	e7e3      	b.n	8005740 <__ssvfiscanf_r+0x2c>
 8005778:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800577a:	3201      	adds	r2, #1
 800577c:	9245      	str	r2, [sp, #276]	; 0x114
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	3301      	adds	r3, #1
 8005782:	3a01      	subs	r2, #1
 8005784:	6062      	str	r2, [r4, #4]
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	e7e9      	b.n	800575e <__ssvfiscanf_r+0x4a>
 800578a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800578c:	4621      	mov	r1, r4
 800578e:	4630      	mov	r0, r6
 8005790:	4798      	blx	r3
 8005792:	2800      	cmp	r0, #0
 8005794:	d0e6      	beq.n	8005764 <__ssvfiscanf_r+0x50>
 8005796:	e7ed      	b.n	8005774 <__ssvfiscanf_r+0x60>
 8005798:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800579c:	f040 8082 	bne.w	80058a4 <__ssvfiscanf_r+0x190>
 80057a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80057a2:	9341      	str	r3, [sp, #260]	; 0x104
 80057a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80057a8:	2b2a      	cmp	r3, #42	; 0x2a
 80057aa:	d103      	bne.n	80057b4 <__ssvfiscanf_r+0xa0>
 80057ac:	2310      	movs	r3, #16
 80057ae:	9341      	str	r3, [sp, #260]	; 0x104
 80057b0:	f10a 0502 	add.w	r5, sl, #2
 80057b4:	46aa      	mov	sl, r5
 80057b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80057ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80057be:	2a09      	cmp	r2, #9
 80057c0:	d922      	bls.n	8005808 <__ssvfiscanf_r+0xf4>
 80057c2:	2203      	movs	r2, #3
 80057c4:	4879      	ldr	r0, [pc, #484]	; (80059ac <__ssvfiscanf_r+0x298>)
 80057c6:	f7fa fd0b 	bl	80001e0 <memchr>
 80057ca:	b138      	cbz	r0, 80057dc <__ssvfiscanf_r+0xc8>
 80057cc:	eba0 0309 	sub.w	r3, r0, r9
 80057d0:	2001      	movs	r0, #1
 80057d2:	4098      	lsls	r0, r3
 80057d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80057d6:	4318      	orrs	r0, r3
 80057d8:	9041      	str	r0, [sp, #260]	; 0x104
 80057da:	46aa      	mov	sl, r5
 80057dc:	f89a 3000 	ldrb.w	r3, [sl]
 80057e0:	2b67      	cmp	r3, #103	; 0x67
 80057e2:	f10a 0501 	add.w	r5, sl, #1
 80057e6:	d82b      	bhi.n	8005840 <__ssvfiscanf_r+0x12c>
 80057e8:	2b65      	cmp	r3, #101	; 0x65
 80057ea:	f080 809f 	bcs.w	800592c <__ssvfiscanf_r+0x218>
 80057ee:	2b47      	cmp	r3, #71	; 0x47
 80057f0:	d810      	bhi.n	8005814 <__ssvfiscanf_r+0x100>
 80057f2:	2b45      	cmp	r3, #69	; 0x45
 80057f4:	f080 809a 	bcs.w	800592c <__ssvfiscanf_r+0x218>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d06c      	beq.n	80058d6 <__ssvfiscanf_r+0x1c2>
 80057fc:	2b25      	cmp	r3, #37	; 0x25
 80057fe:	d051      	beq.n	80058a4 <__ssvfiscanf_r+0x190>
 8005800:	2303      	movs	r3, #3
 8005802:	9347      	str	r3, [sp, #284]	; 0x11c
 8005804:	9742      	str	r7, [sp, #264]	; 0x108
 8005806:	e027      	b.n	8005858 <__ssvfiscanf_r+0x144>
 8005808:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800580a:	fb07 1303 	mla	r3, r7, r3, r1
 800580e:	3b30      	subs	r3, #48	; 0x30
 8005810:	9343      	str	r3, [sp, #268]	; 0x10c
 8005812:	e7cf      	b.n	80057b4 <__ssvfiscanf_r+0xa0>
 8005814:	2b5b      	cmp	r3, #91	; 0x5b
 8005816:	d06a      	beq.n	80058ee <__ssvfiscanf_r+0x1da>
 8005818:	d80c      	bhi.n	8005834 <__ssvfiscanf_r+0x120>
 800581a:	2b58      	cmp	r3, #88	; 0x58
 800581c:	d1f0      	bne.n	8005800 <__ssvfiscanf_r+0xec>
 800581e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005824:	9241      	str	r2, [sp, #260]	; 0x104
 8005826:	2210      	movs	r2, #16
 8005828:	9242      	str	r2, [sp, #264]	; 0x108
 800582a:	2b6e      	cmp	r3, #110	; 0x6e
 800582c:	bf8c      	ite	hi
 800582e:	2304      	movhi	r3, #4
 8005830:	2303      	movls	r3, #3
 8005832:	e010      	b.n	8005856 <__ssvfiscanf_r+0x142>
 8005834:	2b63      	cmp	r3, #99	; 0x63
 8005836:	d065      	beq.n	8005904 <__ssvfiscanf_r+0x1f0>
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d1e1      	bne.n	8005800 <__ssvfiscanf_r+0xec>
 800583c:	9742      	str	r7, [sp, #264]	; 0x108
 800583e:	e7f4      	b.n	800582a <__ssvfiscanf_r+0x116>
 8005840:	2b70      	cmp	r3, #112	; 0x70
 8005842:	d04b      	beq.n	80058dc <__ssvfiscanf_r+0x1c8>
 8005844:	d826      	bhi.n	8005894 <__ssvfiscanf_r+0x180>
 8005846:	2b6e      	cmp	r3, #110	; 0x6e
 8005848:	d062      	beq.n	8005910 <__ssvfiscanf_r+0x1fc>
 800584a:	d84c      	bhi.n	80058e6 <__ssvfiscanf_r+0x1d2>
 800584c:	2b69      	cmp	r3, #105	; 0x69
 800584e:	d1d7      	bne.n	8005800 <__ssvfiscanf_r+0xec>
 8005850:	2300      	movs	r3, #0
 8005852:	9342      	str	r3, [sp, #264]	; 0x108
 8005854:	2303      	movs	r3, #3
 8005856:	9347      	str	r3, [sp, #284]	; 0x11c
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	dd68      	ble.n	8005930 <__ssvfiscanf_r+0x21c>
 800585e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005860:	0659      	lsls	r1, r3, #25
 8005862:	d407      	bmi.n	8005874 <__ssvfiscanf_r+0x160>
 8005864:	f000 fb98 	bl	8005f98 <__locale_ctype_ptr>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	4410      	add	r0, r2
 800586e:	7842      	ldrb	r2, [r0, #1]
 8005870:	0712      	lsls	r2, r2, #28
 8005872:	d464      	bmi.n	800593e <__ssvfiscanf_r+0x22a>
 8005874:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005876:	2b02      	cmp	r3, #2
 8005878:	dc73      	bgt.n	8005962 <__ssvfiscanf_r+0x24e>
 800587a:	466b      	mov	r3, sp
 800587c:	4622      	mov	r2, r4
 800587e:	a941      	add	r1, sp, #260	; 0x104
 8005880:	4630      	mov	r0, r6
 8005882:	f000 f897 	bl	80059b4 <_scanf_chars>
 8005886:	2801      	cmp	r0, #1
 8005888:	f000 8089 	beq.w	800599e <__ssvfiscanf_r+0x28a>
 800588c:	2802      	cmp	r0, #2
 800588e:	f47f af71 	bne.w	8005774 <__ssvfiscanf_r+0x60>
 8005892:	e01d      	b.n	80058d0 <__ssvfiscanf_r+0x1bc>
 8005894:	2b75      	cmp	r3, #117	; 0x75
 8005896:	d0d1      	beq.n	800583c <__ssvfiscanf_r+0x128>
 8005898:	2b78      	cmp	r3, #120	; 0x78
 800589a:	d0c0      	beq.n	800581e <__ssvfiscanf_r+0x10a>
 800589c:	2b73      	cmp	r3, #115	; 0x73
 800589e:	d1af      	bne.n	8005800 <__ssvfiscanf_r+0xec>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e7d8      	b.n	8005856 <__ssvfiscanf_r+0x142>
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	dd0c      	ble.n	80058c4 <__ssvfiscanf_r+0x1b0>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	455a      	cmp	r2, fp
 80058b0:	d175      	bne.n	800599e <__ssvfiscanf_r+0x28a>
 80058b2:	3301      	adds	r3, #1
 80058b4:	6862      	ldr	r2, [r4, #4]
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80058ba:	3a01      	subs	r2, #1
 80058bc:	3301      	adds	r3, #1
 80058be:	6062      	str	r2, [r4, #4]
 80058c0:	9345      	str	r3, [sp, #276]	; 0x114
 80058c2:	e757      	b.n	8005774 <__ssvfiscanf_r+0x60>
 80058c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80058c6:	4621      	mov	r1, r4
 80058c8:	4630      	mov	r0, r6
 80058ca:	4798      	blx	r3
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0ec      	beq.n	80058aa <__ssvfiscanf_r+0x196>
 80058d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d159      	bne.n	800598a <__ssvfiscanf_r+0x276>
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	e05c      	b.n	8005996 <__ssvfiscanf_r+0x282>
 80058dc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80058de:	f042 0220 	orr.w	r2, r2, #32
 80058e2:	9241      	str	r2, [sp, #260]	; 0x104
 80058e4:	e79b      	b.n	800581e <__ssvfiscanf_r+0x10a>
 80058e6:	2308      	movs	r3, #8
 80058e8:	9342      	str	r3, [sp, #264]	; 0x108
 80058ea:	2304      	movs	r3, #4
 80058ec:	e7b3      	b.n	8005856 <__ssvfiscanf_r+0x142>
 80058ee:	4629      	mov	r1, r5
 80058f0:	4640      	mov	r0, r8
 80058f2:	f000 f9c7 	bl	8005c84 <__sccl>
 80058f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80058f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fc:	9341      	str	r3, [sp, #260]	; 0x104
 80058fe:	4605      	mov	r5, r0
 8005900:	2301      	movs	r3, #1
 8005902:	e7a8      	b.n	8005856 <__ssvfiscanf_r+0x142>
 8005904:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590a:	9341      	str	r3, [sp, #260]	; 0x104
 800590c:	2300      	movs	r3, #0
 800590e:	e7a2      	b.n	8005856 <__ssvfiscanf_r+0x142>
 8005910:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005912:	06c3      	lsls	r3, r0, #27
 8005914:	f53f af2e 	bmi.w	8005774 <__ssvfiscanf_r+0x60>
 8005918:	9b00      	ldr	r3, [sp, #0]
 800591a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800591c:	1d19      	adds	r1, r3, #4
 800591e:	9100      	str	r1, [sp, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	07c0      	lsls	r0, r0, #31
 8005924:	bf4c      	ite	mi
 8005926:	801a      	strhmi	r2, [r3, #0]
 8005928:	601a      	strpl	r2, [r3, #0]
 800592a:	e723      	b.n	8005774 <__ssvfiscanf_r+0x60>
 800592c:	2305      	movs	r3, #5
 800592e:	e792      	b.n	8005856 <__ssvfiscanf_r+0x142>
 8005930:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005932:	4621      	mov	r1, r4
 8005934:	4630      	mov	r0, r6
 8005936:	4798      	blx	r3
 8005938:	2800      	cmp	r0, #0
 800593a:	d090      	beq.n	800585e <__ssvfiscanf_r+0x14a>
 800593c:	e7c8      	b.n	80058d0 <__ssvfiscanf_r+0x1bc>
 800593e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005940:	3201      	adds	r2, #1
 8005942:	9245      	str	r2, [sp, #276]	; 0x114
 8005944:	6862      	ldr	r2, [r4, #4]
 8005946:	3a01      	subs	r2, #1
 8005948:	2a00      	cmp	r2, #0
 800594a:	6062      	str	r2, [r4, #4]
 800594c:	dd02      	ble.n	8005954 <__ssvfiscanf_r+0x240>
 800594e:	3301      	adds	r3, #1
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	e787      	b.n	8005864 <__ssvfiscanf_r+0x150>
 8005954:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005956:	4621      	mov	r1, r4
 8005958:	4630      	mov	r0, r6
 800595a:	4798      	blx	r3
 800595c:	2800      	cmp	r0, #0
 800595e:	d081      	beq.n	8005864 <__ssvfiscanf_r+0x150>
 8005960:	e7b6      	b.n	80058d0 <__ssvfiscanf_r+0x1bc>
 8005962:	2b04      	cmp	r3, #4
 8005964:	dc06      	bgt.n	8005974 <__ssvfiscanf_r+0x260>
 8005966:	466b      	mov	r3, sp
 8005968:	4622      	mov	r2, r4
 800596a:	a941      	add	r1, sp, #260	; 0x104
 800596c:	4630      	mov	r0, r6
 800596e:	f000 f885 	bl	8005a7c <_scanf_i>
 8005972:	e788      	b.n	8005886 <__ssvfiscanf_r+0x172>
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <__ssvfiscanf_r+0x29c>)
 8005976:	2b00      	cmp	r3, #0
 8005978:	f43f aefc 	beq.w	8005774 <__ssvfiscanf_r+0x60>
 800597c:	466b      	mov	r3, sp
 800597e:	4622      	mov	r2, r4
 8005980:	a941      	add	r1, sp, #260	; 0x104
 8005982:	4630      	mov	r0, r6
 8005984:	f3af 8000 	nop.w
 8005988:	e77d      	b.n	8005886 <__ssvfiscanf_r+0x172>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005990:	bf18      	it	ne
 8005992:	f04f 30ff 	movne.w	r0, #4294967295
 8005996:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80059a0:	e7f9      	b.n	8005996 <__ssvfiscanf_r+0x282>
 80059a2:	bf00      	nop
 80059a4:	08005661 	.word	0x08005661
 80059a8:	080056db 	.word	0x080056db
 80059ac:	080062b2 	.word	0x080062b2
 80059b0:	00000000 	.word	0x00000000

080059b4 <_scanf_chars>:
 80059b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b8:	4615      	mov	r5, r2
 80059ba:	688a      	ldr	r2, [r1, #8]
 80059bc:	4680      	mov	r8, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	b932      	cbnz	r2, 80059d0 <_scanf_chars+0x1c>
 80059c2:	698a      	ldr	r2, [r1, #24]
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	bf14      	ite	ne
 80059c8:	f04f 32ff 	movne.w	r2, #4294967295
 80059cc:	2201      	moveq	r2, #1
 80059ce:	608a      	str	r2, [r1, #8]
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	06d1      	lsls	r1, r2, #27
 80059d4:	bf5f      	itttt	pl
 80059d6:	681a      	ldrpl	r2, [r3, #0]
 80059d8:	1d11      	addpl	r1, r2, #4
 80059da:	6019      	strpl	r1, [r3, #0]
 80059dc:	6817      	ldrpl	r7, [r2, #0]
 80059de:	2600      	movs	r6, #0
 80059e0:	69a3      	ldr	r3, [r4, #24]
 80059e2:	b1db      	cbz	r3, 8005a1c <_scanf_chars+0x68>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d107      	bne.n	80059f8 <_scanf_chars+0x44>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6962      	ldr	r2, [r4, #20]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	5cd3      	ldrb	r3, [r2, r3]
 80059f0:	b9a3      	cbnz	r3, 8005a1c <_scanf_chars+0x68>
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	d132      	bne.n	8005a5c <_scanf_chars+0xa8>
 80059f6:	e006      	b.n	8005a06 <_scanf_chars+0x52>
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d007      	beq.n	8005a0c <_scanf_chars+0x58>
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	d12d      	bne.n	8005a5c <_scanf_chars+0xa8>
 8005a00:	69a3      	ldr	r3, [r4, #24]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d12a      	bne.n	8005a5c <_scanf_chars+0xa8>
 8005a06:	2001      	movs	r0, #1
 8005a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a0c:	f000 fac4 	bl	8005f98 <__locale_ctype_ptr>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	4418      	add	r0, r3
 8005a16:	7843      	ldrb	r3, [r0, #1]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	d4ef      	bmi.n	80059fc <_scanf_chars+0x48>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	06da      	lsls	r2, r3, #27
 8005a20:	bf5e      	ittt	pl
 8005a22:	682b      	ldrpl	r3, [r5, #0]
 8005a24:	781b      	ldrbpl	r3, [r3, #0]
 8005a26:	703b      	strbpl	r3, [r7, #0]
 8005a28:	682a      	ldr	r2, [r5, #0]
 8005a2a:	686b      	ldr	r3, [r5, #4]
 8005a2c:	f102 0201 	add.w	r2, r2, #1
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	68a2      	ldr	r2, [r4, #8]
 8005a34:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a38:	f102 32ff 	add.w	r2, r2, #4294967295
 8005a3c:	606b      	str	r3, [r5, #4]
 8005a3e:	f106 0601 	add.w	r6, r6, #1
 8005a42:	bf58      	it	pl
 8005a44:	3701      	addpl	r7, #1
 8005a46:	60a2      	str	r2, [r4, #8]
 8005a48:	b142      	cbz	r2, 8005a5c <_scanf_chars+0xa8>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dcc8      	bgt.n	80059e0 <_scanf_chars+0x2c>
 8005a4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a52:	4629      	mov	r1, r5
 8005a54:	4640      	mov	r0, r8
 8005a56:	4798      	blx	r3
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d0c1      	beq.n	80059e0 <_scanf_chars+0x2c>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f013 0310 	ands.w	r3, r3, #16
 8005a62:	d105      	bne.n	8005a70 <_scanf_chars+0xbc>
 8005a64:	68e2      	ldr	r2, [r4, #12]
 8005a66:	3201      	adds	r2, #1
 8005a68:	60e2      	str	r2, [r4, #12]
 8005a6a:	69a2      	ldr	r2, [r4, #24]
 8005a6c:	b102      	cbz	r2, 8005a70 <_scanf_chars+0xbc>
 8005a6e:	703b      	strb	r3, [r7, #0]
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	441e      	add	r6, r3
 8005a74:	6126      	str	r6, [r4, #16]
 8005a76:	2000      	movs	r0, #0
 8005a78:	e7c6      	b.n	8005a08 <_scanf_chars+0x54>
	...

08005a7c <_scanf_i>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	469a      	mov	sl, r3
 8005a82:	4b74      	ldr	r3, [pc, #464]	; (8005c54 <_scanf_i+0x1d8>)
 8005a84:	460c      	mov	r4, r1
 8005a86:	4683      	mov	fp, r0
 8005a88:	4616      	mov	r6, r2
 8005a8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	ab03      	add	r3, sp, #12
 8005a92:	68a7      	ldr	r7, [r4, #8]
 8005a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a98:	4b6f      	ldr	r3, [pc, #444]	; (8005c58 <_scanf_i+0x1dc>)
 8005a9a:	69a1      	ldr	r1, [r4, #24]
 8005a9c:	4a6f      	ldr	r2, [pc, #444]	; (8005c5c <_scanf_i+0x1e0>)
 8005a9e:	2903      	cmp	r1, #3
 8005aa0:	bf08      	it	eq
 8005aa2:	461a      	moveq	r2, r3
 8005aa4:	1e7b      	subs	r3, r7, #1
 8005aa6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005aaa:	bf84      	itt	hi
 8005aac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ab0:	60a3      	strhi	r3, [r4, #8]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	9200      	str	r2, [sp, #0]
 8005ab6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005aba:	bf88      	it	hi
 8005abc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ac0:	f104 091c 	add.w	r9, r4, #28
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bf8c      	ite	hi
 8005ac8:	197f      	addhi	r7, r7, r5
 8005aca:	2700      	movls	r7, #0
 8005acc:	464b      	mov	r3, r9
 8005ace:	f04f 0800 	mov.w	r8, #0
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	6831      	ldr	r1, [r6, #0]
 8005ad6:	ab03      	add	r3, sp, #12
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ade:	7809      	ldrb	r1, [r1, #0]
 8005ae0:	f7fa fb7e 	bl	80001e0 <memchr>
 8005ae4:	9b01      	ldr	r3, [sp, #4]
 8005ae6:	b330      	cbz	r0, 8005b36 <_scanf_i+0xba>
 8005ae8:	f1b8 0f01 	cmp.w	r8, #1
 8005aec:	d15a      	bne.n	8005ba4 <_scanf_i+0x128>
 8005aee:	6862      	ldr	r2, [r4, #4]
 8005af0:	b92a      	cbnz	r2, 8005afe <_scanf_i+0x82>
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	2108      	movs	r1, #8
 8005af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afa:	6061      	str	r1, [r4, #4]
 8005afc:	6022      	str	r2, [r4, #0]
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005b04:	6022      	str	r2, [r4, #0]
 8005b06:	68a2      	ldr	r2, [r4, #8]
 8005b08:	1e51      	subs	r1, r2, #1
 8005b0a:	60a1      	str	r1, [r4, #8]
 8005b0c:	b19a      	cbz	r2, 8005b36 <_scanf_i+0xba>
 8005b0e:	6832      	ldr	r2, [r6, #0]
 8005b10:	1c51      	adds	r1, r2, #1
 8005b12:	6031      	str	r1, [r6, #0]
 8005b14:	7812      	ldrb	r2, [r2, #0]
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	1c5d      	adds	r5, r3, #1
 8005b1a:	6873      	ldr	r3, [r6, #4]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	6073      	str	r3, [r6, #4]
 8005b22:	dc07      	bgt.n	8005b34 <_scanf_i+0xb8>
 8005b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4658      	mov	r0, fp
 8005b2c:	4798      	blx	r3
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f040 8086 	bne.w	8005c40 <_scanf_i+0x1c4>
 8005b34:	462b      	mov	r3, r5
 8005b36:	f108 0801 	add.w	r8, r8, #1
 8005b3a:	f1b8 0f03 	cmp.w	r8, #3
 8005b3e:	d1c8      	bne.n	8005ad2 <_scanf_i+0x56>
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	b90a      	cbnz	r2, 8005b48 <_scanf_i+0xcc>
 8005b44:	220a      	movs	r2, #10
 8005b46:	6062      	str	r2, [r4, #4]
 8005b48:	6862      	ldr	r2, [r4, #4]
 8005b4a:	4945      	ldr	r1, [pc, #276]	; (8005c60 <_scanf_i+0x1e4>)
 8005b4c:	6960      	ldr	r0, [r4, #20]
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	1a89      	subs	r1, r1, r2
 8005b52:	f000 f897 	bl	8005c84 <__sccl>
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	461d      	mov	r5, r3
 8005b5e:	68a3      	ldr	r3, [r4, #8]
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d03a      	beq.n	8005bdc <_scanf_i+0x160>
 8005b66:	6831      	ldr	r1, [r6, #0]
 8005b68:	6960      	ldr	r0, [r4, #20]
 8005b6a:	f891 c000 	ldrb.w	ip, [r1]
 8005b6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d032      	beq.n	8005bdc <_scanf_i+0x160>
 8005b76:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005b7a:	d121      	bne.n	8005bc0 <_scanf_i+0x144>
 8005b7c:	0510      	lsls	r0, r2, #20
 8005b7e:	d51f      	bpl.n	8005bc0 <_scanf_i+0x144>
 8005b80:	f108 0801 	add.w	r8, r8, #1
 8005b84:	b117      	cbz	r7, 8005b8c <_scanf_i+0x110>
 8005b86:	3301      	adds	r3, #1
 8005b88:	3f01      	subs	r7, #1
 8005b8a:	60a3      	str	r3, [r4, #8]
 8005b8c:	6873      	ldr	r3, [r6, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	6073      	str	r3, [r6, #4]
 8005b94:	dd1b      	ble.n	8005bce <_scanf_i+0x152>
 8005b96:	6833      	ldr	r3, [r6, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	6033      	str	r3, [r6, #0]
 8005b9c:	68a3      	ldr	r3, [r4, #8]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	e7dc      	b.n	8005b5e <_scanf_i+0xe2>
 8005ba4:	f1b8 0f02 	cmp.w	r8, #2
 8005ba8:	d1ad      	bne.n	8005b06 <_scanf_i+0x8a>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005bb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005bb4:	d1bf      	bne.n	8005b36 <_scanf_i+0xba>
 8005bb6:	2110      	movs	r1, #16
 8005bb8:	6061      	str	r1, [r4, #4]
 8005bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bbe:	e7a1      	b.n	8005b04 <_scanf_i+0x88>
 8005bc0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005bc4:	6022      	str	r2, [r4, #0]
 8005bc6:	780b      	ldrb	r3, [r1, #0]
 8005bc8:	702b      	strb	r3, [r5, #0]
 8005bca:	3501      	adds	r5, #1
 8005bcc:	e7de      	b.n	8005b8c <_scanf_i+0x110>
 8005bce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	4798      	blx	r3
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d0df      	beq.n	8005b9c <_scanf_i+0x120>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	05d9      	lsls	r1, r3, #23
 8005be0:	d50c      	bpl.n	8005bfc <_scanf_i+0x180>
 8005be2:	454d      	cmp	r5, r9
 8005be4:	d908      	bls.n	8005bf8 <_scanf_i+0x17c>
 8005be6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4658      	mov	r0, fp
 8005bf2:	4798      	blx	r3
 8005bf4:	1e6f      	subs	r7, r5, #1
 8005bf6:	463d      	mov	r5, r7
 8005bf8:	454d      	cmp	r5, r9
 8005bfa:	d029      	beq.n	8005c50 <_scanf_i+0x1d4>
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	f012 0210 	ands.w	r2, r2, #16
 8005c02:	d113      	bne.n	8005c2c <_scanf_i+0x1b0>
 8005c04:	702a      	strb	r2, [r5, #0]
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	9e00      	ldr	r6, [sp, #0]
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4658      	mov	r0, fp
 8005c0e:	47b0      	blx	r6
 8005c10:	f8da 3000 	ldr.w	r3, [sl]
 8005c14:	6821      	ldr	r1, [r4, #0]
 8005c16:	1d1a      	adds	r2, r3, #4
 8005c18:	f8ca 2000 	str.w	r2, [sl]
 8005c1c:	f011 0f20 	tst.w	r1, #32
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	d010      	beq.n	8005c46 <_scanf_i+0x1ca>
 8005c24:	6018      	str	r0, [r3, #0]
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	60e3      	str	r3, [r4, #12]
 8005c2c:	eba5 0509 	sub.w	r5, r5, r9
 8005c30:	44a8      	add	r8, r5
 8005c32:	6925      	ldr	r5, [r4, #16]
 8005c34:	4445      	add	r5, r8
 8005c36:	6125      	str	r5, [r4, #16]
 8005c38:	2000      	movs	r0, #0
 8005c3a:	b007      	add	sp, #28
 8005c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c40:	f04f 0800 	mov.w	r8, #0
 8005c44:	e7ca      	b.n	8005bdc <_scanf_i+0x160>
 8005c46:	07ca      	lsls	r2, r1, #31
 8005c48:	bf4c      	ite	mi
 8005c4a:	8018      	strhmi	r0, [r3, #0]
 8005c4c:	6018      	strpl	r0, [r3, #0]
 8005c4e:	e7ea      	b.n	8005c26 <_scanf_i+0x1aa>
 8005c50:	2001      	movs	r0, #1
 8005c52:	e7f2      	b.n	8005c3a <_scanf_i+0x1be>
 8005c54:	0800611c 	.word	0x0800611c
 8005c58:	08005de1 	.word	0x08005de1
 8005c5c:	08005ef9 	.word	0x08005ef9
 8005c60:	080062cd 	.word	0x080062cd

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4c06      	ldr	r4, [pc, #24]	; (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	f7fc fd4a 	bl	8002708 <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20000398 	.word	0x20000398

08005c84 <__sccl>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	780b      	ldrb	r3, [r1, #0]
 8005c88:	2b5e      	cmp	r3, #94	; 0x5e
 8005c8a:	bf13      	iteet	ne
 8005c8c:	1c4a      	addne	r2, r1, #1
 8005c8e:	1c8a      	addeq	r2, r1, #2
 8005c90:	784b      	ldrbeq	r3, [r1, #1]
 8005c92:	2100      	movne	r1, #0
 8005c94:	bf08      	it	eq
 8005c96:	2101      	moveq	r1, #1
 8005c98:	1e44      	subs	r4, r0, #1
 8005c9a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005c9e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005ca2:	42ac      	cmp	r4, r5
 8005ca4:	d1fb      	bne.n	8005c9e <__sccl+0x1a>
 8005ca6:	b913      	cbnz	r3, 8005cae <__sccl+0x2a>
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	4610      	mov	r0, r2
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	f081 0401 	eor.w	r4, r1, #1
 8005cb2:	54c4      	strb	r4, [r0, r3]
 8005cb4:	1c51      	adds	r1, r2, #1
 8005cb6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8005cba:	2d2d      	cmp	r5, #45	; 0x2d
 8005cbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	d006      	beq.n	8005cd2 <__sccl+0x4e>
 8005cc4:	2d5d      	cmp	r5, #93	; 0x5d
 8005cc6:	d0f0      	beq.n	8005caa <__sccl+0x26>
 8005cc8:	b90d      	cbnz	r5, 8005cce <__sccl+0x4a>
 8005cca:	4632      	mov	r2, r6
 8005ccc:	e7ed      	b.n	8005caa <__sccl+0x26>
 8005cce:	462b      	mov	r3, r5
 8005cd0:	e7ef      	b.n	8005cb2 <__sccl+0x2e>
 8005cd2:	780e      	ldrb	r6, [r1, #0]
 8005cd4:	2e5d      	cmp	r6, #93	; 0x5d
 8005cd6:	d0fa      	beq.n	8005cce <__sccl+0x4a>
 8005cd8:	42b3      	cmp	r3, r6
 8005cda:	dcf8      	bgt.n	8005cce <__sccl+0x4a>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	429e      	cmp	r6, r3
 8005ce0:	54c4      	strb	r4, [r0, r3]
 8005ce2:	dcfb      	bgt.n	8005cdc <__sccl+0x58>
 8005ce4:	3102      	adds	r1, #2
 8005ce6:	e7e6      	b.n	8005cb6 <__sccl+0x32>

08005ce8 <_strtol_l.isra.0>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	4692      	mov	sl, r2
 8005cf2:	461e      	mov	r6, r3
 8005cf4:	460f      	mov	r7, r1
 8005cf6:	463d      	mov	r5, r7
 8005cf8:	9808      	ldr	r0, [sp, #32]
 8005cfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cfe:	f000 f947 	bl	8005f90 <__locale_ctype_ptr_l>
 8005d02:	4420      	add	r0, r4
 8005d04:	7843      	ldrb	r3, [r0, #1]
 8005d06:	f013 0308 	ands.w	r3, r3, #8
 8005d0a:	d132      	bne.n	8005d72 <_strtol_l.isra.0+0x8a>
 8005d0c:	2c2d      	cmp	r4, #45	; 0x2d
 8005d0e:	d132      	bne.n	8005d76 <_strtol_l.isra.0+0x8e>
 8005d10:	787c      	ldrb	r4, [r7, #1]
 8005d12:	1cbd      	adds	r5, r7, #2
 8005d14:	2201      	movs	r2, #1
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	d05d      	beq.n	8005dd6 <_strtol_l.isra.0+0xee>
 8005d1a:	2e10      	cmp	r6, #16
 8005d1c:	d109      	bne.n	8005d32 <_strtol_l.isra.0+0x4a>
 8005d1e:	2c30      	cmp	r4, #48	; 0x30
 8005d20:	d107      	bne.n	8005d32 <_strtol_l.isra.0+0x4a>
 8005d22:	782b      	ldrb	r3, [r5, #0]
 8005d24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d28:	2b58      	cmp	r3, #88	; 0x58
 8005d2a:	d14f      	bne.n	8005dcc <_strtol_l.isra.0+0xe4>
 8005d2c:	786c      	ldrb	r4, [r5, #1]
 8005d2e:	2610      	movs	r6, #16
 8005d30:	3502      	adds	r5, #2
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	bf14      	ite	ne
 8005d36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d3e:	2700      	movs	r7, #0
 8005d40:	fbb1 fcf6 	udiv	ip, r1, r6
 8005d44:	4638      	mov	r0, r7
 8005d46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005d4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005d4e:	2b09      	cmp	r3, #9
 8005d50:	d817      	bhi.n	8005d82 <_strtol_l.isra.0+0x9a>
 8005d52:	461c      	mov	r4, r3
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	dd23      	ble.n	8005da0 <_strtol_l.isra.0+0xb8>
 8005d58:	1c7b      	adds	r3, r7, #1
 8005d5a:	d007      	beq.n	8005d6c <_strtol_l.isra.0+0x84>
 8005d5c:	4584      	cmp	ip, r0
 8005d5e:	d31c      	bcc.n	8005d9a <_strtol_l.isra.0+0xb2>
 8005d60:	d101      	bne.n	8005d66 <_strtol_l.isra.0+0x7e>
 8005d62:	45a6      	cmp	lr, r4
 8005d64:	db19      	blt.n	8005d9a <_strtol_l.isra.0+0xb2>
 8005d66:	fb00 4006 	mla	r0, r0, r6, r4
 8005d6a:	2701      	movs	r7, #1
 8005d6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d70:	e7eb      	b.n	8005d4a <_strtol_l.isra.0+0x62>
 8005d72:	462f      	mov	r7, r5
 8005d74:	e7bf      	b.n	8005cf6 <_strtol_l.isra.0+0xe>
 8005d76:	2c2b      	cmp	r4, #43	; 0x2b
 8005d78:	bf04      	itt	eq
 8005d7a:	1cbd      	addeq	r5, r7, #2
 8005d7c:	787c      	ldrbeq	r4, [r7, #1]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	e7c9      	b.n	8005d16 <_strtol_l.isra.0+0x2e>
 8005d82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005d86:	2b19      	cmp	r3, #25
 8005d88:	d801      	bhi.n	8005d8e <_strtol_l.isra.0+0xa6>
 8005d8a:	3c37      	subs	r4, #55	; 0x37
 8005d8c:	e7e2      	b.n	8005d54 <_strtol_l.isra.0+0x6c>
 8005d8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005d92:	2b19      	cmp	r3, #25
 8005d94:	d804      	bhi.n	8005da0 <_strtol_l.isra.0+0xb8>
 8005d96:	3c57      	subs	r4, #87	; 0x57
 8005d98:	e7dc      	b.n	8005d54 <_strtol_l.isra.0+0x6c>
 8005d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8005d9e:	e7e5      	b.n	8005d6c <_strtol_l.isra.0+0x84>
 8005da0:	1c7b      	adds	r3, r7, #1
 8005da2:	d108      	bne.n	8005db6 <_strtol_l.isra.0+0xce>
 8005da4:	2322      	movs	r3, #34	; 0x22
 8005da6:	f8c8 3000 	str.w	r3, [r8]
 8005daa:	4608      	mov	r0, r1
 8005dac:	f1ba 0f00 	cmp.w	sl, #0
 8005db0:	d107      	bne.n	8005dc2 <_strtol_l.isra.0+0xda>
 8005db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db6:	b102      	cbz	r2, 8005dba <_strtol_l.isra.0+0xd2>
 8005db8:	4240      	negs	r0, r0
 8005dba:	f1ba 0f00 	cmp.w	sl, #0
 8005dbe:	d0f8      	beq.n	8005db2 <_strtol_l.isra.0+0xca>
 8005dc0:	b10f      	cbz	r7, 8005dc6 <_strtol_l.isra.0+0xde>
 8005dc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005dc6:	f8ca 9000 	str.w	r9, [sl]
 8005dca:	e7f2      	b.n	8005db2 <_strtol_l.isra.0+0xca>
 8005dcc:	2430      	movs	r4, #48	; 0x30
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d1af      	bne.n	8005d32 <_strtol_l.isra.0+0x4a>
 8005dd2:	2608      	movs	r6, #8
 8005dd4:	e7ad      	b.n	8005d32 <_strtol_l.isra.0+0x4a>
 8005dd6:	2c30      	cmp	r4, #48	; 0x30
 8005dd8:	d0a3      	beq.n	8005d22 <_strtol_l.isra.0+0x3a>
 8005dda:	260a      	movs	r6, #10
 8005ddc:	e7a9      	b.n	8005d32 <_strtol_l.isra.0+0x4a>
	...

08005de0 <_strtol_r>:
 8005de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de2:	4c06      	ldr	r4, [pc, #24]	; (8005dfc <_strtol_r+0x1c>)
 8005de4:	4d06      	ldr	r5, [pc, #24]	; (8005e00 <_strtol_r+0x20>)
 8005de6:	6824      	ldr	r4, [r4, #0]
 8005de8:	6a24      	ldr	r4, [r4, #32]
 8005dea:	2c00      	cmp	r4, #0
 8005dec:	bf08      	it	eq
 8005dee:	462c      	moveq	r4, r5
 8005df0:	9400      	str	r4, [sp, #0]
 8005df2:	f7ff ff79 	bl	8005ce8 <_strtol_l.isra.0>
 8005df6:	b003      	add	sp, #12
 8005df8:	bd30      	pop	{r4, r5, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000004 	.word	0x20000004
 8005e00:	20000068 	.word	0x20000068

08005e04 <_strtoul_l.isra.0>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	4692      	mov	sl, r2
 8005e0e:	461e      	mov	r6, r3
 8005e10:	460f      	mov	r7, r1
 8005e12:	463d      	mov	r5, r7
 8005e14:	9808      	ldr	r0, [sp, #32]
 8005e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e1a:	f000 f8b9 	bl	8005f90 <__locale_ctype_ptr_l>
 8005e1e:	4420      	add	r0, r4
 8005e20:	7843      	ldrb	r3, [r0, #1]
 8005e22:	f013 0308 	ands.w	r3, r3, #8
 8005e26:	d130      	bne.n	8005e8a <_strtoul_l.isra.0+0x86>
 8005e28:	2c2d      	cmp	r4, #45	; 0x2d
 8005e2a:	d130      	bne.n	8005e8e <_strtoul_l.isra.0+0x8a>
 8005e2c:	787c      	ldrb	r4, [r7, #1]
 8005e2e:	1cbd      	adds	r5, r7, #2
 8005e30:	2101      	movs	r1, #1
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d05c      	beq.n	8005ef0 <_strtoul_l.isra.0+0xec>
 8005e36:	2e10      	cmp	r6, #16
 8005e38:	d109      	bne.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005e3a:	2c30      	cmp	r4, #48	; 0x30
 8005e3c:	d107      	bne.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005e3e:	782b      	ldrb	r3, [r5, #0]
 8005e40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e44:	2b58      	cmp	r3, #88	; 0x58
 8005e46:	d14e      	bne.n	8005ee6 <_strtoul_l.isra.0+0xe2>
 8005e48:	786c      	ldrb	r4, [r5, #1]
 8005e4a:	2610      	movs	r6, #16
 8005e4c:	3502      	adds	r5, #2
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e52:	2300      	movs	r3, #0
 8005e54:	fbb2 f2f6 	udiv	r2, r2, r6
 8005e58:	fb06 fc02 	mul.w	ip, r6, r2
 8005e5c:	ea6f 0c0c 	mvn.w	ip, ip
 8005e60:	4618      	mov	r0, r3
 8005e62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005e66:	2f09      	cmp	r7, #9
 8005e68:	d817      	bhi.n	8005e9a <_strtoul_l.isra.0+0x96>
 8005e6a:	463c      	mov	r4, r7
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	dd23      	ble.n	8005eb8 <_strtoul_l.isra.0+0xb4>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	db1e      	blt.n	8005eb2 <_strtoul_l.isra.0+0xae>
 8005e74:	4282      	cmp	r2, r0
 8005e76:	d31c      	bcc.n	8005eb2 <_strtoul_l.isra.0+0xae>
 8005e78:	d101      	bne.n	8005e7e <_strtoul_l.isra.0+0x7a>
 8005e7a:	45a4      	cmp	ip, r4
 8005e7c:	db19      	blt.n	8005eb2 <_strtoul_l.isra.0+0xae>
 8005e7e:	fb00 4006 	mla	r0, r0, r6, r4
 8005e82:	2301      	movs	r3, #1
 8005e84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e88:	e7eb      	b.n	8005e62 <_strtoul_l.isra.0+0x5e>
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	e7c1      	b.n	8005e12 <_strtoul_l.isra.0+0xe>
 8005e8e:	2c2b      	cmp	r4, #43	; 0x2b
 8005e90:	bf04      	itt	eq
 8005e92:	1cbd      	addeq	r5, r7, #2
 8005e94:	787c      	ldrbeq	r4, [r7, #1]
 8005e96:	4619      	mov	r1, r3
 8005e98:	e7cb      	b.n	8005e32 <_strtoul_l.isra.0+0x2e>
 8005e9a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005e9e:	2f19      	cmp	r7, #25
 8005ea0:	d801      	bhi.n	8005ea6 <_strtoul_l.isra.0+0xa2>
 8005ea2:	3c37      	subs	r4, #55	; 0x37
 8005ea4:	e7e2      	b.n	8005e6c <_strtoul_l.isra.0+0x68>
 8005ea6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005eaa:	2f19      	cmp	r7, #25
 8005eac:	d804      	bhi.n	8005eb8 <_strtoul_l.isra.0+0xb4>
 8005eae:	3c57      	subs	r4, #87	; 0x57
 8005eb0:	e7dc      	b.n	8005e6c <_strtoul_l.isra.0+0x68>
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb6:	e7e5      	b.n	8005e84 <_strtoul_l.isra.0+0x80>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da09      	bge.n	8005ed0 <_strtoul_l.isra.0+0xcc>
 8005ebc:	2322      	movs	r3, #34	; 0x22
 8005ebe:	f8c8 3000 	str.w	r3, [r8]
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec6:	f1ba 0f00 	cmp.w	sl, #0
 8005eca:	d107      	bne.n	8005edc <_strtoul_l.isra.0+0xd8>
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	b101      	cbz	r1, 8005ed4 <_strtoul_l.isra.0+0xd0>
 8005ed2:	4240      	negs	r0, r0
 8005ed4:	f1ba 0f00 	cmp.w	sl, #0
 8005ed8:	d0f8      	beq.n	8005ecc <_strtoul_l.isra.0+0xc8>
 8005eda:	b10b      	cbz	r3, 8005ee0 <_strtoul_l.isra.0+0xdc>
 8005edc:	f105 39ff 	add.w	r9, r5, #4294967295
 8005ee0:	f8ca 9000 	str.w	r9, [sl]
 8005ee4:	e7f2      	b.n	8005ecc <_strtoul_l.isra.0+0xc8>
 8005ee6:	2430      	movs	r4, #48	; 0x30
 8005ee8:	2e00      	cmp	r6, #0
 8005eea:	d1b0      	bne.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005eec:	2608      	movs	r6, #8
 8005eee:	e7ae      	b.n	8005e4e <_strtoul_l.isra.0+0x4a>
 8005ef0:	2c30      	cmp	r4, #48	; 0x30
 8005ef2:	d0a4      	beq.n	8005e3e <_strtoul_l.isra.0+0x3a>
 8005ef4:	260a      	movs	r6, #10
 8005ef6:	e7aa      	b.n	8005e4e <_strtoul_l.isra.0+0x4a>

08005ef8 <_strtoul_r>:
 8005ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005efa:	4c06      	ldr	r4, [pc, #24]	; (8005f14 <_strtoul_r+0x1c>)
 8005efc:	4d06      	ldr	r5, [pc, #24]	; (8005f18 <_strtoul_r+0x20>)
 8005efe:	6824      	ldr	r4, [r4, #0]
 8005f00:	6a24      	ldr	r4, [r4, #32]
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	bf08      	it	eq
 8005f06:	462c      	moveq	r4, r5
 8005f08:	9400      	str	r4, [sp, #0]
 8005f0a:	f7ff ff7b 	bl	8005e04 <_strtoul_l.isra.0>
 8005f0e:	b003      	add	sp, #12
 8005f10:	bd30      	pop	{r4, r5, pc}
 8005f12:	bf00      	nop
 8005f14:	20000004 	.word	0x20000004
 8005f18:	20000068 	.word	0x20000068

08005f1c <__submore>:
 8005f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	460c      	mov	r4, r1
 8005f22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	d11d      	bne.n	8005f68 <__submore+0x4c>
 8005f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f30:	f7ff f9ea 	bl	8005308 <_malloc_r>
 8005f34:	b918      	cbnz	r0, 8005f3e <__submore+0x22>
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f42:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f44:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005f48:	6360      	str	r0, [r4, #52]	; 0x34
 8005f4a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005f4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f52:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005f56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f5a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005f5e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005f62:	6020      	str	r0, [r4, #0]
 8005f64:	2000      	movs	r0, #0
 8005f66:	e7e8      	b.n	8005f3a <__submore+0x1e>
 8005f68:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005f6a:	0077      	lsls	r7, r6, #1
 8005f6c:	463a      	mov	r2, r7
 8005f6e:	f000 f84e 	bl	800600e <_realloc_r>
 8005f72:	4605      	mov	r5, r0
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d0de      	beq.n	8005f36 <__submore+0x1a>
 8005f78:	eb00 0806 	add.w	r8, r0, r6
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4640      	mov	r0, r8
 8005f82:	f7fe fe7f 	bl	8004c84 <memcpy>
 8005f86:	f8c4 8000 	str.w	r8, [r4]
 8005f8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005f8e:	e7e9      	b.n	8005f64 <__submore+0x48>

08005f90 <__locale_ctype_ptr_l>:
 8005f90:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005f94:	4770      	bx	lr
	...

08005f98 <__locale_ctype_ptr>:
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <__locale_ctype_ptr+0x14>)
 8005f9a:	4a05      	ldr	r2, [pc, #20]	; (8005fb0 <__locale_ctype_ptr+0x18>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf08      	it	eq
 8005fa4:	4613      	moveq	r3, r2
 8005fa6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005faa:	4770      	bx	lr
 8005fac:	20000004 	.word	0x20000004
 8005fb0:	20000068 	.word	0x20000068

08005fb4 <__ascii_mbtowc>:
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	b901      	cbnz	r1, 8005fba <__ascii_mbtowc+0x6>
 8005fb8:	a901      	add	r1, sp, #4
 8005fba:	b142      	cbz	r2, 8005fce <__ascii_mbtowc+0x1a>
 8005fbc:	b14b      	cbz	r3, 8005fd2 <__ascii_mbtowc+0x1e>
 8005fbe:	7813      	ldrb	r3, [r2, #0]
 8005fc0:	600b      	str	r3, [r1, #0]
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	1c10      	adds	r0, r2, #0
 8005fc6:	bf18      	it	ne
 8005fc8:	2001      	movne	r0, #1
 8005fca:	b002      	add	sp, #8
 8005fcc:	4770      	bx	lr
 8005fce:	4610      	mov	r0, r2
 8005fd0:	e7fb      	b.n	8005fca <__ascii_mbtowc+0x16>
 8005fd2:	f06f 0001 	mvn.w	r0, #1
 8005fd6:	e7f8      	b.n	8005fca <__ascii_mbtowc+0x16>

08005fd8 <memmove>:
 8005fd8:	4288      	cmp	r0, r1
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	eb01 0302 	add.w	r3, r1, r2
 8005fe0:	d807      	bhi.n	8005ff2 <memmove+0x1a>
 8005fe2:	1e42      	subs	r2, r0, #1
 8005fe4:	4299      	cmp	r1, r3
 8005fe6:	d00a      	beq.n	8005ffe <memmove+0x26>
 8005fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ff0:	e7f8      	b.n	8005fe4 <memmove+0xc>
 8005ff2:	4283      	cmp	r3, r0
 8005ff4:	d9f5      	bls.n	8005fe2 <memmove+0xa>
 8005ff6:	1881      	adds	r1, r0, r2
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	42d3      	cmn	r3, r2
 8005ffc:	d100      	bne.n	8006000 <memmove+0x28>
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006004:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006008:	e7f7      	b.n	8005ffa <memmove+0x22>

0800600a <__malloc_lock>:
 800600a:	4770      	bx	lr

0800600c <__malloc_unlock>:
 800600c:	4770      	bx	lr

0800600e <_realloc_r>:
 800600e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006010:	4607      	mov	r7, r0
 8006012:	4614      	mov	r4, r2
 8006014:	460e      	mov	r6, r1
 8006016:	b921      	cbnz	r1, 8006022 <_realloc_r+0x14>
 8006018:	4611      	mov	r1, r2
 800601a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800601e:	f7ff b973 	b.w	8005308 <_malloc_r>
 8006022:	b922      	cbnz	r2, 800602e <_realloc_r+0x20>
 8006024:	f7ff f922 	bl	800526c <_free_r>
 8006028:	4625      	mov	r5, r4
 800602a:	4628      	mov	r0, r5
 800602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602e:	f000 f821 	bl	8006074 <_malloc_usable_size_r>
 8006032:	42a0      	cmp	r0, r4
 8006034:	d20f      	bcs.n	8006056 <_realloc_r+0x48>
 8006036:	4621      	mov	r1, r4
 8006038:	4638      	mov	r0, r7
 800603a:	f7ff f965 	bl	8005308 <_malloc_r>
 800603e:	4605      	mov	r5, r0
 8006040:	2800      	cmp	r0, #0
 8006042:	d0f2      	beq.n	800602a <_realloc_r+0x1c>
 8006044:	4631      	mov	r1, r6
 8006046:	4622      	mov	r2, r4
 8006048:	f7fe fe1c 	bl	8004c84 <memcpy>
 800604c:	4631      	mov	r1, r6
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff f90c 	bl	800526c <_free_r>
 8006054:	e7e9      	b.n	800602a <_realloc_r+0x1c>
 8006056:	4635      	mov	r5, r6
 8006058:	e7e7      	b.n	800602a <_realloc_r+0x1c>

0800605a <__ascii_wctomb>:
 800605a:	b149      	cbz	r1, 8006070 <__ascii_wctomb+0x16>
 800605c:	2aff      	cmp	r2, #255	; 0xff
 800605e:	bf85      	ittet	hi
 8006060:	238a      	movhi	r3, #138	; 0x8a
 8006062:	6003      	strhi	r3, [r0, #0]
 8006064:	700a      	strbls	r2, [r1, #0]
 8006066:	f04f 30ff 	movhi.w	r0, #4294967295
 800606a:	bf98      	it	ls
 800606c:	2001      	movls	r0, #1
 800606e:	4770      	bx	lr
 8006070:	4608      	mov	r0, r1
 8006072:	4770      	bx	lr

08006074 <_malloc_usable_size_r>:
 8006074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006078:	1f18      	subs	r0, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfbc      	itt	lt
 800607e:	580b      	ldrlt	r3, [r1, r0]
 8006080:	18c0      	addlt	r0, r0, r3
 8006082:	4770      	bx	lr

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
